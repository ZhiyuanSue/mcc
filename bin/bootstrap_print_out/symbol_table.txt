read in file name:
	./pre/symbol_table.i
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:size_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:__off64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:__off_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:7>
                            <&struct_decl ns:7>
                                <&spec_qual_list ns:7>
                                    <&type_spec ns:7>
                                        <KW_int:int sym level: 0 namespace:7>
                                <&struct_declarator_list ns:7>
                                    <&struct_declarator ns:7>
                                        <&declarator ns:7>
                                            <&direct_declarator ns:7>
                                                <identifier:__count sym level: 0 namespace:7>
                                <;:; sym level: 0 namespace:7>
                            <&struct_decl ns:7>
                                <&spec_qual_list ns:7>
                                    <&type_spec ns:7>
                                        <&struct_union_spec ns:7>
                                            <&struct_union ns:7>
                                                <KW_union:union sym level: 0 namespace:7>
                                            <left_brace:{ sym level: 0 namespace:7>
                                            <&struct_decl_list ns:8>
                                                <&struct_decl ns:8>
                                                    <&spec_qual_list ns:8>
                                                        <&type_spec ns:8>
                                                            <KW_unsigned:unsigned sym level: 0 namespace:8>
                                                        <&type_spec ns:8>
                                                            <KW_int:int sym level: 0 namespace:8>
                                                    <&struct_declarator_list ns:8>
                                                        <&struct_declarator ns:8>
                                                            <&declarator ns:8>
                                                                <&direct_declarator ns:8>
                                                                    <identifier:__wch sym level: 0 namespace:8>
                                                    <;:; sym level: 0 namespace:8>
                                                <&struct_decl ns:8>
                                                    <&spec_qual_list ns:8>
                                                        <&type_spec ns:8>
                                                            <KW_char:char sym level: 0 namespace:8>
                                                    <&struct_declarator_list ns:8>
                                                        <&struct_declarator ns:8>
                                                            <&declarator ns:8>
                                                                <&direct_declarator ns:8>
                                                                    <identifier:__wchb sym level: 0 namespace:8>
                                                                    <[:[ sym level: 0 namespace:8>
                                                                    <&primary_expression ns:8>
                                                                        <integer_constant:4 sym level: 0 namespace:8>
                                                                    <]:] sym level: 0 namespace:8>
                                                    <;:; sym level: 0 namespace:8>
                                            <right_brace:} sym level: 0 namespace:7>
                                <&struct_declarator_list ns:7>
                                    <&struct_declarator ns:7>
                                        <&declarator ns:7>
                                            <&direct_declarator ns:7>
                                                <identifier:__value sym level: 0 namespace:7>
                                <;:; sym level: 0 namespace:7>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:__mbstate_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:_G_fpos_t sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:10>
                            <&struct_decl ns:10>
                                <&spec_qual_list ns:10>
                                    <&type_spec ns:10>
                                        <&typedef_name ns:10>
                                            <identifier:__off_t sym level: 0 namespace:10>
                                <&struct_declarator_list ns:10>
                                    <&struct_declarator ns:10>
                                        <&declarator ns:10>
                                            <&direct_declarator ns:10>
                                                <identifier:__pos sym level: 0 namespace:10>
                                <;:; sym level: 0 namespace:10>
                            <&struct_decl ns:10>
                                <&spec_qual_list ns:10>
                                    <&type_spec ns:10>
                                        <&typedef_name ns:10>
                                            <identifier:__mbstate_t sym level: 0 namespace:10>
                                <&struct_declarator_list ns:10>
                                    <&struct_declarator ns:10>
                                        <&declarator ns:10>
                                            <&direct_declarator ns:10>
                                                <identifier:__state sym level: 0 namespace:10>
                                <;:; sym level: 0 namespace:10>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:__fpos_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:__fpos_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fpos_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:_G_fpos64_t sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:13>
                            <&struct_decl ns:13>
                                <&spec_qual_list ns:13>
                                    <&type_spec ns:13>
                                        <&typedef_name ns:13>
                                            <identifier:__off64_t sym level: 0 namespace:13>
                                <&struct_declarator_list ns:13>
                                    <&struct_declarator ns:13>
                                        <&declarator ns:13>
                                            <&direct_declarator ns:13>
                                                <identifier:__pos sym level: 0 namespace:13>
                                <;:; sym level: 0 namespace:13>
                            <&struct_decl ns:13>
                                <&spec_qual_list ns:13>
                                    <&type_spec ns:13>
                                        <&typedef_name ns:13>
                                            <identifier:__mbstate_t sym level: 0 namespace:13>
                                <&struct_declarator_list ns:13>
                                    <&struct_declarator ns:13>
                                        <&declarator ns:13>
                                            <&direct_declarator ns:13>
                                                <identifier:__state sym level: 0 namespace:13>
                                <;:; sym level: 0 namespace:13>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:__fpos64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:_IO_marker sym level: 0 namespace:2>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:_IO_FILE sym level: 0 namespace:2>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:_IO_FILE sym level: 0 namespace:2>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:FILE sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:_IO_lock_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:_IO_FILE sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_int:int sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_flags sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_read_ptr sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_read_end sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_read_base sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_write_base sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_write_ptr sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_write_end sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_buf_base sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_buf_end sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_save_base sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_backup_base sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_IO_save_end sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&struct_union_spec ns:19>
                                            <&struct_union ns:19>
                                                <KW_struct:struct sym level: 0 namespace:19>
                                            <identifier:_IO_marker sym level: 0 namespace:2>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_markers sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&struct_union_spec ns:19>
                                            <&struct_union ns:19>
                                                <KW_struct:struct sym level: 0 namespace:19>
                                            <identifier:_IO_FILE sym level: 0 namespace:2>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_chain sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_int:int sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_fileno sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_int:int sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_flags2 sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&typedef_name ns:19>
                                            <identifier:__off_t sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_old_offset sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_unsigned:unsigned sym level: 0 namespace:19>
                                    <&type_spec ns:19>
                                        <KW_short:short sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_cur_column sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_signed:signed sym level: 0 namespace:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_vtable_offset sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_shortbuf sym level: 0 namespace:19>
                                                <[:[ sym level: 0 namespace:19>
                                                <&primary_expression ns:19>
                                                    <integer_constant:1 sym level: 0 namespace:19>
                                                <]:] sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&typedef_name ns:19>
                                            <identifier:_IO_lock_t sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_lock sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&typedef_name ns:19>
                                            <identifier:__off64_t sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_offset sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&struct_union_spec ns:19>
                                            <&struct_union ns:19>
                                                <KW_struct:struct sym level: 0 namespace:19>
                                            <identifier:_IO_codecvt sym level: 0 namespace:2>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_codecvt sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&struct_union_spec ns:19>
                                            <&struct_union ns:19>
                                                <KW_struct:struct sym level: 0 namespace:19>
                                            <identifier:_IO_wide_data sym level: 0 namespace:2>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_wide_data sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&struct_union_spec ns:19>
                                            <&struct_union ns:19>
                                                <KW_struct:struct sym level: 0 namespace:19>
                                            <identifier:_IO_FILE sym level: 0 namespace:2>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_freeres_list sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_void:void sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&pointer ns:19>
                                                <*:* sym level: 0 namespace:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_freeres_buf sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <&typedef_name ns:19>
                                            <identifier:size_t sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:__pad5 sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_int:int sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_mode sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                            <&struct_decl ns:19>
                                <&spec_qual_list ns:19>
                                    <&type_spec ns:19>
                                        <KW_char:char sym level: 0 namespace:19>
                                <&struct_declarator_list ns:19>
                                    <&struct_declarator ns:19>
                                        <&declarator ns:19>
                                            <&direct_declarator ns:19>
                                                <identifier:_unused2 sym level: 0 namespace:19>
                                                <[:[ sym level: 0 namespace:19>
                                                <&additive_expr ns:19>
                                                    <&multi_expr ns:19>
                                                        <&primary_expression ns:19>
                                                            <integer_constant:15 sym level: 0 namespace:19>
                                                        <*:* sym level: 0 namespace:19>
                                                        <&unary_expr ns:19>
                                                            <KW_sizeof:sizeof sym level: 0 namespace:19>
                                                            <(:( sym level: 0 namespace:19>
                                                            <&type_name ns:19>
                                                                <&spec_qual_list ns:19>
                                                                    <&type_spec ns:19>
                                                                        <KW_int:int sym level: 0 namespace:19>
                                                            <):) sym level: 0 namespace:19>
                                                    <-:- sym level: 0 namespace:19>
                                                    <&multi_expr ns:19>
                                                        <&primary_expression ns:19>
                                                            <integer_constant:4 sym level: 0 namespace:19>
                                                        <*:* sym level: 0 namespace:19>
                                                        <&unary_expr ns:19>
                                                            <KW_sizeof:sizeof sym level: 0 namespace:19>
                                                            <(:( sym level: 0 namespace:19>
                                                            <&type_name ns:19>
                                                                <&spec_qual_list ns:19>
                                                                    <&type_spec ns:19>
                                                                        <KW_void:void sym level: 0 namespace:19>
                                                                <&abstract_declarator ns:19>
                                                                    <&pointer ns:19>
                                                                        <*:* sym level: 0 namespace:19>
                                                            <):) sym level: 0 namespace:19>
                                                    <-:- sym level: 0 namespace:19>
                                                    <&unary_expr ns:19>
                                                        <KW_sizeof:sizeof sym level: 0 namespace:19>
                                                        <&primary_expression ns:19>
                                                            <(:( sym level: 0 namespace:19>
                                                            <&primary_expression ns:19>
                                                                <identifier:size_t sym level: 0 namespace:19>
                                                            <):) sym level: 0 namespace:19>
                                                <]:] sym level: 0 namespace:19>
                                <;:; sym level: 0 namespace:19>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:remove sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:filename sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:rename sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:old sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:new sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:FILE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:tmpfile sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:tmpnam sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fclose sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fflush sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:FILE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:fopen sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:filename sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:mode sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:FILE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:freopen sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:filename sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:mode sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:setbuf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:buf sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:setvbuf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:buf sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:mode sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:size sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fprintf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fscanf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:printf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:scanf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:snprintf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:sprintf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:sscanf sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:fgets sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fputc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fputs sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:getc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:getchar sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:putc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:putchar sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:puts sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:ungetc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fread sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:ptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:size sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nmemb sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fwrite sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:ptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:size sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nmemb sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fgetpos sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:fpos_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:pos sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fseek sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_long:long sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:offset sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:whence sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fsetpos sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:fpos_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:pos sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:ftell sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:rewind sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:clearerr sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:feof sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:ferror sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:perror sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fprintf_s sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:fscanf_s sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:FILE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:stream sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:printf_s sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:scanf_s sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:sscanf_s sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:format sym level: 1 namespace:1>
                                <,:, sym level: 1 namespace:1>
                                <...:... sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:size_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:memset sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strcmp sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s1 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s2 sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:memcpy sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s1 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s2 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:strcpy sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s1 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s2 sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strlen sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:__errno_location sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_signed:signed sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int8_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_short:short sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint8_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_short:short sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_signed:signed sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_least8_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_short:short sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_least16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_least32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_least64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_least8_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_short:short sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_least16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_least32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_least64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_signed:signed sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_fast8_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_fast16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_fast32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:int_fast64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_fast8_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_fast16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_fast32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uint_fast64_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:intmax_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uintmax_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:uintptr_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:wchar_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:uint_least16_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:char16_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:uint_least32_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:char32_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:ptrdiff_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:101>
                            <&struct_decl ns:101>
                                <&spec_qual_list ns:101>
                                    <&type_spec ns:101>
                                        <KW_int:int sym level: 0 namespace:101>
                                <&struct_declarator_list ns:101>
                                    <&struct_declarator ns:101>
                                        <&declarator ns:101>
                                            <&direct_declarator ns:101>
                                                <identifier:count sym level: 0 namespace:101>
                                <;:; sym level: 0 namespace:101>
                            <&struct_decl ns:101>
                                <&spec_qual_list ns:101>
                                    <&type_spec ns:101>
                                        <&struct_union_spec ns:101>
                                            <&struct_union ns:101>
                                                <KW_union:union sym level: 0 namespace:101>
                                            <left_brace:{ sym level: 0 namespace:101>
                                            <&struct_decl_list ns:102>
                                                <&struct_decl ns:102>
                                                    <&spec_qual_list ns:102>
                                                        <&type_spec ns:102>
                                                            <KW_int:int sym level: 0 namespace:102>
                                                    <&struct_declarator_list ns:102>
                                                        <&struct_declarator ns:102>
                                                            <&declarator ns:102>
                                                                <&direct_declarator ns:102>
                                                                    <identifier:wch sym level: 0 namespace:102>
                                                    <;:; sym level: 0 namespace:102>
                                                <&struct_decl ns:102>
                                                    <&spec_qual_list ns:102>
                                                        <&type_spec ns:102>
                                                            <KW_char:char sym level: 0 namespace:102>
                                                    <&struct_declarator_list ns:102>
                                                        <&struct_declarator ns:102>
                                                            <&declarator ns:102>
                                                                <&direct_declarator ns:102>
                                                                    <identifier:wchb sym level: 0 namespace:102>
                                                                    <[:[ sym level: 0 namespace:102>
                                                                    <&primary_expression ns:102>
                                                                        <integer_constant:4 sym level: 0 namespace:102>
                                                                    <]:] sym level: 0 namespace:102>
                                                    <;:; sym level: 0 namespace:102>
                                            <right_brace:} sym level: 0 namespace:101>
                                <&struct_declarator_list ns:101>
                                    <&struct_declarator ns:101>
                                        <&declarator ns:101>
                                            <&direct_declarator ns:101>
                                                <identifier:value sym level: 0 namespace:101>
                                <;:; sym level: 0 namespace:101>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:mbstate_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:mbrtoc16 sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:char16_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:pc16 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:mbstate_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:p sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:c16rtomb sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:char16_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c16 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:mbstate_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:ps sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:mbrtoc32 sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:char32_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:pc32 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:mbstate_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:p sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:c32rtomb sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:char32_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c32 sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:mbstate_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:ps sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:__ctype_get_mb_cur_max sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:size_t sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:malloc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:size sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:free sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:ptr sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&function_spec ns:1>
                    <KW__Noreturn:_Noreturn sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:exit sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:status sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtol sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:base sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtoll sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:base sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtoul sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:base sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtoull sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:base sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_double:double sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtod sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_float:float sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtof sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_double:double sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:strtold sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:nptr sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                                <&type_qual_list ns:1>
                                                    <&type_qual ns:1>
                                                        <KW_restrict:restrict sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:endptr sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:mbtowc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:wchar_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:pwc sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:str sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:mblen sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:s sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW_inline:inline sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:is_legal_align sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_unsigned:unsigned sym level: 2 namespace:1>
                                    <&type_spec ns:1>
                                        <KW_long:long sym level: 2 namespace:1>
                                    <&type_spec ns:1>
                                        <KW_int:int sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:align_size sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:align_size sym level: 3 namespace:1>
                            <==:== sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <&while_stmt ns:1>
                        <KW_while:while sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&multi_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:align_size sym level: 3 namespace:1>
                                <%:% sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:2 sym level: 3 namespace:1>
                            <==:== sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:align_size sym level: 4 namespace:1>
                                            <=:/= sym level: 4 namespace:1>
                                            <&multi_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:align_size sym level: 4 namespace:1>
                                                </:/= sym level: 4 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:2 sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:align_size sym level: 3 namespace:1>
                            <!=:!= sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:1 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                        <KW_else:else sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:1 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:compiler_error sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0001_ERR_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0002_ERR_UNKNOWN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0003_ERR_LEX_ERROR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0004_ERR_NAMESPACE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0005_ERR_REDEFINE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0006_ERR_NOT_IN_SYMBOL_TABLE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0007_ERR_UNEXPECTED_TOKEN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0008_ERR_TOO_MANY_STOR_SPEC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0009_ERR_THREAD_LOCAL_PREFIX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0010_ERR_NEED_MORE_TYPE_SPEC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0011_ERR_WRONG_TYPE_SPEC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0012_ERR_COMPLEX_NOT_SUPPORT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0013_ERR_ATOMIC_UNSUPPORT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0014_ERR_ATOMIC_TYPE_NAME sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0015_ERR_REDEFINATION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0016_ERR_UNDECLARATION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0017_ERR_TYPEDEF_OVERLAP sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0018_ERR_STRUCT_INCOMPLETE_FUNCTION_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0019_ERR_ILLEGAL_CONST_EXPR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0020_ERR_CONST_EXPR_RANGE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0021_ERR_STATIC_ASSERT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0022_ERR_BIT_FIELD_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0023_ERR_BIT_FIELD_WIDTH_EXCEED sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0024_ERR_BIT_FIELD_WIDTH_INT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0025_ERR_BIT_FIELD_WIDTH_NEGATIVE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0026_ERR_BIT_FIELD_ZERO_WITH_DECLERATOR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0027_ERR_ENUM_NOT_INT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0028_ERR_ENUM_RANGE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0029_ERR_LKA_EXTERN_FOLLOW_NO sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0030_ERR_LKA_NO_FOLLOW_EXTERN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0031_ERR_CONFICT_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0032_ERR_CONFICT_LINKAGE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0033_ERR_CONFICT_THREAD_LOCAL sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0034_ERR_ARR_STAR_SCOPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0035_ERR_ARR_QUAL_STATIC_OUTMOST sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0036_ERR_ARR_QUAL_STATIC_IN_PARA sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0037_ERR_ARR_STATIC_THREAD_WITH_VLA sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0038_ERR_ARR_SIZE_INTEGER sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0039_ERR_ARR_SIZE_ZERO sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0040_ERR_ARR_FUNCTIONS_INCOMPLETE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0041_ERR_VM_ID sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0042_ERR_FUN_IDENTIFIER_LIST sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0043_ERR_FUN_RETURN_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0044_ERR_FUNC_DEF_DECL_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0045_ERR_FUNC_PARA_INCOMPLETE_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0046_ERR_FUNC_VOID_MORE_THAN_ONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0047_ERR_FUNC_PARA_STORAGE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0048_ERR_LVALUE_ARR_TYPE_COMPLETE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0049_ERR_LVALUE_ARR_TYPE_WRONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0050_ERR_LVALUE_FUNC_TYPE_WRONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0051_ERR_LVALUE_REQUIRED sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0052_ERR_EXPR_TYPE_ERROR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0053_ERR_EXPR_STRUCT_UNION_DOT_TYPE_WRONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0054_ERR_EXPR_STRUCT_UNION_POINT_TYPE_WRONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0055_ERR_EXPR_POSTFIX_DOUBLE_P_M_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0056_ERR_EXPR_MODIFIABLE_LVALUE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0057_ERR_OPERAND_BIT_FIELD sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0058_ERR_OPERAND_REGISTER sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0059_ERR_OPERAND_SHOULD_POINTER sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0060_ERR_OPERAND_INTEGER_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0061_ERR_OPERAND_ARTHMATIC_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0062_ERR_OPERAND_SCALAR_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0063_ERR_OPERAND_REAL_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0064_ERR_SIZEOF_INCOMPLETE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0065_ERR_SIZEOF_FUNCTION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0066_ERR_CAST_CONVERT_POINT_FLOAT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0067_ERR_ADD_OPERAND_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0068_ERR_MINUS_OPERAND_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0069_ERR_NEED_COMPATIBLE_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0070_ERR_EQUAL_OPERAND sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0071_ERR_CONDITION_OPERAND sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0072_ERR_ASSIGN_OPERAND sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0073_ERR_FUNC_MORE_PARAMETERS sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0074_ERR_FUNC_PARA_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0075_ERR_FOR_DECLARATION_STOR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0076_ERR_IN_SWITCH sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0077_ERR_SWITCH_SAME_CASE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0078_ERR_IN_LOOP sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0079_ERR_IN_SWITCH_LOOP sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0080_ERR_FUNC_RET_VOID sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0081_ERR_FUNC_RET_NONE_VOID sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0082_ERR_FUNC_NO_ID_LIST_BUT_DEC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0083_ERR_FUNC_PARA_INITILIZATION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0084_ERR_FUNC_STORAGE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0085_ERR_FUNC_PARA_OLD_NOT_FIND sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0086_ERR_FUNC_PARA_OLD_NOT_DEC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0087_ERR_FUNC_PARA_OLD_STOR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0088_ERR_ALIGN_TWO_POWER sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0089_ERR_ALIGN_CANNOT_SPECIFIE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0090_ERR_ALIGN_DIFFERENT_DECLARATION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0091_ERR_INIT_TYPE_COMPLETE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0092_ERR_INIT_ENTITY sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0093_ERR_INIT_DESIGNATOR_CONST_EXPR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:C0094_ERR_INIT_DESIGNATOR_IDENTIFIER sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:W0001_WARN_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:W0002_WARN_UNKNOWN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:W0003_WARN_NO_DECLARATION_ANY_THING sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:W0004_WARN_DUPLICATE_QUAL sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:W0005_WARN_IMPLICIT_DEC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:W0006_WARN_NO_RETURN sym level: 0 namespace:1>
                        <,:, sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:LINE_NUM sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:line sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:125>
                            <&struct_decl ns:125>
                                <&spec_qual_list ns:125>
                                    <&type_spec ns:125>
                                        <&typedef_name ns:125>
                                            <identifier:LINE_NUM sym level: 0 namespace:125>
                                <&struct_declarator_list ns:125>
                                    <&struct_declarator ns:125>
                                        <&declarator ns:125>
                                            <&direct_declarator ns:125>
                                                <identifier:line_number sym level: 0 namespace:125>
                                <;:; sym level: 0 namespace:125>
                            <&struct_decl ns:125>
                                <&spec_qual_list ns:125>
                                    <&type_spec ns:125>
                                        <&typedef_name ns:125>
                                            <identifier:size_t sym level: 0 namespace:125>
                                <&struct_declarator_list ns:125>
                                    <&struct_declarator ns:125>
                                        <&declarator ns:125>
                                            <&direct_declarator ns:125>
                                                <identifier:start sym level: 0 namespace:125>
                                <;:; sym level: 0 namespace:125>
                            <&struct_decl ns:125>
                                <&spec_qual_list ns:125>
                                    <&type_spec ns:125>
                                        <&typedef_name ns:125>
                                            <identifier:size_t sym level: 0 namespace:125>
                                <&struct_declarator_list ns:125>
                                    <&struct_declarator ns:125>
                                        <&declarator ns:125>
                                            <&direct_declarator ns:125>
                                                <identifier:end sym level: 0 namespace:125>
                                <;:; sym level: 0 namespace:125>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:LINE sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:mcc_error_item sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:127>
                            <&struct_decl ns:127>
                                <&spec_qual_list ns:127>
                                    <&type_spec ns:127>
                                        <&enum_spec ns:127>
                                            <KW_enum:enum sym level: 0 namespace:127>
                                            <identifier:compiler_error sym level: 0 namespace:2>
                                <&struct_declarator_list ns:127>
                                    <&struct_declarator ns:127>
                                        <&declarator ns:127>
                                            <&direct_declarator ns:127>
                                                <identifier:ce sym level: 0 namespace:127>
                                <;:; sym level: 0 namespace:127>
                            <&struct_decl ns:127>
                                <&spec_qual_list ns:127>
                                    <&type_spec ns:127>
                                        <KW_char:char sym level: 0 namespace:127>
                                <&struct_declarator_list ns:127>
                                    <&struct_declarator ns:127>
                                        <&declarator ns:127>
                                            <&pointer ns:127>
                                                <*:* sym level: 0 namespace:127>
                                            <&direct_declarator ns:127>
                                                <identifier:filename sym level: 0 namespace:127>
                                <;:; sym level: 0 namespace:127>
                            <&struct_decl ns:127>
                                <&spec_qual_list ns:127>
                                    <&type_spec ns:127>
                                        <&typedef_name ns:127>
                                            <identifier:LINE_NUM sym level: 0 namespace:127>
                                <&struct_declarator_list ns:127>
                                    <&struct_declarator ns:127>
                                        <&declarator ns:127>
                                            <&direct_declarator ns:127>
                                                <identifier:error_line sym level: 0 namespace:127>
                                <;:; sym level: 0 namespace:127>
                            <&struct_decl ns:127>
                                <&spec_qual_list ns:127>
                                    <&type_spec ns:127>
                                        <KW_char:char sym level: 0 namespace:127>
                                <&struct_declarator_list ns:127>
                                    <&struct_declarator ns:127>
                                        <&declarator ns:127>
                                            <&pointer ns:127>
                                                <*:* sym level: 0 namespace:127>
                                            <&direct_declarator ns:127>
                                                <identifier:error_token_value sym level: 0 namespace:127>
                                <;:; sym level: 0 namespace:127>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:ERROR_ITEM sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_error sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:filename sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:function sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:reason sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_error_arg_char sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:arg sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_error_arg_int sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:arg sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_test sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:test sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_test_item sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:test_item_name sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_test_arg_char sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:item_arg sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_test_arg_int sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:item_arg sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:mcc_error sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:ERROR_ITEM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:e sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:file_buf sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:LINE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:line sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW_inline:inline sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&pointer ns:1>
                    <*:* sym level: 1 namespace:1>
                <&direct_declarator ns:1>
                    <identifier:m_error_item sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:ERROR_ITEM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:tei sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&enum_spec ns:1>
                                            <KW_enum:enum sym level: 2 namespace:1>
                                            <identifier:compiler_error sym level: 2 namespace:2>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:ce sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:filename sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:LINE_NUM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:error_line sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:error_token_value sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tei sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:ce sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:ce sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tei sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:filename sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:filename sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tei sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:error_line sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:error_line sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tei sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:error_token_value sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:error_token_value sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&cast_expr ns:1>
                            <(:( sym level: 2 namespace:1>
                            <&type_name ns:1>
                                <&spec_qual_list ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                                <&abstract_declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:tei sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:mem_pool sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:138>
                            <&struct_decl ns:138>
                                <&spec_qual_list ns:138>
                                    <&type_spec ns:138>
                                        <KW_char:char sym level: 0 namespace:138>
                                <&struct_declarator_list ns:138>
                                    <&struct_declarator ns:138>
                                        <&declarator ns:138>
                                            <&direct_declarator ns:138>
                                                <identifier:name sym level: 0 namespace:138>
                                                <[:[ sym level: 0 namespace:138>
                                                <&primary_expression ns:138>
                                                    <integer_constant:8 sym level: 0 namespace:138>
                                                <]:] sym level: 0 namespace:138>
                                <;:; sym level: 0 namespace:138>
                            <&struct_decl ns:138>
                                <&spec_qual_list ns:138>
                                    <&type_spec ns:138>
                                        <KW_unsigned:unsigned sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_int:int sym level: 0 namespace:138>
                                <&struct_declarator_list ns:138>
                                    <&struct_declarator ns:138>
                                        <&declarator ns:138>
                                            <&direct_declarator ns:138>
                                                <identifier:malloc_cnt sym level: 0 namespace:138>
                                <;:; sym level: 0 namespace:138>
                            <&struct_decl ns:138>
                                <&spec_qual_list ns:138>
                                    <&type_spec ns:138>
                                        <KW_unsigned:unsigned sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_int:int sym level: 0 namespace:138>
                                <&struct_declarator_list ns:138>
                                    <&struct_declarator ns:138>
                                        <&declarator ns:138>
                                            <&direct_declarator ns:138>
                                                <identifier:free_cnt sym level: 0 namespace:138>
                                <;:; sym level: 0 namespace:138>
                            <&struct_decl ns:138>
                                <&spec_qual_list ns:138>
                                    <&type_spec ns:138>
                                        <KW_unsigned:unsigned sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_int:int sym level: 0 namespace:138>
                                <&struct_declarator_list ns:138>
                                    <&struct_declarator ns:138>
                                        <&declarator ns:138>
                                            <&direct_declarator ns:138>
                                                <identifier:sys_malloc_cnt sym level: 0 namespace:138>
                                <;:; sym level: 0 namespace:138>
                            <&struct_decl ns:138>
                                <&spec_qual_list ns:138>
                                    <&type_spec ns:138>
                                        <KW_unsigned:unsigned sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_long:long sym level: 0 namespace:138>
                                    <&type_spec ns:138>
                                        <KW_int:int sym level: 0 namespace:138>
                                <&struct_declarator_list ns:138>
                                    <&struct_declarator ns:138>
                                        <&declarator ns:138>
                                            <&direct_declarator ns:138>
                                                <identifier:sys_free_cnt sym level: 0 namespace:138>
                                <;:; sym level: 0 namespace:138>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:MEM_POOL sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:MEM_POOL sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:MEMInit sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:name sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:MEMDel sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:MEM_POOL sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:pool sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:m_alloc sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:n sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:m_free sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:p sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW_inline:inline sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:m_memset sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:p sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:value sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:size_t sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:len sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:memset sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:p sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:value sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:len sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:NMSP sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:NMSP sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:GET_NEW_NAMESPACE sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:RESET_NAMESPACE sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:hash_table sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:148>
                            <&struct_decl ns:148>
                                <&spec_qual_list ns:148>
                                    <&type_spec ns:148>
                                        <KW_void:void sym level: 0 namespace:148>
                                <&struct_declarator_list ns:148>
                                    <&struct_declarator ns:148>
                                        <&declarator ns:148>
                                            <&pointer ns:148>
                                                <*:* sym level: 0 namespace:148>
                                            <&pointer ns:148>
                                                <*:* sym level: 0 namespace:148>
                                            <&direct_declarator ns:148>
                                                <identifier:data sym level: 0 namespace:148>
                                <;:; sym level: 0 namespace:148>
                            <&struct_decl ns:148>
                                <&spec_qual_list ns:148>
                                    <&type_spec ns:148>
                                        <KW_unsigned:unsigned sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_long:long sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_long:long sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_int:int sym level: 0 namespace:148>
                                <&struct_declarator_list ns:148>
                                    <&struct_declarator ns:148>
                                        <&declarator ns:148>
                                            <&direct_declarator ns:148>
                                                <identifier:capicity sym level: 0 namespace:148>
                                <;:; sym level: 0 namespace:148>
                            <&struct_decl ns:148>
                                <&spec_qual_list ns:148>
                                    <&type_spec ns:148>
                                        <KW_unsigned:unsigned sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_long:long sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_long:long sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_int:int sym level: 0 namespace:148>
                                <&struct_declarator_list ns:148>
                                    <&struct_declarator ns:148>
                                        <&declarator ns:148>
                                            <&direct_declarator ns:148>
                                                <identifier:capicity_index sym level: 0 namespace:148>
                                <;:; sym level: 0 namespace:148>
                            <&struct_decl ns:148>
                                <&spec_qual_list ns:148>
                                    <&type_spec ns:148>
                                        <KW_unsigned:unsigned sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_long:long sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_long:long sym level: 0 namespace:148>
                                    <&type_spec ns:148>
                                        <KW_int:int sym level: 0 namespace:148>
                                <&struct_declarator_list ns:148>
                                    <&struct_declarator ns:148>
                                        <&declarator ns:148>
                                            <&direct_declarator ns:148>
                                                <identifier:record_num sym level: 0 namespace:148>
                                <;:; sym level: 0 namespace:148>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:HASH sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:hash_item sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:150>
                            <&struct_decl ns:150>
                                <&spec_qual_list ns:150>
                                    <&type_spec ns:150>
                                        <KW_unsigned:unsigned sym level: 0 namespace:150>
                                    <&type_spec ns:150>
                                        <KW_long:long sym level: 0 namespace:150>
                                    <&type_spec ns:150>
                                        <KW_long:long sym level: 0 namespace:150>
                                    <&type_spec ns:150>
                                        <KW_int:int sym level: 0 namespace:150>
                                <&struct_declarator_list ns:150>
                                    <&struct_declarator ns:150>
                                        <&declarator ns:150>
                                            <&direct_declarator ns:150>
                                                <identifier:key sym level: 0 namespace:150>
                                <;:; sym level: 0 namespace:150>
                            <&struct_decl ns:150>
                                <&spec_qual_list ns:150>
                                    <&type_spec ns:150>
                                        <KW_unsigned:unsigned sym level: 0 namespace:150>
                                    <&type_spec ns:150>
                                        <KW_int:int sym level: 0 namespace:150>
                                <&struct_declarator_list ns:150>
                                    <&struct_declarator ns:150>
                                        <&declarator ns:150>
                                            <&direct_declarator ns:150>
                                                <identifier:count sym level: 0 namespace:150>
                                <;:; sym level: 0 namespace:150>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:HASH_ITEM sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW_inline:inline sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:HASHFunction sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_unsigned:unsigned sym level: 2 namespace:1>
                                    <&type_spec ns:1>
                                        <KW_long:long sym level: 2 namespace:1>
                                    <&type_spec ns:1>
                                        <KW_long:long sym level: 2 namespace:1>
                                    <&type_spec ns:1>
                                        <KW_int:int sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:key sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:HASH sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:h sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&multi_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:key sym level: 2 namespace:1>
                            <%:% sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 2 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:h sym level: 2 namespace:1>
                                    <->:-> sym level: 2 namespace:1>
                                    <identifier:capicity sym level: 2 namespace:0>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:HASH sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:InitHASH sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:HSAHExpand sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:h sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 1 namespace:1>
                                                    <&direct_declarator ns:1>
                                                        <identifier:cmp sym level: 1 namespace:1>
                                                <):) sym level: 1 namespace:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&parameter_type_list ns:1>
                                                    <&parameter_list ns:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:a sym level: 2 namespace:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:b sym level: 2 namespace:1>
                                                <):) sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:HASHInsert sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:h sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH_ITEM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:item sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 1 namespace:1>
                                                    <&direct_declarator ns:1>
                                                        <identifier:cmp sym level: 1 namespace:1>
                                                <):) sym level: 1 namespace:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&parameter_type_list ns:1>
                                                    <&parameter_list ns:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:a sym level: 2 namespace:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:b sym level: 2 namespace:1>
                                                <):) sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:HASH_ITEM sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:HASHFind sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:h sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 1 namespace:1>
                                                    <&direct_declarator ns:1>
                                                        <identifier:cmp sym level: 1 namespace:1>
                                                <):) sym level: 1 namespace:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&parameter_type_list ns:1>
                                                    <&parameter_list ns:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:a sym level: 2 namespace:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:b sym level: 2 namespace:1>
                                                <):) sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:delete_item sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:insert_item sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:HASHCOPY sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:dst sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:src sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 1 namespace:1>
                                                    <&direct_declarator ns:1>
                                                        <identifier:cmp sym level: 1 namespace:1>
                                                <):) sym level: 1 namespace:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&parameter_type_list ns:1>
                                                    <&parameter_list ns:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:a sym level: 2 namespace:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:b sym level: 2 namespace:1>
                                                <):) sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:HASHDELITEM sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:h sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH_ITEM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:del_item sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 1 namespace:1>
                                                    <&direct_declarator ns:1>
                                                        <identifier:cmp sym level: 1 namespace:1>
                                                <):) sym level: 1 namespace:1>
                                                <(:( sym level: 1 namespace:1>
                                                <&parameter_type_list ns:1>
                                                    <&parameter_list ns:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:a sym level: 2 namespace:1>
                                                        <&parameter_declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_void:void sym level: 2 namespace:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 2 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:b sym level: 2 namespace:1>
                                                <):) sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:DelHASH sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:h sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TestHASH sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:vector sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:161>
                            <&struct_decl ns:161>
                                <&spec_qual_list ns:161>
                                    <&type_spec ns:161>
                                        <KW_void:void sym level: 0 namespace:161>
                                <&struct_declarator_list ns:161>
                                    <&struct_declarator ns:161>
                                        <&declarator ns:161>
                                            <&pointer ns:161>
                                                <*:* sym level: 0 namespace:161>
                                            <&pointer ns:161>
                                                <*:* sym level: 0 namespace:161>
                                            <&direct_declarator ns:161>
                                                <identifier:data sym level: 0 namespace:161>
                                <;:; sym level: 0 namespace:161>
                            <&struct_decl ns:161>
                                <&spec_qual_list ns:161>
                                    <&type_spec ns:161>
                                        <&typedef_name ns:161>
                                            <identifier:size_t sym level: 0 namespace:161>
                                <&struct_declarator_list ns:161>
                                    <&struct_declarator ns:161>
                                        <&declarator ns:161>
                                            <&direct_declarator ns:161>
                                                <identifier:capicity sym level: 0 namespace:161>
                                <;:; sym level: 0 namespace:161>
                            <&struct_decl ns:161>
                                <&spec_qual_list ns:161>
                                    <&type_spec ns:161>
                                        <&typedef_name ns:161>
                                            <identifier:size_t sym level: 0 namespace:161>
                                <&struct_declarator_list ns:161>
                                    <&struct_declarator ns:161>
                                        <&declarator ns:161>
                                            <&direct_declarator ns:161>
                                                <identifier:len sym level: 0 namespace:161>
                                <;:; sym level: 0 namespace:161>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VEC sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:InitVEC sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:len sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VECinsert sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:v sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:p sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VECremove sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:v sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:low sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:high sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VECpopback sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:v sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VECexpand sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:v sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VECshrink sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:v sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VECcpy sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:src sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:dst sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW_inline:inline sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:VECappend sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:VEC sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:src sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:VEC sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:dst sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_or_expr ns:1>
                            <&unary_expr ns:1>
                                <!:! sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:src sym level: 3 namespace:1>
                            <||:|| sym level: 3 namespace:1>
                            <&unary_expr ns:1>
                                <!:! sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:dst sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <&for_stmt ns:1>
                        <KW_for:for sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <declaration ns:1>
                            <&declaration_spec ns:1>
                                <&type_spec ns:1>
                                    <&typedef_name ns:1>
                                        <identifier:size_t sym level: 3 namespace:1>
                            <&init_decl_list ns:1>
                                <&init_decl ns:1>
                                    <&declarator ns:1>
                                        <&direct_declarator ns:1>
                                            <identifier:i sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 3 namespace:1>
                            <;:; sym level: 3 namespace:1>
                        <&relational_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                            <<:< sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 3 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:src sym level: 3 namespace:1>
                                    <->:-> sym level: 3 namespace:1>
                                    <identifier:len sym level: 3 namespace:0>
                                <):) sym level: 3 namespace:1>
                        <;:; sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <++:++ sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:VECinsert sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <identifier:dst sym level: 4 namespace:1>
                                            <,:, sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <(:( sym level: 4 namespace:1>
                                                <&conditional_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 4 namespace:1>
                                                        <&logical_and_expr ns:1>
                                                            <&equality_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:src sym level: 4 namespace:1>
                                                                <!=:!= sym level: 4 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <integer_constant:0 sym level: 4 namespace:1>
                                                            <double_ampersand:&& sym level: 4 namespace:1>
                                                            <&relational_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:i sym level: 4 namespace:1>
                                                                <<:< sym level: 4 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <(:( sym level: 4 namespace:1>
                                                                    <&postfix_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:src sym level: 4 namespace:1>
                                                                        <->:-> sym level: 4 namespace:1>
                                                                        <identifier:len sym level: 4 namespace:0>
                                                                    <):) sym level: 4 namespace:1>
                                                        <):) sym level: 4 namespace:1>
                                                    <?:? sym level: 4 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 4 namespace:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:src sym level: 4 namespace:1>
                                                            <->:-> sym level: 4 namespace:1>
                                                            <identifier:data sym level: 4 namespace:0>
                                                            <[:[ sym level: 4 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:i sym level: 4 namespace:1>
                                                            <]:] sym level: 4 namespace:1>
                                                        <):) sym level: 4 namespace:1>
                                                    <colon:: sym level: 4 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <integer_constant:0 sym level: 4 namespace:1>
                                                <):) sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:DelVEC sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:v sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:TP_STORAGE_SPEC sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_STOR_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_TYPE_DEF sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_EXTERN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_STATIC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_EXTERN_THREAD_LOCAL sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_AUTO sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_REGISTER sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_STATIC_THREAD_LOCAL sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:TP_CATEGORY sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SPEC_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_VOID sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SCHAR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USCHAR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SSHORT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USHORT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SINT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USINT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SLONGLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USLONGLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_FLOAT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_DOUBLE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_LONG_DOUBLE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_BOOL sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_FLOAT_COMPLEX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_DOUBLE_COMPLEX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_LONG_DOUBLE_COMPLEX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_POINT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_UNION_STRUCT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_UNION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_STRUCT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_ARRAY sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_ENUM sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_FUNCTION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_TYPE_DEF_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SPEC_ATOMIC sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_NULL_POINTER_CONSTANT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_LABEL sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:174>
                            <&struct_decl ns:174>
                                <&spec_qual_list ns:174>
                                    <&type_spec ns:174>
                                        <KW_unsigned:unsigned sym level: 0 namespace:174>
                                    <&type_spec ns:174>
                                        <KW_long:long sym level: 0 namespace:174>
                                    <&type_spec ns:174>
                                        <KW_long:long sym level: 0 namespace:174>
                                    <&type_spec ns:174>
                                        <KW_int:int sym level: 0 namespace:174>
                                <&struct_declarator_list ns:174>
                                    <&struct_declarator ns:174>
                                        <&declarator ns:174>
                                            <&direct_declarator ns:174>
                                                <identifier:key sym level: 0 namespace:174>
                                <;:; sym level: 0 namespace:174>
                            <&struct_decl ns:174>
                                <&spec_qual_list ns:174>
                                    <&type_spec ns:174>
                                        <KW_unsigned:unsigned sym level: 0 namespace:174>
                                    <&type_spec ns:174>
                                        <KW_int:int sym level: 0 namespace:174>
                                <&struct_declarator_list ns:174>
                                    <&struct_declarator ns:174>
                                        <&declarator ns:174>
                                            <&direct_declarator ns:174>
                                                <identifier:count sym level: 0 namespace:174>
                                <;:; sym level: 0 namespace:174>
                            <&struct_decl ns:174>
                                <&spec_qual_list ns:174>
                                    <&type_spec ns:174>
                                        <KW__Bool:_Bool sym level: 0 namespace:174>
                                <&struct_declarator_list ns:174>
                                    <&struct_declarator ns:174>
                                        <&declarator ns:174>
                                            <&direct_declarator ns:174>
                                                <identifier:complete sym level: 0 namespace:174>
                                <;:; sym level: 0 namespace:174>
                            <&struct_decl ns:174>
                                <&spec_qual_list ns:174>
                                    <&type_spec ns:174>
                                        <KW__Bool:_Bool sym level: 0 namespace:174>
                                <&struct_declarator_list ns:174>
                                    <&struct_declarator ns:174>
                                        <&declarator ns:174>
                                            <&direct_declarator ns:174>
                                                <identifier:modifier sym level: 0 namespace:174>
                                <;:; sym level: 0 namespace:174>
                            <&struct_decl ns:174>
                                <&spec_qual_list ns:174>
                                    <&type_spec ns:174>
                                        <&struct_union_spec ns:174>
                                            <&struct_union ns:174>
                                                <KW_union:union sym level: 0 namespace:174>
                                            <left_brace:{ sym level: 0 namespace:174>
                                            <&struct_decl_list ns:175>
                                                <&struct_decl ns:175>
                                                    <&spec_qual_list ns:175>
                                                        <&type_spec ns:175>
                                                            <&struct_union_spec ns:175>
                                                                <&struct_union ns:175>
                                                                    <KW_struct:struct sym level: 0 namespace:175>
                                                                <left_brace:{ sym level: 0 namespace:175>
                                                                <&struct_decl_list ns:176>
                                                                    <&struct_decl ns:176>
                                                                        <&spec_qual_list ns:176>
                                                                            <&type_spec ns:176>
                                                                                <&enum_spec ns:176>
                                                                                    <KW_enum:enum sym level: 0 namespace:176>
                                                                                    <identifier:TP_STORAGE_SPEC sym level: 0 namespace:2>
                                                                        <&struct_declarator_list ns:176>
                                                                            <&struct_declarator ns:176>
                                                                                <&declarator ns:176>
                                                                                    <&direct_declarator ns:176>
                                                                                        <identifier:typ_stor sym level: 0 namespace:176>
                                                                        <;:; sym level: 0 namespace:176>
                                                                    <&struct_decl ns:176>
                                                                        <&spec_qual_list ns:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_unsigned:unsigned sym level: 0 namespace:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_char:char sym level: 0 namespace:176>
                                                                        <&struct_declarator_list ns:176>
                                                                            <&struct_declarator ns:176>
                                                                                <&declarator ns:176>
                                                                                    <&direct_declarator ns:176>
                                                                                        <identifier:type_qual sym level: 0 namespace:176>
                                                                        <;:; sym level: 0 namespace:176>
                                                                    <&struct_decl ns:176>
                                                                        <&spec_qual_list ns:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_unsigned:unsigned sym level: 0 namespace:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_char:char sym level: 0 namespace:176>
                                                                        <&struct_declarator_list ns:176>
                                                                            <&struct_declarator ns:176>
                                                                                <&declarator ns:176>
                                                                                    <&direct_declarator ns:176>
                                                                                        <identifier:func_spec sym level: 0 namespace:176>
                                                                        <;:; sym level: 0 namespace:176>
                                                                    <&struct_decl ns:176>
                                                                        <&spec_qual_list ns:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_unsigned:unsigned sym level: 0 namespace:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_long:long sym level: 0 namespace:176>
                                                                            <&type_spec ns:176>
                                                                                <KW_int:int sym level: 0 namespace:176>
                                                                        <&struct_declarator_list ns:176>
                                                                            <&struct_declarator ns:176>
                                                                                <&declarator ns:176>
                                                                                    <&direct_declarator ns:176>
                                                                                        <identifier:align_spec sym level: 0 namespace:176>
                                                                        <;:; sym level: 0 namespace:176>
                                                                <right_brace:} sym level: 0 namespace:175>
                                                    <;:; sym level: 0 namespace:175>
                                                <&struct_decl ns:175>
                                                    <&spec_qual_list ns:175>
                                                        <&type_spec ns:175>
                                                            <&struct_union_spec ns:175>
                                                                <&struct_union ns:175>
                                                                    <KW_struct:struct sym level: 0 namespace:175>
                                                                <left_brace:{ sym level: 0 namespace:175>
                                                                <&struct_decl_list ns:177>
                                                                    <&struct_decl ns:177>
                                                                        <&spec_qual_list ns:177>
                                                                            <&type_spec ns:177>
                                                                                <&enum_spec ns:177>
                                                                                    <KW_enum:enum sym level: 0 namespace:177>
                                                                                    <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                                                        <&struct_declarator_list ns:177>
                                                                            <&struct_declarator ns:177>
                                                                                <&declarator ns:177>
                                                                                    <&direct_declarator ns:177>
                                                                                        <identifier:typ_category sym level: 0 namespace:177>
                                                                        <;:; sym level: 0 namespace:177>
                                                                    <&struct_decl ns:177>
                                                                        <&spec_qual_list ns:177>
                                                                            <&type_spec ns:177>
                                                                                <KW_unsigned:unsigned sym level: 0 namespace:177>
                                                                            <&type_spec ns:177>
                                                                                <KW_int:int sym level: 0 namespace:177>
                                                                        <&struct_declarator_list ns:177>
                                                                            <&struct_declarator ns:177>
                                                                                <&declarator ns:177>
                                                                                    <&direct_declarator ns:177>
                                                                                        <identifier:data_size sym level: 0 namespace:177>
                                                                        <;:; sym level: 0 namespace:177>
                                                                <right_brace:} sym level: 0 namespace:175>
                                                    <;:; sym level: 0 namespace:175>
                                            <right_brace:} sym level: 0 namespace:174>
                                <;:; sym level: 0 namespace:174>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:M_TYPE sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW_unsigned:unsigned sym level: 0 namespace:179>
                                    <&type_spec ns:179>
                                        <KW_long:long sym level: 0 namespace:179>
                                    <&type_spec ns:179>
                                        <KW_long:long sym level: 0 namespace:179>
                                    <&type_spec ns:179>
                                        <KW_int:int sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:key sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW_unsigned:unsigned sym level: 0 namespace:179>
                                    <&type_spec ns:179>
                                        <KW_int:int sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:count sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW__Bool:_Bool sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:complete sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW__Bool:_Bool sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:modifier sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <&enum_spec ns:179>
                                            <KW_enum:enum sym level: 0 namespace:179>
                                            <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:typ_category sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW_unsigned:unsigned sym level: 0 namespace:179>
                                    <&type_spec ns:179>
                                        <KW_int:int sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:data_size sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW_char:char sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&pointer ns:179>
                                                <*:* sym level: 0 namespace:179>
                                            <&direct_declarator ns:179>
                                                <identifier:tag sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <&typedef_name ns:179>
                                            <identifier:VEC sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&pointer ns:179>
                                                <*:* sym level: 0 namespace:179>
                                            <&direct_declarator ns:179>
                                                <identifier:members sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <&typedef_name ns:179>
                                            <identifier:size_t sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:data_align sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <&typedef_name ns:179>
                                            <identifier:size_t sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:total_data_size sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <&typedef_name ns:179>
                                            <identifier:NMSP sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:namespece sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW__Bool:_Bool sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:can_be_modified_lvalue sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                            <&struct_decl ns:179>
                                <&spec_qual_list ns:179>
                                    <&type_spec ns:179>
                                        <KW__Bool:_Bool sym level: 0 namespace:179>
                                <&struct_declarator_list ns:179>
                                    <&struct_declarator ns:179>
                                        <&declarator ns:179>
                                            <&direct_declarator ns:179>
                                                <identifier:have_flex_array sym level: 0 namespace:179>
                                <;:; sym level: 0 namespace:179>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_SU sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <KW_char:char sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&pointer ns:181>
                                                <*:* sym level: 0 namespace:181>
                                            <&direct_declarator ns:181>
                                                <identifier:member_name sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <&typedef_name ns:181>
                                            <identifier:NMSP sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&direct_declarator ns:181>
                                                <identifier:name_space sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <&typedef_name ns:181>
                                            <identifier:size_t sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&direct_declarator ns:181>
                                                <identifier:offset sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <&typedef_name ns:181>
                                            <identifier:VEC sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&pointer ns:181>
                                                <*:* sym level: 0 namespace:181>
                                            <&direct_declarator ns:181>
                                                <identifier:type_vec sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <KW__Bool:_Bool sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&direct_declarator ns:181>
                                                <identifier:bit_field sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <&typedef_name ns:181>
                                            <identifier:size_t sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&direct_declarator ns:181>
                                                <identifier:bit_field_size sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                            <&struct_decl ns:181>
                                <&spec_qual_list ns:181>
                                    <&type_spec ns:181>
                                        <&typedef_name ns:181>
                                            <identifier:size_t sym level: 0 namespace:181>
                                <&struct_declarator_list ns:181>
                                    <&struct_declarator ns:181>
                                        <&declarator ns:181>
                                            <&direct_declarator ns:181>
                                                <identifier:bit_field_offset sym level: 0 namespace:181>
                                <;:; sym level: 0 namespace:181>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_SU_MEMBER sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW_unsigned:unsigned sym level: 0 namespace:183>
                                    <&type_spec ns:183>
                                        <KW_long:long sym level: 0 namespace:183>
                                    <&type_spec ns:183>
                                        <KW_long:long sym level: 0 namespace:183>
                                    <&type_spec ns:183>
                                        <KW_int:int sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:key sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW_unsigned:unsigned sym level: 0 namespace:183>
                                    <&type_spec ns:183>
                                        <KW_int:int sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:count sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW__Bool:_Bool sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:complete sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW__Bool:_Bool sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:modifier sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <&enum_spec ns:183>
                                            <KW_enum:enum sym level: 0 namespace:183>
                                            <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:typ_category sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW_unsigned:unsigned sym level: 0 namespace:183>
                                    <&type_spec ns:183>
                                        <KW_int:int sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:data_size sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW__Bool:_Bool sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:is_vla sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW__Bool:_Bool sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&direct_declarator ns:183>
                                                <identifier:is_star sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <&struct_union_spec ns:183>
                                            <&struct_union ns:183>
                                                <KW_union:union sym level: 0 namespace:183>
                                            <left_brace:{ sym level: 0 namespace:183>
                                            <&struct_decl_list ns:184>
                                                <&struct_decl ns:184>
                                                    <&spec_qual_list ns:184>
                                                        <&type_spec ns:184>
                                                            <&typedef_name ns:184>
                                                                <identifier:size_t sym level: 0 namespace:184>
                                                    <&struct_declarator_list ns:184>
                                                        <&struct_declarator ns:184>
                                                            <&declarator ns:184>
                                                                <&direct_declarator ns:184>
                                                                    <identifier:axis_size sym level: 0 namespace:184>
                                                    <;:; sym level: 0 namespace:184>
                                                <&struct_decl ns:184>
                                                    <&spec_qual_list ns:184>
                                                        <&type_spec ns:184>
                                                            <KW_void:void sym level: 0 namespace:184>
                                                    <&struct_declarator_list ns:184>
                                                        <&struct_declarator ns:184>
                                                            <&declarator ns:184>
                                                                <&pointer ns:184>
                                                                    <*:* sym level: 0 namespace:184>
                                                                <&direct_declarator ns:184>
                                                                    <identifier:assign_expr_node sym level: 0 namespace:184>
                                                    <;:; sym level: 0 namespace:184>
                                            <right_brace:} sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                            <&struct_decl ns:183>
                                <&spec_qual_list ns:183>
                                    <&type_spec ns:183>
                                        <KW_void:void sym level: 0 namespace:183>
                                <&struct_declarator_list ns:183>
                                    <&struct_declarator ns:183>
                                        <&declarator ns:183>
                                            <&pointer ns:183>
                                                <*:* sym level: 0 namespace:183>
                                            <&direct_declarator ns:183>
                                                <identifier:axis_modify sym level: 0 namespace:183>
                                <;:; sym level: 0 namespace:183>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_ARR sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <KW_unsigned:unsigned sym level: 0 namespace:186>
                                    <&type_spec ns:186>
                                        <KW_long:long sym level: 0 namespace:186>
                                    <&type_spec ns:186>
                                        <KW_long:long sym level: 0 namespace:186>
                                    <&type_spec ns:186>
                                        <KW_int:int sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&direct_declarator ns:186>
                                                <identifier:key sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <KW_unsigned:unsigned sym level: 0 namespace:186>
                                    <&type_spec ns:186>
                                        <KW_int:int sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&direct_declarator ns:186>
                                                <identifier:count sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <KW__Bool:_Bool sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&direct_declarator ns:186>
                                                <identifier:complete sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <KW__Bool:_Bool sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&direct_declarator ns:186>
                                                <identifier:modifier sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <&enum_spec ns:186>
                                            <KW_enum:enum sym level: 0 namespace:186>
                                            <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&direct_declarator ns:186>
                                                <identifier:typ_category sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <KW_unsigned:unsigned sym level: 0 namespace:186>
                                    <&type_spec ns:186>
                                        <KW_int:int sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&direct_declarator ns:186>
                                                <identifier:data_size sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <KW_char:char sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&pointer ns:186>
                                                <*:* sym level: 0 namespace:186>
                                            <&direct_declarator ns:186>
                                                <identifier:tag sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                            <&struct_decl ns:186>
                                <&spec_qual_list ns:186>
                                    <&type_spec ns:186>
                                        <&typedef_name ns:186>
                                            <identifier:VEC sym level: 0 namespace:186>
                                <&struct_declarator_list ns:186>
                                    <&struct_declarator ns:186>
                                        <&declarator ns:186>
                                            <&pointer ns:186>
                                                <*:* sym level: 0 namespace:186>
                                            <&direct_declarator ns:186>
                                                <identifier:members sym level: 0 namespace:186>
                                <;:; sym level: 0 namespace:186>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_ENUMERA sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW_unsigned:unsigned sym level: 0 namespace:188>
                                    <&type_spec ns:188>
                                        <KW_long:long sym level: 0 namespace:188>
                                    <&type_spec ns:188>
                                        <KW_long:long sym level: 0 namespace:188>
                                    <&type_spec ns:188>
                                        <KW_int:int sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:key sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW_unsigned:unsigned sym level: 0 namespace:188>
                                    <&type_spec ns:188>
                                        <KW_int:int sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:count sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW__Bool:_Bool sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:complete sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW__Bool:_Bool sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:modifier sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <&enum_spec ns:188>
                                            <KW_enum:enum sym level: 0 namespace:188>
                                            <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:typ_category sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW_unsigned:unsigned sym level: 0 namespace:188>
                                    <&type_spec ns:188>
                                        <KW_int:int sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:data_size sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW_char:char sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&pointer ns:188>
                                                <*:* sym level: 0 namespace:188>
                                            <&direct_declarator ns:188>
                                                <identifier:func_name sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <&typedef_name ns:188>
                                            <identifier:VEC sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&pointer ns:188>
                                                <*:* sym level: 0 namespace:188>
                                            <&direct_declarator ns:188>
                                                <identifier:func_parameters sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW__Bool:_Bool sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:have_ellipsis sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                            <&struct_decl ns:188>
                                <&spec_qual_list ns:188>
                                    <&type_spec ns:188>
                                        <KW__Bool:_Bool sym level: 0 namespace:188>
                                <&struct_declarator_list ns:188>
                                    <&struct_declarator ns:188>
                                        <&declarator ns:188>
                                            <&direct_declarator ns:188>
                                                <identifier:is_old_style sym level: 0 namespace:188>
                                <;:; sym level: 0 namespace:188>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_FUNC sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:190>
                            <&struct_decl ns:190>
                                <&spec_qual_list ns:190>
                                    <&type_spec ns:190>
                                        <KW_char:char sym level: 0 namespace:190>
                                <&struct_declarator_list ns:190>
                                    <&struct_declarator ns:190>
                                        <&declarator ns:190>
                                            <&pointer ns:190>
                                                <*:* sym level: 0 namespace:190>
                                            <&direct_declarator ns:190>
                                                <identifier:para_name sym level: 0 namespace:190>
                                <;:; sym level: 0 namespace:190>
                            <&struct_decl ns:190>
                                <&spec_qual_list ns:190>
                                    <&type_spec ns:190>
                                        <&typedef_name ns:190>
                                            <identifier:VEC sym level: 0 namespace:190>
                                <&struct_declarator_list ns:190>
                                    <&struct_declarator ns:190>
                                        <&declarator ns:190>
                                            <&pointer ns:190>
                                                <*:* sym level: 0 namespace:190>
                                            <&direct_declarator ns:190>
                                                <identifier:type_vec sym level: 0 namespace:190>
                                <;:; sym level: 0 namespace:190>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_FUNC_PARA sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <KW_unsigned:unsigned sym level: 0 namespace:192>
                                    <&type_spec ns:192>
                                        <KW_long:long sym level: 0 namespace:192>
                                    <&type_spec ns:192>
                                        <KW_long:long sym level: 0 namespace:192>
                                    <&type_spec ns:192>
                                        <KW_int:int sym level: 0 namespace:192>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&direct_declarator ns:192>
                                                <identifier:key sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <KW_unsigned:unsigned sym level: 0 namespace:192>
                                    <&type_spec ns:192>
                                        <KW_int:int sym level: 0 namespace:192>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&direct_declarator ns:192>
                                                <identifier:count sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <KW__Bool:_Bool sym level: 0 namespace:192>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&direct_declarator ns:192>
                                                <identifier:complete sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <KW__Bool:_Bool sym level: 0 namespace:192>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&direct_declarator ns:192>
                                                <identifier:modifier sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <&enum_spec ns:192>
                                            <KW_enum:enum sym level: 0 namespace:192>
                                            <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&direct_declarator ns:192>
                                                <identifier:typ_category sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <KW_unsigned:unsigned sym level: 0 namespace:192>
                                    <&type_spec ns:192>
                                        <KW_int:int sym level: 0 namespace:192>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&direct_declarator ns:192>
                                                <identifier:data_size sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                            <&struct_decl ns:192>
                                <&spec_qual_list ns:192>
                                    <&type_spec ns:192>
                                        <&typedef_name ns:192>
                                            <identifier:VEC sym level: 0 namespace:192>
                                <&struct_declarator_list ns:192>
                                    <&struct_declarator ns:192>
                                        <&declarator ns:192>
                                            <&pointer ns:192>
                                                <*:* sym level: 0 namespace:192>
                                            <&direct_declarator ns:192>
                                                <identifier:typedef_name_type sym level: 0 namespace:192>
                                <;:; sym level: 0 namespace:192>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TP_DEF_TYPE sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW__Bool:_Bool sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:databool sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_signed:signed sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_char:char sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:schar sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_unsigned:unsigned sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_char:char sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:uschar sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_signed:signed sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_short:short sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:sshort sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_unsigned:unsigned sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_short:short sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:usshort sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_signed:signed sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_int:int sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:sint sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_unsigned:unsigned sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_int:int sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:usint sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_signed:signed sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_int:int sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:slong sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_unsigned:unsigned sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_int:int sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:uslong sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_signed:signed sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_int:int sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:sllong sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_unsigned:unsigned sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_int:int sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:usllong sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_float:float sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:datafloat sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_double:double sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:datadouble sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_double:double sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:datalongdouble sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_float:float sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:floatcomplex sym level: 0 namespace:194>
                                                <[:[ sym level: 0 namespace:194>
                                                <&primary_expression ns:194>
                                                    <integer_constant:2 sym level: 0 namespace:194>
                                                <]:] sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_double:double sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:doublecomplex sym level: 0 namespace:194>
                                                <[:[ sym level: 0 namespace:194>
                                                <&primary_expression ns:194>
                                                    <integer_constant:2 sym level: 0 namespace:194>
                                                <]:] sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_long:long sym level: 0 namespace:194>
                                    <&type_spec ns:194>
                                        <KW_double:double sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&direct_declarator ns:194>
                                                <identifier:longdoublecomplex sym level: 0 namespace:194>
                                                <[:[ sym level: 0 namespace:194>
                                                <&primary_expression ns:194>
                                                    <integer_constant:2 sym level: 0 namespace:194>
                                                <]:] sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                            <&struct_decl ns:194>
                                <&spec_qual_list ns:194>
                                    <&type_spec ns:194>
                                        <KW_void:void sym level: 0 namespace:194>
                                <&struct_declarator_list ns:194>
                                    <&struct_declarator ns:194>
                                        <&declarator ns:194>
                                            <&pointer ns:194>
                                                <*:* sym level: 0 namespace:194>
                                            <&direct_declarator ns:194>
                                                <identifier:pointer sym level: 0 namespace:194>
                                <;:; sym level: 0 namespace:194>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:VALUE_DATA sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:VALUE sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:196>
                            <&struct_decl ns:196>
                                <&spec_qual_list ns:196>
                                    <&type_spec ns:196>
                                        <&enum_spec ns:196>
                                            <KW_enum:enum sym level: 0 namespace:196>
                                            <identifier:TP_CATEGORY sym level: 0 namespace:2>
                                <&struct_declarator_list ns:196>
                                    <&struct_declarator ns:196>
                                        <&declarator ns:196>
                                            <&direct_declarator ns:196>
                                                <identifier:const_expr_type sym level: 0 namespace:196>
                                <;:; sym level: 0 namespace:196>
                            <&struct_decl ns:196>
                                <&spec_qual_list ns:196>
                                    <&type_spec ns:196>
                                        <&typedef_name ns:196>
                                            <identifier:VALUE_DATA sym level: 0 namespace:196>
                                <&struct_declarator_list ns:196>
                                    <&struct_declarator ns:196>
                                        <&declarator ns:196>
                                            <&pointer ns:196>
                                                <*:* sym level: 0 namespace:196>
                                            <&direct_declarator ns:196>
                                                <identifier:const_value sym level: 0 namespace:196>
                                <;:; sym level: 0 namespace:196>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:CONST_VALUE sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:build_modify_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&enum_spec ns:1>
                                                    <KW_enum:enum sym level: 1 namespace:1>
                                                    <identifier:TP_STORAGE_SPEC sym level: 1 namespace:2>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:storage_spec_type sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_qual_cnt sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:4 sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:func_spec_cnt sym level: 1 namespace:1>
                                                <[:[ sym level: 1 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:2 sym level: 1 namespace:1>
                                                <]:] sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_unsigned:unsigned sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_long:long sym level: 1 namespace:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:align_spec_cnt sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:build_base_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&enum_spec ns:1>
                                                    <KW_enum:enum sym level: 1 namespace:1>
                                                    <identifier:TP_CATEGORY sym level: 1 namespace:2>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:spec_type sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:StrToKey sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:str sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:TypeToKey sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:t sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:print_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:tmpt sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_cmp sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:b sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_item_cmp sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:b sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_VM sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_VLA sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_modify_lvalue sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:is_lvalue sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_size sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_align sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_qual sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_composite_qual sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:qual_a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:qual_b sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_spec_other sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_actual_base_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_change_actual_base_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:tmp_type sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_Atomic sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_Atomic_TO sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:is_atomic sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_Pointer_TO sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:is_pointer sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_Array_TO sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:is_array sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_func_return_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:is_function sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_unqualifier sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:is_qual sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:lvalue_convertion sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:tmp_type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:compatible_types sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec_a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec_b sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:composite_types sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec_a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec_b sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW__Bool:_Bool sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:compatible_type sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:M_TYPE sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:usual_arith_conversion sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:operand_a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:operand_b sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:integer_promotion sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:integer_operand sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:float_promotion sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:M_TYPE sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:float_operand sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:size_t sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_element_size sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:current_obj_type sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_sub_obj_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:current_obj_type sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:sub_obj_size sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Type_VEC_get_sub_obj_off_element_type sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:sub_obj_type sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:size_t sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:sub_obj_off sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:print_type_vec sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:VEC sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type_vec sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:scope_type sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SPT_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SPT_BLOCK sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SPT_FUN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SPT_FILE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SPT_FUN_PROTOTYPE sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:linkage_type sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:LKA_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:LKA_INTERN sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:LKA_EXTERN sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:function_spec_type sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:FSPEC_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:FSPEC_INLINE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:FSPEC_NORETURN sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:sym_table_attr_type sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SA_ATTR_NONE sym level: 0 namespace:1>
                                <=:= sym level: 0 namespace:1>
                                <&constant_expr ns:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0 sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SA_SWITCH sym level: 0 namespace:1>
                                <=:= sym level: 0 namespace:1>
                                <&constant_expr ns:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0x01 sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SA_LOOP sym level: 0 namespace:1>
                                <=:= sym level: 0 namespace:1>
                                <&constant_expr ns:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0x02 sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:SA_FUNC sym level: 0 namespace:1>
                                <=:= sym level: 0 namespace:1>
                                <&constant_expr ns:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0x04 sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:sym_table sym level: 0 namespace:2>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:SYM sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:sym_table sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <KW_unsigned:unsigned sym level: 0 namespace:236>
                                    <&type_spec ns:236>
                                        <KW_int:int sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&direct_declarator ns:236>
                                                <identifier:level sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&typedef_name ns:236>
                                            <identifier:SYM sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&pointer ns:236>
                                                <*:* sym level: 0 namespace:236>
                                            <&direct_declarator ns:236>
                                                <identifier:father sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&typedef_name ns:236>
                                            <identifier:VEC sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&pointer ns:236>
                                                <*:* sym level: 0 namespace:236>
                                            <&direct_declarator ns:236>
                                                <identifier:child_table sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&typedef_name ns:236>
                                            <identifier:HASH sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&pointer ns:236>
                                                <*:* sym level: 0 namespace:236>
                                            <&direct_declarator ns:236>
                                                <identifier:sym_hash_table sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&enum_spec ns:236>
                                            <KW_enum:enum sym level: 0 namespace:236>
                                            <identifier:scope_type sym level: 0 namespace:2>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&direct_declarator ns:236>
                                                <identifier:sp_type sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&typedef_name ns:236>
                                            <identifier:NMSP sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&direct_declarator ns:236>
                                                <identifier:name_space sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&typedef_name ns:236>
                                            <identifier:HASH sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&pointer ns:236>
                                                <*:* sym level: 0 namespace:236>
                                            <&direct_declarator ns:236>
                                                <identifier:typedef_name_table sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&typedef_name ns:236>
                                            <identifier:HASH sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&pointer ns:236>
                                                <*:* sym level: 0 namespace:236>
                                            <&direct_declarator ns:236>
                                                <identifier:enum_const_table sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <&enum_spec ns:236>
                                            <KW_enum:enum sym level: 0 namespace:236>
                                            <identifier:sym_table_attr_type sym level: 0 namespace:2>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&direct_declarator ns:236>
                                                <identifier:st_attr_type sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                            <&struct_decl ns:236>
                                <&spec_qual_list ns:236>
                                    <&type_spec ns:236>
                                        <KW_void:void sym level: 0 namespace:236>
                                <&struct_declarator_list ns:236>
                                    <&struct_declarator ns:236>
                                        <&declarator ns:236>
                                            <&pointer ns:236>
                                                <*:* sym level: 0 namespace:236>
                                            <&direct_declarator ns:236>
                                                <identifier:st_attr sym level: 0 namespace:236>
                                <;:; sym level: 0 namespace:236>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:sym_item sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW_unsigned:unsigned sym level: 0 namespace:238>
                                    <&type_spec ns:238>
                                        <KW_long:long sym level: 0 namespace:238>
                                    <&type_spec ns:238>
                                        <KW_long:long sym level: 0 namespace:238>
                                    <&type_spec ns:238>
                                        <KW_int:int sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:key sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW_unsigned:unsigned sym level: 0 namespace:238>
                                    <&type_spec ns:238>
                                        <KW_int:int sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:count sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <&typedef_name ns:238>
                                            <identifier:VEC sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&pointer ns:238>
                                                <*:* sym level: 0 namespace:238>
                                            <&direct_declarator ns:238>
                                                <identifier:type_vec sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <&typedef_name ns:238>
                                            <identifier:size_t sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:data_size sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <&typedef_name ns:238>
                                            <identifier:VALUE_DATA sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&pointer ns:238>
                                                <*:* sym level: 0 namespace:238>
                                            <&direct_declarator ns:238>
                                                <identifier:data_field sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW__Bool:_Bool sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:const_expr sym level: 0 namespace:238>
                                        <colon:: sym level: 0 namespace:238>
                                        <&constant_expr ns:238>
                                            <&primary_expression ns:238>
                                                <integer_constant:1 sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW_char:char sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&pointer ns:238>
                                                <*:* sym level: 0 namespace:238>
                                            <&direct_declarator ns:238>
                                                <identifier:value sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <&typedef_name ns:238>
                                            <identifier:NMSP sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:name_space sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW_int:int sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:align_size sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <&enum_spec ns:238>
                                            <KW_enum:enum sym level: 0 namespace:238>
                                            <identifier:linkage_type sym level: 0 namespace:2>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:linkage sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <&enum_spec ns:238>
                                            <KW_enum:enum sym level: 0 namespace:238>
                                            <identifier:function_spec_type sym level: 0 namespace:2>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:fspec_type sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW__Bool:_Bool sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:Thread_local sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW__Bool:_Bool sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:defined sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                            <&struct_decl ns:238>
                                <&spec_qual_list ns:238>
                                    <&type_spec ns:238>
                                        <KW__Bool:_Bool sym level: 0 namespace:238>
                                <&struct_declarator_list ns:238>
                                    <&struct_declarator ns:238>
                                        <&declarator ns:238>
                                            <&direct_declarator ns:238>
                                                <identifier:declared sym level: 0 namespace:238>
                                <;:; sym level: 0 namespace:238>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:SYM_ITEM sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:240>
                            <&struct_decl ns:240>
                                <&spec_qual_list ns:240>
                                    <&type_spec ns:240>
                                        <KW__Bool:_Bool sym level: 0 namespace:240>
                                <&struct_declarator_list ns:240>
                                    <&struct_declarator ns:240>
                                        <&declarator ns:240>
                                            <&direct_declarator ns:240>
                                                <identifier:have_ret sym level: 0 namespace:240>
                                <;:; sym level: 0 namespace:240>
                            <&struct_decl ns:240>
                                <&spec_qual_list ns:240>
                                    <&type_spec ns:240>
                                        <&typedef_name ns:240>
                                            <identifier:SYM_ITEM sym level: 0 namespace:240>
                                <&struct_declarator_list ns:240>
                                    <&struct_declarator ns:240>
                                        <&declarator ns:240>
                                            <&pointer ns:240>
                                                <*:* sym level: 0 namespace:240>
                                            <&direct_declarator ns:240>
                                                <identifier:function_symbol sym level: 0 namespace:240>
                                <;:; sym level: 0 namespace:240>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:SYMBOL_TABLE_FUNC_ATTR sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_typedef:typedef sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&struct_decl_list ns:242>
                            <&struct_decl ns:242>
                                <&spec_qual_list ns:242>
                                    <&type_spec ns:242>
                                        <&typedef_name ns:242>
                                            <identifier:VEC sym level: 0 namespace:242>
                                <&struct_declarator_list ns:242>
                                    <&struct_declarator ns:242>
                                        <&declarator ns:242>
                                            <&pointer ns:242>
                                                <*:* sym level: 0 namespace:242>
                                            <&direct_declarator ns:242>
                                                <identifier:switch_value sym level: 0 namespace:242>
                                <;:; sym level: 0 namespace:242>
                            <&struct_decl ns:242>
                                <&spec_qual_list ns:242>
                                    <&type_spec ns:242>
                                        <KW__Bool:_Bool sym level: 0 namespace:242>
                                <&struct_declarator_list ns:242>
                                    <&struct_declarator ns:242>
                                        <&declarator ns:242>
                                            <&direct_declarator ns:242>
                                                <identifier:have_default sym level: 0 namespace:242>
                                <;:; sym level: 0 namespace:242>
                        <right_brace:} sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:SYMBOL_TABLE_SWITCH_ATTR sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Create_symbol_table sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:father sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&enum_spec ns:1>
                                                    <KW_enum:enum sym level: 1 namespace:1>
                                                    <identifier:scope_type sym level: 1 namespace:2>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:type sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:insert_symbol sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM_ITEM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_item sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM_ITEM sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:find_symbol sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:NMSP sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:name_space sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM_ITEM sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:find_symbol_curr_table sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:NMSP sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:name_space sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:del_symbol sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:NMSP sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:name_space sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:del_symbol_typedef_table sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:Del_symbol_table sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:print_symbol_table sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol_table sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:get_symbol_hash sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:HASH sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:h sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:SymbolCharToKey sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:NMSP sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:name_space sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:symbol_item_cmp sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_void:void sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:b sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM_ITEM sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:Create_symbol_item sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_char:char sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 1 namespace:1>
                                            <&direct_declarator ns:1>
                                                <identifier:symbol sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:NMSP sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:name_space sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW_inline:inline sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:Copy_sym_item sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM_ITEM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:new sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM_ITEM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:old sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <!:! sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:old sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <!:! sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:new sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <expr_stmt ns:1>
                                <&assignment_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:new sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:m_alloc sym level: 3 namespace:1>
                                        <(:( sym level: 3 namespace:1>
                                        <&unary_expr ns:1>
                                            <KW_sizeof:sizeof sym level: 3 namespace:1>
                                            <(:( sym level: 3 namespace:1>
                                            <&type_name ns:1>
                                                <&spec_qual_list ns:1>
                                                    <&type_spec ns:1>
                                                        <&typedef_name ns:1>
                                                            <identifier:SYM_ITEM sym level: 3 namespace:1>
                                            <):) sym level: 3 namespace:1>
                                        <):) sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:count sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:count sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_field sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_field sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_size sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_size sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:declared sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:declared sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:defined sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:defined sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:key sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:key sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:linkage sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:linkage sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:name_space sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:name_space sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:type_vec sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:type_vec sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:new sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:value sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:old sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:value sym level: 2 namespace:0>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <integer_constant:1 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_static:static sym level: 0 namespace:1>
                <&type_qual ns:1>
                    <KW_const:const sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <KW_char:char sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&pointer ns:1>
                            <*:* sym level: 0 namespace:1>
                        <&direct_declarator ns:1>
                            <identifier:scope_type_str sym level: 0 namespace:1>
                            <[:[ sym level: 0 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:5 sym level: 0 namespace:1>
                            <]:] sym level: 0 namespace:1>
                    <=:= sym level: 0 namespace:1>
                    <&initializer ns:1>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&initializer_list ns:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <string:"no_scope_type" sym level: 0 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <string:"block_scope" sym level: 0 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <string:"function_scope" sym level: 0 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <string:"file_scope" sym level: 0 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <string:"function_prototype_scope" sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM sym level: 1 namespace:1>
            <&declarator ns:1>
                <&pointer ns:1>
                    <*:* sym level: 1 namespace:1>
                <&direct_declarator ns:1>
                    <identifier:Create_symbol_table sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:father sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&enum_spec ns:1>
                                            <KW_enum:enum sym level: 2 namespace:1>
                                            <identifier:scope_type sym level: 2 namespace:2>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:type sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&cast_expr ns:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&type_name ns:1>
                                        <&spec_qual_list ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM sym level: 2 namespace:1>
                                        <&abstract_declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:m_alloc sym level: 2 namespace:1>
                                        <(:( sym level: 2 namespace:1>
                                        <&unary_expr ns:1>
                                            <KW_sizeof:sizeof sym level: 2 namespace:1>
                                            <&primary_expression ns:1>
                                                <(:( sym level: 2 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:SYM sym level: 2 namespace:1>
                                                <):) sym level: 2 namespace:1>
                                        <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:father sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:father sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:father sym level: 3 namespace:1>
                            <!=:!= sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:VECinsert sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:father sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:child_table sym level: 4 namespace:0>
                                            <,:, sym level: 4 namespace:1>
                                            <&cast_expr ns:1>
                                                <(:( sym level: 4 namespace:1>
                                                <&type_name ns:1>
                                                    <&spec_qual_list ns:1>
                                                        <&type_spec ns:1>
                                                            <KW_void:void sym level: 4 namespace:1>
                                                    <&abstract_declarator ns:1>
                                                        <&pointer ns:1>
                                                            <*:* sym level: 4 namespace:1>
                                                <):) sym level: 4 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:symbol_table sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:father sym level: 3 namespace:1>
                            <==:== sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <expr_stmt ns:1>
                                <&assignment_expr ns:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_table sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:level sym level: 3 namespace:0>
                                    <=:= sym level: 3 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                        <KW_else:else sym level: 3 namespace:1>
                        <statement ns:1>
                            <expr_stmt ns:1>
                                <&assignment_expr ns:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_table sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:level sym level: 3 namespace:0>
                                    <=:= sym level: 3 namespace:1>
                                    <&additive_expr ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:father sym level: 3 namespace:1>
                                            <->:-> sym level: 3 namespace:1>
                                            <identifier:level sym level: 3 namespace:0>
                                        <+:+ sym level: 3 namespace:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:1 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:child_table sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:InitVEC sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:3 sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:sym_hash_table sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:InitHASH sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:sp_type sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:type sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:name_space sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_and_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:father sym level: 3 namespace:1>
                            <double_ampersand:&& sym level: 3 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:father sym level: 3 namespace:1>
                                <->:-> sym level: 3 namespace:1>
                                <identifier:typedef_name_table sym level: 3 namespace:0>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:symbol_table sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:typedef_name_table sym level: 4 namespace:0>
                                            <=:= sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:InitHASH sym level: 4 namespace:1>
                                                <(:( sym level: 4 namespace:1>
                                                <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:HASHCOPY sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:symbol_table sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:typedef_name_table sym level: 4 namespace:0>
                                            <,:, sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:father sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:typedef_name_table sym level: 4 namespace:0>
                                            <,:, sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <identifier:symbol_item_cmp sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                        <KW_else:else sym level: 3 namespace:1>
                        <statement ns:1>
                            <expr_stmt ns:1>
                                <&assignment_expr ns:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_table sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:typedef_name_table sym level: 3 namespace:0>
                                    <=:= sym level: 3 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:InitHASH sym level: 3 namespace:1>
                                        <(:( sym level: 3 namespace:1>
                                        <):) sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:enum_const_table sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:InitHASH sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:father sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <expr_stmt ns:1>
                                <&assignment_expr ns:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_table sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:st_attr_type sym level: 3 namespace:0>
                                    <=:= sym level: 3 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:father sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:st_attr_type sym level: 3 namespace:0>
                                <;:; sym level: 3 namespace:1>
                        <KW_else:else sym level: 3 namespace:1>
                        <statement ns:1>
                            <expr_stmt ns:1>
                                <&assignment_expr ns:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_table sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:st_attr_type sym level: 3 namespace:0>
                                    <=:= sym level: 3 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:SA_ATTR_NONE sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:st_attr sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:symbol_table sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM_ITEM sym level: 1 namespace:1>
            <&declarator ns:1>
                <&pointer ns:1>
                    <*:* sym level: 1 namespace:1>
                <&direct_declarator ns:1>
                    <identifier:Create_symbol_item sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:NMSP sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:symbol sym level: 3 namespace:1>
                            <==:== sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&cast_expr ns:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&type_name ns:1>
                                        <&spec_qual_list ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM_ITEM sym level: 2 namespace:1>
                                        <&abstract_declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:m_alloc sym level: 2 namespace:1>
                                        <(:( sym level: 2 namespace:1>
                                        <&unary_expr ns:1>
                                            <KW_sizeof:sizeof sym level: 2 namespace:1>
                                            <&primary_expression ns:1>
                                                <(:( sym level: 2 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:SYM_ITEM sym level: 2 namespace:1>
                                                <):) sym level: 2 namespace:1>
                                        <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:value sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:name_space sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:name_space sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:key sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:SymbolCharToKey sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol sym level: 2 namespace:1>
                                <,:, sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:name_space sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:count sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:declared sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&assignment_expr ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:tmp sym level: 2 namespace:1>
                                    <->:-> sym level: 2 namespace:1>
                                    <identifier:defined sym level: 2 namespace:0>
                                <=:= sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:align_size sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:linkage sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:LKA_NONE sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:fspec_type sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:FSPEC_NONE sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:Thread_local sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_size sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_field sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&cast_expr ns:1>
                                <(:( sym level: 2 namespace:1>
                                <&type_name ns:1>
                                    <&spec_qual_list ns:1>
                                        <&type_spec ns:1>
                                            <&typedef_name ns:1>
                                                <identifier:VALUE_DATA sym level: 2 namespace:1>
                                    <&abstract_declarator ns:1>
                                        <&pointer ns:1>
                                            <*:* sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:m_alloc sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&unary_expr ns:1>
                                        <KW_sizeof:sizeof sym level: 2 namespace:1>
                                        <(:( sym level: 2 namespace:1>
                                        <&type_name ns:1>
                                            <&spec_qual_list ns:1>
                                                <&type_spec ns:1>
                                                    <&typedef_name ns:1>
                                                        <identifier:VALUE_DATA sym level: 2 namespace:1>
                                        <):) sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:m_memset sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:data_field sym level: 2 namespace:0>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <char_const:'\0' sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&unary_expr ns:1>
                                <KW_sizeof:sizeof sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <&type_name ns:1>
                                    <&spec_qual_list ns:1>
                                        <&type_spec ns:1>
                                            <&typedef_name ns:1>
                                                <identifier:VALUE_DATA sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:type_vec sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:InitVEC sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:3 sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:const_expr sym level: 2 namespace:0>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:tmp sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:insert_symbol sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM_ITEM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_item sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:HASHInsert sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:sym_hash_table sym level: 2 namespace:0>
                            <,:, sym level: 2 namespace:1>
                            <&cast_expr ns:1>
                                <(:( sym level: 2 namespace:1>
                                <&type_name ns:1>
                                    <&spec_qual_list ns:1>
                                        <&type_spec ns:1>
                                            <&typedef_name ns:1>
                                                <identifier:HASH_ITEM sym level: 2 namespace:1>
                                    <&abstract_declarator ns:1>
                                        <&pointer ns:1>
                                            <*:* sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_item sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_item_cmp sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM_ITEM sym level: 1 namespace:1>
            <&declarator ns:1>
                <&pointer ns:1>
                    <*:* sym level: 1 namespace:1>
                <&direct_declarator ns:1>
                    <identifier:find_symbol sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:NMSP sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_or_expr ns:1>
                            <&unary_expr ns:1>
                                <!:! sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 3 namespace:1>
                            <||:|| sym level: 3 namespace:1>
                            <&unary_expr ns:1>
                                <!:! sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:item sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:find_item sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:Create_symbol_item sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:curr sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&while_stmt ns:1>
                        <KW_while:while sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_and_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:curr sym level: 3 namespace:1>
                            <double_ampersand:&& sym level: 3 namespace:1>
                            <&equality_expr ns:1>
                                <&primary_expression ns:1>
                                    <(:( sym level: 3 namespace:1>
                                    <&assignment_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:item sym level: 3 namespace:1>
                                        <=:= sym level: 3 namespace:1>
                                        <&cast_expr ns:1>
                                            <(:( sym level: 3 namespace:1>
                                            <&type_name ns:1>
                                                <&spec_qual_list ns:1>
                                                    <&type_spec ns:1>
                                                        <&typedef_name ns:1>
                                                            <identifier:SYM_ITEM sym level: 3 namespace:1>
                                                <&abstract_declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 3 namespace:1>
                                            <):) sym level: 3 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:HASHFind sym level: 3 namespace:1>
                                                <(:( sym level: 3 namespace:1>
                                                <&postfix_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:curr sym level: 3 namespace:1>
                                                    <->:-> sym level: 3 namespace:1>
                                                    <identifier:sym_hash_table sym level: 3 namespace:0>
                                                <,:, sym level: 3 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:find_item sym level: 3 namespace:1>
                                                <,:, sym level: 3 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:symbol_item_cmp sym level: 3 namespace:1>
                                                <,:, sym level: 3 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:0 sym level: 3 namespace:1>
                                                <,:, sym level: 3 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:0 sym level: 3 namespace:1>
                                                <):) sym level: 3 namespace:1>
                                    <):) sym level: 3 namespace:1>
                                <==:== sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:curr sym level: 4 namespace:1>
                                            <=:= sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:curr sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:father sym level: 4 namespace:0>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:m_free sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:find_item sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:item sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:SYM_ITEM sym level: 1 namespace:1>
            <&declarator ns:1>
                <&pointer ns:1>
                    <*:* sym level: 1 namespace:1>
                <&direct_declarator ns:1>
                    <identifier:find_symbol_curr_table sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:NMSP sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_or_expr ns:1>
                            <&unary_expr ns:1>
                                <!:! sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 3 namespace:1>
                            <||:|| sym level: 3 namespace:1>
                            <&unary_expr ns:1>
                                <!:! sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:find_item sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:Create_symbol_item sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:item sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&cast_expr ns:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&type_name ns:1>
                                        <&spec_qual_list ns:1>
                                            <&type_spec ns:1>
                                                <&typedef_name ns:1>
                                                    <identifier:SYM_ITEM sym level: 2 namespace:1>
                                        <&abstract_declarator ns:1>
                                            <&pointer ns:1>
                                                <*:* sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:HASHFind sym level: 2 namespace:1>
                                        <(:( sym level: 2 namespace:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:symbol_table sym level: 2 namespace:1>
                                            <->:-> sym level: 2 namespace:1>
                                            <identifier:sym_hash_table sym level: 2 namespace:0>
                                        <,:, sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <identifier:find_item sym level: 2 namespace:1>
                                        <,:, sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_item_cmp sym level: 2 namespace:1>
                                        <,:, sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 2 namespace:1>
                                        <,:, sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 2 namespace:1>
                                        <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:m_free sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:find_item sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:item sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:del_symbol sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:NMSP sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:find_item sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:Create_symbol_item sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:HASHFind sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:sym_hash_table sym level: 2 namespace:0>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:find_item sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_item_cmp sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:1 sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:m_free sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:find_item sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:del_symbol_typedef_table sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:find_item sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:Create_symbol_item sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0 sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:HASH_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:del_item sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:HASHFind sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:symbol_table sym level: 2 namespace:1>
                                        <->:-> sym level: 2 namespace:1>
                                        <identifier:typedef_name_table sym level: 2 namespace:0>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:find_item sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol_item_cmp sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0 sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:1 sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:HASHDELITEM sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:typedef_name_table sym level: 2 namespace:0>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:del_item sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_item_cmp sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:m_free sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:find_item sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:Del_symbol_table sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <!:! sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_table sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:DelHASH sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:sym_hash_table sym level: 2 namespace:0>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:DelHASH sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:typedef_name_table sym level: 2 namespace:0>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:DelHASH sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:enum_const_table sym level: 2 namespace:0>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:DelVEC sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:child_table sym level: 2 namespace:0>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:m_free sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_table sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:print_symbol_table sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:SYM sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:VEC sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:symbol_vec sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_table sym level: 3 namespace:1>
                            <==:== sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:printf sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <string:"no symbol table\n" sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&return_stmt ns:1>
                                        <KW_return:return sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <&for_stmt ns:1>
                        <KW_for:for sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <declaration ns:1>
                            <&declaration_spec ns:1>
                                <&type_spec ns:1>
                                    <KW_int:int sym level: 3 namespace:1>
                            <&init_decl_list ns:1>
                                <&init_decl ns:1>
                                    <&declarator ns:1>
                                        <&direct_declarator ns:1>
                                            <identifier:i sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 3 namespace:1>
                            <;:; sym level: 3 namespace:1>
                        <&relational_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                            <<:< sym level: 3 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 3 namespace:1>
                                <->:-> sym level: 3 namespace:1>
                                <identifier:level sym level: 3 namespace:0>
                        <;:; sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <++:++ sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:printf sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <string:"    " sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:printf sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <string:"scope type:%s with child %ld and namespace %d\n" sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:scope_type_str sym level: 2 namespace:1>
                                <[:[ sym level: 2 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                                    <->:-> sym level: 2 namespace:1>
                                    <identifier:sp_type sym level: 2 namespace:0>
                                <]:] sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 2 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                                    <->:-> sym level: 2 namespace:1>
                                    <identifier:child_table sym level: 2 namespace:0>
                                    <->:-> sym level: 2 namespace:1>
                                    <identifier:len sym level: 2 namespace:0>
                                <):) sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 2 namespace:1>
                                <->:-> sym level: 2 namespace:1>
                                <identifier:name_space sym level: 2 namespace:0>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&for_stmt ns:1>
                        <KW_for:for sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <declaration ns:1>
                            <&declaration_spec ns:1>
                                <&type_spec ns:1>
                                    <KW_int:int sym level: 3 namespace:1>
                            <&init_decl_list ns:1>
                                <&init_decl ns:1>
                                    <&declarator ns:1>
                                        <&direct_declarator ns:1>
                                            <identifier:i sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 3 namespace:1>
                            <;:; sym level: 3 namespace:1>
                        <&relational_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                            <<=:<= sym level: 3 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol_table sym level: 3 namespace:1>
                                <->:-> sym level: 3 namespace:1>
                                <identifier:level sym level: 3 namespace:0>
                        <;:; sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <++:++ sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:printf sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <string:"    " sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:printf sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <string:"<symbol table>\n" sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:symbol_vec sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:get_symbol_hash sym level: 2 namespace:1>
                                <(:( sym level: 2 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol_table sym level: 2 namespace:1>
                                    <->:-> sym level: 2 namespace:1>
                                    <identifier:sym_hash_table sym level: 2 namespace:0>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&for_stmt ns:1>
                        <KW_for:for sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <declaration ns:1>
                            <&declaration_spec ns:1>
                                <&type_spec ns:1>
                                    <&typedef_name ns:1>
                                        <identifier:size_t sym level: 3 namespace:1>
                            <&init_decl_list ns:1>
                                <&init_decl ns:1>
                                    <&declarator ns:1>
                                        <&direct_declarator ns:1>
                                            <identifier:i sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 3 namespace:1>
                            <;:; sym level: 3 namespace:1>
                        <&relational_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                            <<:< sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 3 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol_vec sym level: 3 namespace:1>
                                    <->:-> sym level: 3 namespace:1>
                                    <identifier:len sym level: 3 namespace:0>
                                <):) sym level: 3 namespace:1>
                        <;:; sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <++:++ sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:tmp sym level: 4 namespace:1>
                                            <=:= sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <(:( sym level: 4 namespace:1>
                                                <&conditional_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 4 namespace:1>
                                                        <&logical_and_expr ns:1>
                                                            <&equality_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:symbol_vec sym level: 4 namespace:1>
                                                                <!=:!= sym level: 4 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <integer_constant:0 sym level: 4 namespace:1>
                                                            <double_ampersand:&& sym level: 4 namespace:1>
                                                            <&relational_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:i sym level: 4 namespace:1>
                                                                <<:< sym level: 4 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <(:( sym level: 4 namespace:1>
                                                                    <&postfix_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:symbol_vec sym level: 4 namespace:1>
                                                                        <->:-> sym level: 4 namespace:1>
                                                                        <identifier:len sym level: 4 namespace:0>
                                                                    <):) sym level: 4 namespace:1>
                                                        <):) sym level: 4 namespace:1>
                                                    <?:? sym level: 4 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 4 namespace:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:symbol_vec sym level: 4 namespace:1>
                                                            <->:-> sym level: 4 namespace:1>
                                                            <identifier:data sym level: 4 namespace:0>
                                                            <[:[ sym level: 4 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:i sym level: 4 namespace:1>
                                                            <]:] sym level: 4 namespace:1>
                                                        <):) sym level: 4 namespace:1>
                                                    <colon:: sym level: 4 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <integer_constant:0 sym level: 4 namespace:1>
                                                <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&if_stmt ns:1>
                                        <KW_if:if sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <&logical_or_expr ns:1>
                                            <&unary_expr ns:1>
                                                <!:! sym level: 5 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:tmp sym level: 5 namespace:1>
                                            <||:|| sym level: 5 namespace:1>
                                            <&relational_expr ns:1>
                                                <&postfix_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:tmp sym level: 5 namespace:1>
                                                    <->:-> sym level: 5 namespace:1>
                                                    <identifier:count sym level: 5 namespace:0>
                                                <<=:<= sym level: 5 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:0 sym level: 5 namespace:1>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <&continue_stmt ns:1>
                                                <KW_continue:continue sym level: 5 namespace:1>
                                                <;:; sym level: 5 namespace:1>
                                <statement ns:1>
                                    <&for_stmt ns:1>
                                        <KW_for:for sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <declaration ns:1>
                                            <&declaration_spec ns:1>
                                                <&type_spec ns:1>
                                                    <KW_int:int sym level: 5 namespace:1>
                                            <&init_decl_list ns:1>
                                                <&init_decl ns:1>
                                                    <&declarator ns:1>
                                                        <&direct_declarator ns:1>
                                                            <identifier:j sym level: 5 namespace:1>
                                                    <=:= sym level: 5 namespace:1>
                                                    <&initializer ns:1>
                                                        <&primary_expression ns:1>
                                                            <integer_constant:0 sym level: 5 namespace:1>
                                            <;:; sym level: 5 namespace:1>
                                        <&relational_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:j sym level: 5 namespace:1>
                                            <<=:<= sym level: 5 namespace:1>
                                            <&additive_expr ns:1>
                                                <&postfix_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:symbol_table sym level: 5 namespace:1>
                                                    <->:-> sym level: 5 namespace:1>
                                                    <identifier:level sym level: 5 namespace:0>
                                                <+:+ sym level: 5 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:1 sym level: 5 namespace:1>
                                        <;:; sym level: 5 namespace:1>
                                        <&unary_expr ns:1>
                                            <++:++ sym level: 5 namespace:1>
                                            <&primary_expression ns:1>
                                                <identifier:j sym level: 5 namespace:1>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <compound_stmt ns:1>
                                                <left_brace:{ sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <expr_stmt ns:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:printf sym level: 6 namespace:1>
                                                            <(:( sym level: 6 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <string:"    " sym level: 6 namespace:1>
                                                            <):) sym level: 6 namespace:1>
                                                        <;:; sym level: 6 namespace:1>
                                                <right_brace:} sym level: 6 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:printf sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <string:"<symbol:%s ns:%d linkage:%d>\n" sym level: 4 namespace:1>
                                            <,:, sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:tmp sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:value sym level: 4 namespace:0>
                                            <,:, sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:tmp sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:name_space sym level: 4 namespace:0>
                                            <,:, sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:tmp sym level: 4 namespace:1>
                                                <->:-> sym level: 4 namespace:1>
                                                <identifier:linkage sym level: 4 namespace:0>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&for_stmt ns:1>
                                        <KW_for:for sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <declaration ns:1>
                                            <&declaration_spec ns:1>
                                                <&type_spec ns:1>
                                                    <KW_int:int sym level: 5 namespace:1>
                                            <&init_decl_list ns:1>
                                                <&init_decl ns:1>
                                                    <&declarator ns:1>
                                                        <&direct_declarator ns:1>
                                                            <identifier:j sym level: 5 namespace:1>
                                                    <=:= sym level: 5 namespace:1>
                                                    <&initializer ns:1>
                                                        <&primary_expression ns:1>
                                                            <integer_constant:0 sym level: 5 namespace:1>
                                            <;:; sym level: 5 namespace:1>
                                        <&relational_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:j sym level: 5 namespace:1>
                                            <<=:<= sym level: 5 namespace:1>
                                            <&additive_expr ns:1>
                                                <&postfix_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:symbol_table sym level: 5 namespace:1>
                                                    <->:-> sym level: 5 namespace:1>
                                                    <identifier:level sym level: 5 namespace:0>
                                                <+:+ sym level: 5 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:2 sym level: 5 namespace:1>
                                        <;:; sym level: 5 namespace:1>
                                        <&unary_expr ns:1>
                                            <++:++ sym level: 5 namespace:1>
                                            <&primary_expression ns:1>
                                                <identifier:j sym level: 5 namespace:1>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <compound_stmt ns:1>
                                                <left_brace:{ sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <expr_stmt ns:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:printf sym level: 6 namespace:1>
                                                            <(:( sym level: 6 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <string:"    " sym level: 6 namespace:1>
                                                            <):) sym level: 6 namespace:1>
                                                        <;:; sym level: 6 namespace:1>
                                                <right_brace:} sym level: 6 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:printf sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <string:"type::<" sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <declaration ns:1>
                                    <&declaration_spec ns:1>
                                        <&type_spec ns:1>
                                            <&typedef_name ns:1>
                                                <identifier:M_TYPE sym level: 4 namespace:1>
                                    <&init_decl_list ns:1>
                                        <&init_decl ns:1>
                                            <&declarator ns:1>
                                                <&pointer ns:1>
                                                    <*:* sym level: 4 namespace:1>
                                                <&direct_declarator ns:1>
                                                    <identifier:tmpfunct sym level: 4 namespace:1>
                                            <=:= sym level: 4 namespace:1>
                                            <&initializer ns:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:0 sym level: 4 namespace:1>
                                    <;:; sym level: 4 namespace:1>
                                <declaration ns:1>
                                    <&declaration_spec ns:1>
                                        <&type_spec ns:1>
                                            <&typedef_name ns:1>
                                                <identifier:M_TYPE sym level: 4 namespace:1>
                                    <&init_decl_list ns:1>
                                        <&init_decl ns:1>
                                            <&declarator ns:1>
                                                <&pointer ns:1>
                                                    <*:* sym level: 4 namespace:1>
                                                <&direct_declarator ns:1>
                                                    <identifier:tmpt sym level: 4 namespace:1>
                                            <=:= sym level: 4 namespace:1>
                                            <&initializer ns:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:0 sym level: 4 namespace:1>
                                    <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&if_stmt ns:1>
                                        <KW_if:if sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:tmp sym level: 5 namespace:1>
                                            <->:-> sym level: 5 namespace:1>
                                            <identifier:type_vec sym level: 5 namespace:0>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <compound_stmt ns:1>
                                                <left_brace:{ sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <&for_stmt ns:1>
                                                        <KW_for:for sym level: 7 namespace:1>
                                                        <(:( sym level: 7 namespace:1>
                                                        <declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_int:int sym level: 7 namespace:1>
                                                            <&init_decl_list ns:1>
                                                                <&init_decl ns:1>
                                                                    <&declarator ns:1>
                                                                        <&direct_declarator ns:1>
                                                                            <identifier:j sym level: 7 namespace:1>
                                                                    <=:= sym level: 7 namespace:1>
                                                                    <&initializer ns:1>
                                                                        <&additive_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <(:( sym level: 7 namespace:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:tmp sym level: 7 namespace:1>
                                                                                    <->:-> sym level: 7 namespace:1>
                                                                                    <identifier:type_vec sym level: 7 namespace:0>
                                                                                    <->:-> sym level: 7 namespace:1>
                                                                                    <identifier:len sym level: 7 namespace:0>
                                                                                <):) sym level: 7 namespace:1>
                                                                            <-:- sym level: 7 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <integer_constant:1 sym level: 7 namespace:1>
                                                            <;:; sym level: 7 namespace:1>
                                                        <&relational_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:j sym level: 7 namespace:1>
                                                            <>=:>= sym level: 7 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <integer_constant:0 sym level: 7 namespace:1>
                                                        <;:; sym level: 7 namespace:1>
                                                        <&unary_expr ns:1>
                                                            <--:-- sym level: 7 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:j sym level: 7 namespace:1>
                                                        <):) sym level: 7 namespace:1>
                                                        <statement ns:1>
                                                            <compound_stmt ns:1>
                                                                <left_brace:{ sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <expr_stmt ns:1>
                                                                        <&assignment_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:tmpt sym level: 8 namespace:1>
                                                                            <=:= sym level: 8 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <(:( sym level: 8 namespace:1>
                                                                                <&conditional_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <(:( sym level: 8 namespace:1>
                                                                                        <&logical_and_expr ns:1>
                                                                                            <&equality_expr ns:1>
                                                                                                <&postfix_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:tmp sym level: 8 namespace:1>
                                                                                                    <->:-> sym level: 8 namespace:1>
                                                                                                    <identifier:type_vec sym level: 8 namespace:0>
                                                                                                <!=:!= sym level: 8 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <integer_constant:0 sym level: 8 namespace:1>
                                                                                            <double_ampersand:&& sym level: 8 namespace:1>
                                                                                            <&relational_expr ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:j sym level: 8 namespace:1>
                                                                                                <<:< sym level: 8 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <(:( sym level: 8 namespace:1>
                                                                                                    <&postfix_expr ns:1>
                                                                                                        <&primary_expression ns:1>
                                                                                                            <identifier:tmp sym level: 8 namespace:1>
                                                                                                        <->:-> sym level: 8 namespace:1>
                                                                                                        <identifier:type_vec sym level: 8 namespace:0>
                                                                                                        <->:-> sym level: 8 namespace:1>
                                                                                                        <identifier:len sym level: 8 namespace:0>
                                                                                                    <):) sym level: 8 namespace:1>
                                                                                        <):) sym level: 8 namespace:1>
                                                                                    <?:? sym level: 8 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <(:( sym level: 8 namespace:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:tmp sym level: 8 namespace:1>
                                                                                            <->:-> sym level: 8 namespace:1>
                                                                                            <identifier:type_vec sym level: 8 namespace:0>
                                                                                            <->:-> sym level: 8 namespace:1>
                                                                                            <identifier:data sym level: 8 namespace:0>
                                                                                            <[:[ sym level: 8 namespace:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:j sym level: 8 namespace:1>
                                                                                            <]:] sym level: 8 namespace:1>
                                                                                        <):) sym level: 8 namespace:1>
                                                                                    <colon:: sym level: 8 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <integer_constant:0 sym level: 8 namespace:1>
                                                                                <):) sym level: 8 namespace:1>
                                                                        <;:; sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <&if_stmt ns:1>
                                                                        <KW_if:if sym level: 9 namespace:1>
                                                                        <(:( sym level: 9 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:tmpt sym level: 9 namespace:1>
                                                                        <):) sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <compound_stmt ns:1>
                                                                                <left_brace:{ sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <&if_stmt ns:1>
                                                                                        <KW_if:if sym level: 11 namespace:1>
                                                                                        <(:( sym level: 11 namespace:1>
                                                                                        <&logical_and_expr ns:1>
                                                                                            <&equality_expr ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:tmpfunct sym level: 11 namespace:1>
                                                                                                <==:== sym level: 11 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <integer_constant:0 sym level: 11 namespace:1>
                                                                                            <double_ampersand:&& sym level: 11 namespace:1>
                                                                                            <&equality_expr ns:1>
                                                                                                <&postfix_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:tmpt sym level: 11 namespace:1>
                                                                                                    <->:-> sym level: 11 namespace:1>
                                                                                                    <identifier:typ_category sym level: 11 namespace:0>
                                                                                                <==:== sym level: 11 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:TP_FUNCTION sym level: 11 namespace:1>
                                                                                        <):) sym level: 11 namespace:1>
                                                                                        <statement ns:1>
                                                                                            <expr_stmt ns:1>
                                                                                                <&assignment_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:tmpfunct sym level: 11 namespace:1>
                                                                                                    <=:= sym level: 11 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:tmpt sym level: 11 namespace:1>
                                                                                                <;:; sym level: 11 namespace:1>
                                                                                <statement ns:1>
                                                                                    <expr_stmt ns:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:print_type sym level: 10 namespace:1>
                                                                                            <(:( sym level: 10 namespace:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:tmpt sym level: 10 namespace:1>
                                                                                            <):) sym level: 10 namespace:1>
                                                                                        <;:; sym level: 10 namespace:1>
                                                                                <right_brace:} sym level: 10 namespace:1>
                                                                <statement ns:1>
                                                                    <&if_stmt ns:1>
                                                                        <KW_if:if sym level: 9 namespace:1>
                                                                        <(:( sym level: 9 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:j sym level: 9 namespace:1>
                                                                        <):) sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <expr_stmt ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:printf sym level: 9 namespace:1>
                                                                                    <(:( sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <string:"," sym level: 9 namespace:1>
                                                                                    <):) sym level: 9 namespace:1>
                                                                                <;:; sym level: 9 namespace:1>
                                                                <right_brace:} sym level: 8 namespace:1>
                                                <right_brace:} sym level: 6 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:printf sym level: 4 namespace:1>
                                            <(:( sym level: 4 namespace:1>
                                            <&primary_expression ns:1>
                                                <string:">\n" sym level: 4 namespace:1>
                                            <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:tmpt sym level: 4 namespace:1>
                                            <=:= sym level: 4 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:Type_VEC_get_actual_base_type sym level: 4 namespace:1>
                                                <(:( sym level: 4 namespace:1>
                                                <&postfix_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:tmp sym level: 4 namespace:1>
                                                    <->:-> sym level: 4 namespace:1>
                                                    <identifier:type_vec sym level: 4 namespace:0>
                                                <):) sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&if_stmt ns:1>
                                        <KW_if:if sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <&primary_expression ns:1>
                                            <identifier:tmpfunct sym level: 5 namespace:1>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <compound_stmt ns:1>
                                                <left_brace:{ sym level: 6 namespace:1>
                                                <declaration ns:1>
                                                    <&declaration_spec ns:1>
                                                        <&type_spec ns:1>
                                                            <&typedef_name ns:1>
                                                                <identifier:VEC sym level: 6 namespace:1>
                                                    <&init_decl_list ns:1>
                                                        <&init_decl ns:1>
                                                            <&declarator ns:1>
                                                                <&pointer ns:1>
                                                                    <*:* sym level: 6 namespace:1>
                                                                <&direct_declarator ns:1>
                                                                    <identifier:paravec sym level: 6 namespace:1>
                                                            <=:= sym level: 6 namespace:1>
                                                            <&initializer ns:1>
                                                                <&postfix_expr ns:1>
                                                                    <&primary_expression ns:1>
                                                                        <(:( sym level: 6 namespace:1>
                                                                        <&cast_expr ns:1>
                                                                            <(:( sym level: 6 namespace:1>
                                                                            <&type_name ns:1>
                                                                                <&spec_qual_list ns:1>
                                                                                    <&type_spec ns:1>
                                                                                        <&typedef_name ns:1>
                                                                                            <identifier:TP_FUNC sym level: 6 namespace:1>
                                                                                <&abstract_declarator ns:1>
                                                                                    <&pointer ns:1>
                                                                                        <*:* sym level: 6 namespace:1>
                                                                            <):) sym level: 6 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:tmpfunct sym level: 6 namespace:1>
                                                                        <):) sym level: 6 namespace:1>
                                                                    <->:-> sym level: 6 namespace:1>
                                                                    <identifier:func_parameters sym level: 6 namespace:0>
                                                    <;:; sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <&if_stmt ns:1>
                                                        <KW_if:if sym level: 7 namespace:1>
                                                        <(:( sym level: 7 namespace:1>
                                                        <&logical_or_expr ns:1>
                                                            <&equality_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:paravec sym level: 7 namespace:1>
                                                                <==:== sym level: 7 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <integer_constant:0 sym level: 7 namespace:1>
                                                            <||:|| sym level: 7 namespace:1>
                                                            <&equality_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <(:( sym level: 7 namespace:1>
                                                                    <&postfix_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:paravec sym level: 7 namespace:1>
                                                                        <->:-> sym level: 7 namespace:1>
                                                                        <identifier:len sym level: 7 namespace:0>
                                                                    <):) sym level: 7 namespace:1>
                                                                <==:== sym level: 7 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <integer_constant:0 sym level: 7 namespace:1>
                                                        <):) sym level: 7 namespace:1>
                                                        <statement ns:1>
                                                            <compound_stmt ns:1>
                                                                <left_brace:{ sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <&for_stmt ns:1>
                                                                        <KW_for:for sym level: 9 namespace:1>
                                                                        <(:( sym level: 9 namespace:1>
                                                                        <declaration ns:1>
                                                                            <&declaration_spec ns:1>
                                                                                <&type_spec ns:1>
                                                                                    <KW_int:int sym level: 9 namespace:1>
                                                                            <&init_decl_list ns:1>
                                                                                <&init_decl ns:1>
                                                                                    <&declarator ns:1>
                                                                                        <&direct_declarator ns:1>
                                                                                            <identifier:k sym level: 9 namespace:1>
                                                                                    <=:= sym level: 9 namespace:1>
                                                                                    <&initializer ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <integer_constant:0 sym level: 9 namespace:1>
                                                                            <;:; sym level: 9 namespace:1>
                                                                        <&relational_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:k sym level: 9 namespace:1>
                                                                            <<=:<= sym level: 9 namespace:1>
                                                                            <&additive_expr ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:symbol_table sym level: 9 namespace:1>
                                                                                    <->:-> sym level: 9 namespace:1>
                                                                                    <identifier:level sym level: 9 namespace:0>
                                                                                <+:+ sym level: 9 namespace:1>
                                                                                <&primary_expression ns:1>
                                                                                    <integer_constant:3 sym level: 9 namespace:1>
                                                                        <;:; sym level: 9 namespace:1>
                                                                        <&unary_expr ns:1>
                                                                            <++:++ sym level: 9 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:k sym level: 9 namespace:1>
                                                                        <):) sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <compound_stmt ns:1>
                                                                                <left_brace:{ sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <expr_stmt ns:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:printf sym level: 10 namespace:1>
                                                                                            <(:( sym level: 10 namespace:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <string:"    " sym level: 10 namespace:1>
                                                                                            <):) sym level: 10 namespace:1>
                                                                                        <;:; sym level: 10 namespace:1>
                                                                                <right_brace:} sym level: 10 namespace:1>
                                                                <statement ns:1>
                                                                    <expr_stmt ns:1>
                                                                        <&postfix_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:printf sym level: 8 namespace:1>
                                                                            <(:( sym level: 8 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <string:"no parameter\n" sym level: 8 namespace:1>
                                                                            <):) sym level: 8 namespace:1>
                                                                        <;:; sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <&continue_stmt ns:1>
                                                                        <KW_continue:continue sym level: 8 namespace:1>
                                                                        <;:; sym level: 8 namespace:1>
                                                                <right_brace:} sym level: 8 namespace:1>
                                                <statement ns:1>
                                                    <&for_stmt ns:1>
                                                        <KW_for:for sym level: 7 namespace:1>
                                                        <(:( sym level: 7 namespace:1>
                                                        <declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <KW_int:int sym level: 7 namespace:1>
                                                            <&init_decl_list ns:1>
                                                                <&init_decl ns:1>
                                                                    <&declarator ns:1>
                                                                        <&direct_declarator ns:1>
                                                                            <identifier:j sym level: 7 namespace:1>
                                                                    <=:= sym level: 7 namespace:1>
                                                                    <&initializer ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <integer_constant:0 sym level: 7 namespace:1>
                                                            <;:; sym level: 7 namespace:1>
                                                        <&relational_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:j sym level: 7 namespace:1>
                                                            <<=:<= sym level: 7 namespace:1>
                                                            <&additive_expr ns:1>
                                                                <&postfix_expr ns:1>
                                                                    <&primary_expression ns:1>
                                                                        <identifier:symbol_table sym level: 7 namespace:1>
                                                                    <->:-> sym level: 7 namespace:1>
                                                                    <identifier:level sym level: 7 namespace:0>
                                                                <+:+ sym level: 7 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <integer_constant:3 sym level: 7 namespace:1>
                                                        <;:; sym level: 7 namespace:1>
                                                        <&unary_expr ns:1>
                                                            <++:++ sym level: 7 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:j sym level: 7 namespace:1>
                                                        <):) sym level: 7 namespace:1>
                                                        <statement ns:1>
                                                            <compound_stmt ns:1>
                                                                <left_brace:{ sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <expr_stmt ns:1>
                                                                        <&postfix_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:printf sym level: 8 namespace:1>
                                                                            <(:( sym level: 8 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <string:"    " sym level: 8 namespace:1>
                                                                            <):) sym level: 8 namespace:1>
                                                                        <;:; sym level: 8 namespace:1>
                                                                <right_brace:} sym level: 8 namespace:1>
                                                <statement ns:1>
                                                    <expr_stmt ns:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:printf sym level: 6 namespace:1>
                                                            <(:( sym level: 6 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <string:"function have %ld parameters are:\n" sym level: 6 namespace:1>
                                                            <,:, sym level: 6 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <(:( sym level: 6 namespace:1>
                                                                <&postfix_expr ns:1>
                                                                    <&primary_expression ns:1>
                                                                        <identifier:paravec sym level: 6 namespace:1>
                                                                    <->:-> sym level: 6 namespace:1>
                                                                    <identifier:len sym level: 6 namespace:0>
                                                                <):) sym level: 6 namespace:1>
                                                            <):) sym level: 6 namespace:1>
                                                        <;:; sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <&for_stmt ns:1>
                                                        <KW_for:for sym level: 7 namespace:1>
                                                        <(:( sym level: 7 namespace:1>
                                                        <declaration ns:1>
                                                            <&declaration_spec ns:1>
                                                                <&type_spec ns:1>
                                                                    <&typedef_name ns:1>
                                                                        <identifier:size_t sym level: 7 namespace:1>
                                                            <&init_decl_list ns:1>
                                                                <&init_decl ns:1>
                                                                    <&declarator ns:1>
                                                                        <&direct_declarator ns:1>
                                                                            <identifier:j sym level: 7 namespace:1>
                                                                    <=:= sym level: 7 namespace:1>
                                                                    <&initializer ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <integer_constant:0 sym level: 7 namespace:1>
                                                            <;:; sym level: 7 namespace:1>
                                                        <&relational_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:j sym level: 7 namespace:1>
                                                            <<:< sym level: 7 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <(:( sym level: 7 namespace:1>
                                                                <&postfix_expr ns:1>
                                                                    <&primary_expression ns:1>
                                                                        <identifier:paravec sym level: 7 namespace:1>
                                                                    <->:-> sym level: 7 namespace:1>
                                                                    <identifier:len sym level: 7 namespace:0>
                                                                <):) sym level: 7 namespace:1>
                                                        <;:; sym level: 7 namespace:1>
                                                        <&unary_expr ns:1>
                                                            <++:++ sym level: 7 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:j sym level: 7 namespace:1>
                                                        <):) sym level: 7 namespace:1>
                                                        <statement ns:1>
                                                            <compound_stmt ns:1>
                                                                <left_brace:{ sym level: 8 namespace:1>
                                                                <declaration ns:1>
                                                                    <&declaration_spec ns:1>
                                                                        <&type_spec ns:1>
                                                                            <&typedef_name ns:1>
                                                                                <identifier:TP_FUNC_PARA sym level: 8 namespace:1>
                                                                    <&init_decl_list ns:1>
                                                                        <&init_decl ns:1>
                                                                            <&declarator ns:1>
                                                                                <&pointer ns:1>
                                                                                    <*:* sym level: 8 namespace:1>
                                                                                <&direct_declarator ns:1>
                                                                                    <identifier:tmpfuncpara sym level: 8 namespace:1>
                                                                            <=:= sym level: 8 namespace:1>
                                                                            <&initializer ns:1>
                                                                                <&primary_expression ns:1>
                                                                                    <(:( sym level: 8 namespace:1>
                                                                                    <&conditional_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <(:( sym level: 8 namespace:1>
                                                                                            <&logical_and_expr ns:1>
                                                                                                <&equality_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:paravec sym level: 8 namespace:1>
                                                                                                    <!=:!= sym level: 8 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <integer_constant:0 sym level: 8 namespace:1>
                                                                                                <double_ampersand:&& sym level: 8 namespace:1>
                                                                                                <&relational_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:j sym level: 8 namespace:1>
                                                                                                    <<:< sym level: 8 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <(:( sym level: 8 namespace:1>
                                                                                                        <&postfix_expr ns:1>
                                                                                                            <&primary_expression ns:1>
                                                                                                                <identifier:paravec sym level: 8 namespace:1>
                                                                                                            <->:-> sym level: 8 namespace:1>
                                                                                                            <identifier:len sym level: 8 namespace:0>
                                                                                                        <):) sym level: 8 namespace:1>
                                                                                            <):) sym level: 8 namespace:1>
                                                                                        <?:? sym level: 8 namespace:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <(:( sym level: 8 namespace:1>
                                                                                            <&postfix_expr ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:paravec sym level: 8 namespace:1>
                                                                                                <->:-> sym level: 8 namespace:1>
                                                                                                <identifier:data sym level: 8 namespace:0>
                                                                                                <[:[ sym level: 8 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:j sym level: 8 namespace:1>
                                                                                                <]:] sym level: 8 namespace:1>
                                                                                            <):) sym level: 8 namespace:1>
                                                                                        <colon:: sym level: 8 namespace:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <integer_constant:0 sym level: 8 namespace:1>
                                                                                    <):) sym level: 8 namespace:1>
                                                                    <;:; sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <&for_stmt ns:1>
                                                                        <KW_for:for sym level: 9 namespace:1>
                                                                        <(:( sym level: 9 namespace:1>
                                                                        <declaration ns:1>
                                                                            <&declaration_spec ns:1>
                                                                                <&type_spec ns:1>
                                                                                    <KW_int:int sym level: 9 namespace:1>
                                                                            <&init_decl_list ns:1>
                                                                                <&init_decl ns:1>
                                                                                    <&declarator ns:1>
                                                                                        <&direct_declarator ns:1>
                                                                                            <identifier:k sym level: 9 namespace:1>
                                                                                    <=:= sym level: 9 namespace:1>
                                                                                    <&initializer ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <integer_constant:0 sym level: 9 namespace:1>
                                                                            <;:; sym level: 9 namespace:1>
                                                                        <&relational_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:k sym level: 9 namespace:1>
                                                                            <<=:<= sym level: 9 namespace:1>
                                                                            <&additive_expr ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:symbol_table sym level: 9 namespace:1>
                                                                                    <->:-> sym level: 9 namespace:1>
                                                                                    <identifier:level sym level: 9 namespace:0>
                                                                                <+:+ sym level: 9 namespace:1>
                                                                                <&primary_expression ns:1>
                                                                                    <integer_constant:4 sym level: 9 namespace:1>
                                                                        <;:; sym level: 9 namespace:1>
                                                                        <&unary_expr ns:1>
                                                                            <++:++ sym level: 9 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:k sym level: 9 namespace:1>
                                                                        <):) sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <compound_stmt ns:1>
                                                                                <left_brace:{ sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <expr_stmt ns:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:printf sym level: 10 namespace:1>
                                                                                            <(:( sym level: 10 namespace:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <string:"    " sym level: 10 namespace:1>
                                                                                            <):) sym level: 10 namespace:1>
                                                                                        <;:; sym level: 10 namespace:1>
                                                                                <right_brace:} sym level: 10 namespace:1>
                                                                <statement ns:1>
                                                                    <&if_stmt ns:1>
                                                                        <KW_if:if sym level: 9 namespace:1>
                                                                        <(:( sym level: 9 namespace:1>
                                                                        <&postfix_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:tmpfuncpara sym level: 9 namespace:1>
                                                                            <->:-> sym level: 9 namespace:1>
                                                                            <identifier:para_name sym level: 9 namespace:0>
                                                                        <):) sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <expr_stmt ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:printf sym level: 9 namespace:1>
                                                                                    <(:( sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <string:"%s\n" sym level: 9 namespace:1>
                                                                                    <,:, sym level: 9 namespace:1>
                                                                                    <&postfix_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <identifier:tmpfuncpara sym level: 9 namespace:1>
                                                                                        <->:-> sym level: 9 namespace:1>
                                                                                        <identifier:para_name sym level: 9 namespace:0>
                                                                                    <):) sym level: 9 namespace:1>
                                                                                <;:; sym level: 9 namespace:1>
                                                                        <KW_else:else sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <expr_stmt ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:printf sym level: 9 namespace:1>
                                                                                    <(:( sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <string:"(no parameter name)\n" sym level: 9 namespace:1>
                                                                                    <):) sym level: 9 namespace:1>
                                                                                <;:; sym level: 9 namespace:1>
                                                                <right_brace:} sym level: 8 namespace:1>
                                                <right_brace:} sym level: 6 namespace:1>
                                        <KW_else:else sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <&if_stmt ns:1>
                                                <KW_if:if sym level: 6 namespace:1>
                                                <(:( sym level: 6 namespace:1>
                                                <&logical_and_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:tmpt sym level: 6 namespace:1>
                                                    <double_ampersand:&& sym level: 6 namespace:1>
                                                    <&equality_expr ns:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:tmpt sym level: 6 namespace:1>
                                                            <->:-> sym level: 6 namespace:1>
                                                            <identifier:modifier sym level: 6 namespace:0>
                                                        <==:== sym level: 6 namespace:1>
                                                        <&primary_expression ns:1>
                                                            <integer_constant:0 sym level: 6 namespace:1>
                                                <):) sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <compound_stmt ns:1>
                                                        <left_brace:{ sym level: 7 namespace:1>
                                                        <statement ns:1>
                                                            <&if_stmt ns:1>
                                                                <KW_if:if sym level: 8 namespace:1>
                                                                <(:( sym level: 8 namespace:1>
                                                                <&logical_and_expr ns:1>
                                                                    <&equality_expr ns:1>
                                                                        <&postfix_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:tmp sym level: 8 namespace:1>
                                                                            <->:-> sym level: 8 namespace:1>
                                                                            <identifier:name_space sym level: 8 namespace:0>
                                                                        <==:== sym level: 8 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <integer_constant:2 sym level: 8 namespace:1>
                                                                    <double_ampersand:&& sym level: 8 namespace:1>
                                                                    <&primary_expression ns:1>
                                                                        <(:( sym level: 8 namespace:1>
                                                                        <&logical_or_expr ns:1>
                                                                            <&equality_expr ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:tmpt sym level: 8 namespace:1>
                                                                                    <->:-> sym level: 8 namespace:1>
                                                                                    <identifier:typ_category sym level: 8 namespace:0>
                                                                                <==:== sym level: 8 namespace:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:TP_UNION sym level: 8 namespace:1>
                                                                            <||:|| sym level: 8 namespace:1>
                                                                            <&equality_expr ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:tmpt sym level: 8 namespace:1>
                                                                                    <->:-> sym level: 8 namespace:1>
                                                                                    <identifier:typ_category sym level: 8 namespace:0>
                                                                                <==:== sym level: 8 namespace:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:TP_STRUCT sym level: 8 namespace:1>
                                                                        <):) sym level: 8 namespace:1>
                                                                <):) sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <compound_stmt ns:1>
                                                                        <left_brace:{ sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <&if_stmt ns:1>
                                                                                <KW_if:if sym level: 10 namespace:1>
                                                                                <(:( sym level: 10 namespace:1>
                                                                                <&equality_expr ns:1>
                                                                                    <&postfix_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <(:( sym level: 10 namespace:1>
                                                                                            <&cast_expr ns:1>
                                                                                                <(:( sym level: 10 namespace:1>
                                                                                                <&type_name ns:1>
                                                                                                    <&spec_qual_list ns:1>
                                                                                                        <&type_spec ns:1>
                                                                                                            <&typedef_name ns:1>
                                                                                                                <identifier:TP_SU sym level: 10 namespace:1>
                                                                                                    <&abstract_declarator ns:1>
                                                                                                        <&pointer ns:1>
                                                                                                            <*:* sym level: 10 namespace:1>
                                                                                                <):) sym level: 10 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:tmpt sym level: 10 namespace:1>
                                                                                            <):) sym level: 10 namespace:1>
                                                                                        <->:-> sym level: 10 namespace:1>
                                                                                        <identifier:members sym level: 10 namespace:0>
                                                                                    <==:== sym level: 10 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <integer_constant:0 sym level: 10 namespace:1>
                                                                                <):) sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <&continue_stmt ns:1>
                                                                                        <KW_continue:continue sym level: 10 namespace:1>
                                                                                        <;:; sym level: 10 namespace:1>
                                                                        <statement ns:1>
                                                                            <&for_stmt ns:1>
                                                                                <KW_for:for sym level: 10 namespace:1>
                                                                                <(:( sym level: 10 namespace:1>
                                                                                <declaration ns:1>
                                                                                    <&declaration_spec ns:1>
                                                                                        <&type_spec ns:1>
                                                                                            <KW_int:int sym level: 10 namespace:1>
                                                                                    <&init_decl_list ns:1>
                                                                                        <&init_decl ns:1>
                                                                                            <&declarator ns:1>
                                                                                                <&direct_declarator ns:1>
                                                                                                    <identifier:j sym level: 10 namespace:1>
                                                                                            <=:= sym level: 10 namespace:1>
                                                                                            <&initializer ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <integer_constant:0 sym level: 10 namespace:1>
                                                                                    <;:; sym level: 10 namespace:1>
                                                                                <&relational_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                    <<=:<= sym level: 10 namespace:1>
                                                                                    <&additive_expr ns:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:symbol_table sym level: 10 namespace:1>
                                                                                            <->:-> sym level: 10 namespace:1>
                                                                                            <identifier:level sym level: 10 namespace:0>
                                                                                        <+:+ sym level: 10 namespace:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <integer_constant:3 sym level: 10 namespace:1>
                                                                                <;:; sym level: 10 namespace:1>
                                                                                <&unary_expr ns:1>
                                                                                    <++:++ sym level: 10 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                <):) sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <compound_stmt ns:1>
                                                                                        <left_brace:{ sym level: 11 namespace:1>
                                                                                        <statement ns:1>
                                                                                            <expr_stmt ns:1>
                                                                                                <&postfix_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:printf sym level: 11 namespace:1>
                                                                                                    <(:( sym level: 11 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <string:"    " sym level: 11 namespace:1>
                                                                                                    <):) sym level: 11 namespace:1>
                                                                                                <;:; sym level: 11 namespace:1>
                                                                                        <right_brace:} sym level: 11 namespace:1>
                                                                        <statement ns:1>
                                                                            <expr_stmt ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:printf sym level: 9 namespace:1>
                                                                                    <(:( sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <string:"struct have %ld members are:\n" sym level: 9 namespace:1>
                                                                                    <,:, sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <(:( sym level: 9 namespace:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <(:( sym level: 9 namespace:1>
                                                                                                <&cast_expr ns:1>
                                                                                                    <(:( sym level: 9 namespace:1>
                                                                                                    <&type_name ns:1>
                                                                                                        <&spec_qual_list ns:1>
                                                                                                            <&type_spec ns:1>
                                                                                                                <&typedef_name ns:1>
                                                                                                                    <identifier:TP_SU sym level: 9 namespace:1>
                                                                                                        <&abstract_declarator ns:1>
                                                                                                            <&pointer ns:1>
                                                                                                                <*:* sym level: 9 namespace:1>
                                                                                                    <):) sym level: 9 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:tmpt sym level: 9 namespace:1>
                                                                                                <):) sym level: 9 namespace:1>
                                                                                            <->:-> sym level: 9 namespace:1>
                                                                                            <identifier:members sym level: 9 namespace:0>
                                                                                            <->:-> sym level: 9 namespace:1>
                                                                                            <identifier:len sym level: 9 namespace:0>
                                                                                        <):) sym level: 9 namespace:1>
                                                                                    <):) sym level: 9 namespace:1>
                                                                                <;:; sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <&for_stmt ns:1>
                                                                                <KW_for:for sym level: 10 namespace:1>
                                                                                <(:( sym level: 10 namespace:1>
                                                                                <declaration ns:1>
                                                                                    <&declaration_spec ns:1>
                                                                                        <&type_spec ns:1>
                                                                                            <&typedef_name ns:1>
                                                                                                <identifier:size_t sym level: 10 namespace:1>
                                                                                    <&init_decl_list ns:1>
                                                                                        <&init_decl ns:1>
                                                                                            <&declarator ns:1>
                                                                                                <&direct_declarator ns:1>
                                                                                                    <identifier:j sym level: 10 namespace:1>
                                                                                            <=:= sym level: 10 namespace:1>
                                                                                            <&initializer ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <integer_constant:0 sym level: 10 namespace:1>
                                                                                    <;:; sym level: 10 namespace:1>
                                                                                <&relational_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                    <<:< sym level: 10 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <(:( sym level: 10 namespace:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <(:( sym level: 10 namespace:1>
                                                                                                <&cast_expr ns:1>
                                                                                                    <(:( sym level: 10 namespace:1>
                                                                                                    <&type_name ns:1>
                                                                                                        <&spec_qual_list ns:1>
                                                                                                            <&type_spec ns:1>
                                                                                                                <&typedef_name ns:1>
                                                                                                                    <identifier:TP_SU sym level: 10 namespace:1>
                                                                                                        <&abstract_declarator ns:1>
                                                                                                            <&pointer ns:1>
                                                                                                                <*:* sym level: 10 namespace:1>
                                                                                                    <):) sym level: 10 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:tmpt sym level: 10 namespace:1>
                                                                                                <):) sym level: 10 namespace:1>
                                                                                            <->:-> sym level: 10 namespace:1>
                                                                                            <identifier:members sym level: 10 namespace:0>
                                                                                            <->:-> sym level: 10 namespace:1>
                                                                                            <identifier:len sym level: 10 namespace:0>
                                                                                        <):) sym level: 10 namespace:1>
                                                                                <;:; sym level: 10 namespace:1>
                                                                                <&unary_expr ns:1>
                                                                                    <++:++ sym level: 10 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                <):) sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <compound_stmt ns:1>
                                                                                        <left_brace:{ sym level: 11 namespace:1>
                                                                                        <declaration ns:1>
                                                                                            <&declaration_spec ns:1>
                                                                                                <&type_spec ns:1>
                                                                                                    <&typedef_name ns:1>
                                                                                                        <identifier:TP_SU_MEMBER sym level: 11 namespace:1>
                                                                                            <&init_decl_list ns:1>
                                                                                                <&init_decl ns:1>
                                                                                                    <&declarator ns:1>
                                                                                                        <&pointer ns:1>
                                                                                                            <*:* sym level: 11 namespace:1>
                                                                                                        <&direct_declarator ns:1>
                                                                                                            <identifier:tmpm sym level: 11 namespace:1>
                                                                                                    <=:= sym level: 11 namespace:1>
                                                                                                    <&initializer ns:1>
                                                                                                        <&primary_expression ns:1>
                                                                                                            <(:( sym level: 11 namespace:1>
                                                                                                            <&conditional_expr ns:1>
                                                                                                                <&primary_expression ns:1>
                                                                                                                    <(:( sym level: 11 namespace:1>
                                                                                                                    <&logical_and_expr ns:1>
                                                                                                                        <&equality_expr ns:1>
                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                <&primary_expression ns:1>
                                                                                                                                    <(:( sym level: 11 namespace:1>
                                                                                                                                    <&cast_expr ns:1>
                                                                                                                                        <(:( sym level: 11 namespace:1>
                                                                                                                                        <&type_name ns:1>
                                                                                                                                            <&spec_qual_list ns:1>
                                                                                                                                                <&type_spec ns:1>
                                                                                                                                                    <&typedef_name ns:1>
                                                                                                                                                        <identifier:TP_SU sym level: 11 namespace:1>
                                                                                                                                            <&abstract_declarator ns:1>
                                                                                                                                                <&pointer ns:1>
                                                                                                                                                    <*:* sym level: 11 namespace:1>
                                                                                                                                        <):) sym level: 11 namespace:1>
                                                                                                                                        <&primary_expression ns:1>
                                                                                                                                            <identifier:tmpt sym level: 11 namespace:1>
                                                                                                                                    <):) sym level: 11 namespace:1>
                                                                                                                                <->:-> sym level: 11 namespace:1>
                                                                                                                                <identifier:members sym level: 11 namespace:0>
                                                                                                                            <!=:!= sym level: 11 namespace:1>
                                                                                                                            <&primary_expression ns:1>
                                                                                                                                <integer_constant:0 sym level: 11 namespace:1>
                                                                                                                        <double_ampersand:&& sym level: 11 namespace:1>
                                                                                                                        <&relational_expr ns:1>
                                                                                                                            <&primary_expression ns:1>
                                                                                                                                <identifier:j sym level: 11 namespace:1>
                                                                                                                            <<:< sym level: 11 namespace:1>
                                                                                                                            <&primary_expression ns:1>
                                                                                                                                <(:( sym level: 11 namespace:1>
                                                                                                                                <&postfix_expr ns:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <(:( sym level: 11 namespace:1>
                                                                                                                                        <&cast_expr ns:1>
                                                                                                                                            <(:( sym level: 11 namespace:1>
                                                                                                                                            <&type_name ns:1>
                                                                                                                                                <&spec_qual_list ns:1>
                                                                                                                                                    <&type_spec ns:1>
                                                                                                                                                        <&typedef_name ns:1>
                                                                                                                                                            <identifier:TP_SU sym level: 11 namespace:1>
                                                                                                                                                <&abstract_declarator ns:1>
                                                                                                                                                    <&pointer ns:1>
                                                                                                                                                        <*:* sym level: 11 namespace:1>
                                                                                                                                            <):) sym level: 11 namespace:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <identifier:tmpt sym level: 11 namespace:1>
                                                                                                                                        <):) sym level: 11 namespace:1>
                                                                                                                                    <->:-> sym level: 11 namespace:1>
                                                                                                                                    <identifier:members sym level: 11 namespace:0>
                                                                                                                                    <->:-> sym level: 11 namespace:1>
                                                                                                                                    <identifier:len sym level: 11 namespace:0>
                                                                                                                                <):) sym level: 11 namespace:1>
                                                                                                                    <):) sym level: 11 namespace:1>
                                                                                                                <?:? sym level: 11 namespace:1>
                                                                                                                <&primary_expression ns:1>
                                                                                                                    <(:( sym level: 11 namespace:1>
                                                                                                                    <&postfix_expr ns:1>
                                                                                                                        <&primary_expression ns:1>
                                                                                                                            <(:( sym level: 11 namespace:1>
                                                                                                                            <&cast_expr ns:1>
                                                                                                                                <(:( sym level: 11 namespace:1>
                                                                                                                                <&type_name ns:1>
                                                                                                                                    <&spec_qual_list ns:1>
                                                                                                                                        <&type_spec ns:1>
                                                                                                                                            <&typedef_name ns:1>
                                                                                                                                                <identifier:TP_SU sym level: 11 namespace:1>
                                                                                                                                    <&abstract_declarator ns:1>
                                                                                                                                        <&pointer ns:1>
                                                                                                                                            <*:* sym level: 11 namespace:1>
                                                                                                                                <):) sym level: 11 namespace:1>
                                                                                                                                <&primary_expression ns:1>
                                                                                                                                    <identifier:tmpt sym level: 11 namespace:1>
                                                                                                                            <):) sym level: 11 namespace:1>
                                                                                                                        <->:-> sym level: 11 namespace:1>
                                                                                                                        <identifier:members sym level: 11 namespace:0>
                                                                                                                        <->:-> sym level: 11 namespace:1>
                                                                                                                        <identifier:data sym level: 11 namespace:0>
                                                                                                                        <[:[ sym level: 11 namespace:1>
                                                                                                                        <&primary_expression ns:1>
                                                                                                                            <identifier:j sym level: 11 namespace:1>
                                                                                                                        <]:] sym level: 11 namespace:1>
                                                                                                                    <):) sym level: 11 namespace:1>
                                                                                                                <colon:: sym level: 11 namespace:1>
                                                                                                                <&primary_expression ns:1>
                                                                                                                    <integer_constant:0 sym level: 11 namespace:1>
                                                                                                            <):) sym level: 11 namespace:1>
                                                                                            <;:; sym level: 11 namespace:1>
                                                                                        <statement ns:1>
                                                                                            <&if_stmt ns:1>
                                                                                                <KW_if:if sym level: 12 namespace:1>
                                                                                                <(:( sym level: 12 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:tmpm sym level: 12 namespace:1>
                                                                                                <):) sym level: 12 namespace:1>
                                                                                                <statement ns:1>
                                                                                                    <compound_stmt ns:1>
                                                                                                        <left_brace:{ sym level: 13 namespace:1>
                                                                                                        <statement ns:1>
                                                                                                            <&for_stmt ns:1>
                                                                                                                <KW_for:for sym level: 14 namespace:1>
                                                                                                                <(:( sym level: 14 namespace:1>
                                                                                                                <declaration ns:1>
                                                                                                                    <&declaration_spec ns:1>
                                                                                                                        <&type_spec ns:1>
                                                                                                                            <KW_int:int sym level: 14 namespace:1>
                                                                                                                    <&init_decl_list ns:1>
                                                                                                                        <&init_decl ns:1>
                                                                                                                            <&declarator ns:1>
                                                                                                                                <&direct_declarator ns:1>
                                                                                                                                    <identifier:k sym level: 14 namespace:1>
                                                                                                                            <=:= sym level: 14 namespace:1>
                                                                                                                            <&initializer ns:1>
                                                                                                                                <&primary_expression ns:1>
                                                                                                                                    <integer_constant:0 sym level: 14 namespace:1>
                                                                                                                    <;:; sym level: 14 namespace:1>
                                                                                                                <&relational_expr ns:1>
                                                                                                                    <&primary_expression ns:1>
                                                                                                                        <identifier:k sym level: 14 namespace:1>
                                                                                                                    <<=:<= sym level: 14 namespace:1>
                                                                                                                    <&additive_expr ns:1>
                                                                                                                        <&postfix_expr ns:1>
                                                                                                                            <&primary_expression ns:1>
                                                                                                                                <identifier:symbol_table sym level: 14 namespace:1>
                                                                                                                            <->:-> sym level: 14 namespace:1>
                                                                                                                            <identifier:level sym level: 14 namespace:0>
                                                                                                                        <+:+ sym level: 14 namespace:1>
                                                                                                                        <&primary_expression ns:1>
                                                                                                                            <integer_constant:4 sym level: 14 namespace:1>
                                                                                                                <;:; sym level: 14 namespace:1>
                                                                                                                <&unary_expr ns:1>
                                                                                                                    <++:++ sym level: 14 namespace:1>
                                                                                                                    <&primary_expression ns:1>
                                                                                                                        <identifier:k sym level: 14 namespace:1>
                                                                                                                <):) sym level: 14 namespace:1>
                                                                                                                <statement ns:1>
                                                                                                                    <compound_stmt ns:1>
                                                                                                                        <left_brace:{ sym level: 15 namespace:1>
                                                                                                                        <statement ns:1>
                                                                                                                            <expr_stmt ns:1>
                                                                                                                                <&postfix_expr ns:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <identifier:printf sym level: 15 namespace:1>
                                                                                                                                    <(:( sym level: 15 namespace:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <string:"    " sym level: 15 namespace:1>
                                                                                                                                    <):) sym level: 15 namespace:1>
                                                                                                                                <;:; sym level: 15 namespace:1>
                                                                                                                        <right_brace:} sym level: 15 namespace:1>
                                                                                                        <statement ns:1>
                                                                                                            <&if_stmt ns:1>
                                                                                                                <KW_if:if sym level: 14 namespace:1>
                                                                                                                <(:( sym level: 14 namespace:1>
                                                                                                                <&postfix_expr ns:1>
                                                                                                                    <&primary_expression ns:1>
                                                                                                                        <identifier:tmpm sym level: 14 namespace:1>
                                                                                                                    <->:-> sym level: 14 namespace:1>
                                                                                                                    <identifier:member_name sym level: 14 namespace:0>
                                                                                                                <):) sym level: 14 namespace:1>
                                                                                                                <statement ns:1>
                                                                                                                    <compound_stmt ns:1>
                                                                                                                        <left_brace:{ sym level: 15 namespace:1>
                                                                                                                        <statement ns:1>
                                                                                                                            <&if_stmt ns:1>
                                                                                                                                <KW_if:if sym level: 16 namespace:1>
                                                                                                                                <(:( sym level: 16 namespace:1>
                                                                                                                                <&postfix_expr ns:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                    <->:-> sym level: 16 namespace:1>
                                                                                                                                    <identifier:bit_field sym level: 16 namespace:0>
                                                                                                                                <):) sym level: 16 namespace:1>
                                                                                                                                <statement ns:1>
                                                                                                                                    <expr_stmt ns:1>
                                                                                                                                        <&postfix_expr ns:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <identifier:printf sym level: 16 namespace:1>
                                                                                                                                            <(:( sym level: 16 namespace:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <string:"< %s off:%ld bit_off:%ld bit_size:%ld >\n" sym level: 16 namespace:1>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:member_name sym level: 16 namespace:0>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:offset sym level: 16 namespace:0>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:bit_field_offset sym level: 16 namespace:0>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:bit_field_size sym level: 16 namespace:0>
                                                                                                                                            <):) sym level: 16 namespace:1>
                                                                                                                                        <;:; sym level: 16 namespace:1>
                                                                                                                                <KW_else:else sym level: 16 namespace:1>
                                                                                                                                <statement ns:1>
                                                                                                                                    <expr_stmt ns:1>
                                                                                                                                        <&postfix_expr ns:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <identifier:printf sym level: 16 namespace:1>
                                                                                                                                            <(:( sym level: 16 namespace:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <string:"< %s off:%ld >\n" sym level: 16 namespace:1>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:member_name sym level: 16 namespace:0>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:offset sym level: 16 namespace:0>
                                                                                                                                            <):) sym level: 16 namespace:1>
                                                                                                                                        <;:; sym level: 16 namespace:1>
                                                                                                                        <right_brace:} sym level: 15 namespace:1>
                                                                                                                <KW_else:else sym level: 14 namespace:1>
                                                                                                                <statement ns:1>
                                                                                                                    <compound_stmt ns:1>
                                                                                                                        <left_brace:{ sym level: 15 namespace:1>
                                                                                                                        <statement ns:1>
                                                                                                                            <&if_stmt ns:1>
                                                                                                                                <KW_if:if sym level: 16 namespace:1>
                                                                                                                                <(:( sym level: 16 namespace:1>
                                                                                                                                <&postfix_expr ns:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                    <->:-> sym level: 16 namespace:1>
                                                                                                                                    <identifier:bit_field sym level: 16 namespace:0>
                                                                                                                                <):) sym level: 16 namespace:1>
                                                                                                                                <statement ns:1>
                                                                                                                                    <expr_stmt ns:1>
                                                                                                                                        <&postfix_expr ns:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <identifier:printf sym level: 16 namespace:1>
                                                                                                                                            <(:( sym level: 16 namespace:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <string:"< anonymous member off:%ld bit_off:%ld bit_size:%ld >\n" sym level: 16 namespace:1>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:offset sym level: 16 namespace:0>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:bit_field_offset sym level: 16 namespace:0>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:bit_field_size sym level: 16 namespace:0>
                                                                                                                                            <):) sym level: 16 namespace:1>
                                                                                                                                        <;:; sym level: 16 namespace:1>
                                                                                                                                <KW_else:else sym level: 16 namespace:1>
                                                                                                                                <statement ns:1>
                                                                                                                                    <expr_stmt ns:1>
                                                                                                                                        <&postfix_expr ns:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <identifier:printf sym level: 16 namespace:1>
                                                                                                                                            <(:( sym level: 16 namespace:1>
                                                                                                                                            <&primary_expression ns:1>
                                                                                                                                                <string:"< anonymous member off:%ld >\n" sym level: 16 namespace:1>
                                                                                                                                            <,:, sym level: 16 namespace:1>
                                                                                                                                            <&postfix_expr ns:1>
                                                                                                                                                <&primary_expression ns:1>
                                                                                                                                                    <identifier:tmpm sym level: 16 namespace:1>
                                                                                                                                                <->:-> sym level: 16 namespace:1>
                                                                                                                                                <identifier:offset sym level: 16 namespace:0>
                                                                                                                                            <):) sym level: 16 namespace:1>
                                                                                                                                        <;:; sym level: 16 namespace:1>
                                                                                                                        <right_brace:} sym level: 15 namespace:1>
                                                                                                        <right_brace:} sym level: 13 namespace:1>
                                                                                        <right_brace:} sym level: 11 namespace:1>
                                                                        <statement ns:1>
                                                                            <&for_stmt ns:1>
                                                                                <KW_for:for sym level: 10 namespace:1>
                                                                                <(:( sym level: 10 namespace:1>
                                                                                <declaration ns:1>
                                                                                    <&declaration_spec ns:1>
                                                                                        <&type_spec ns:1>
                                                                                            <KW_int:int sym level: 10 namespace:1>
                                                                                    <&init_decl_list ns:1>
                                                                                        <&init_decl ns:1>
                                                                                            <&declarator ns:1>
                                                                                                <&direct_declarator ns:1>
                                                                                                    <identifier:j sym level: 10 namespace:1>
                                                                                            <=:= sym level: 10 namespace:1>
                                                                                            <&initializer ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <integer_constant:0 sym level: 10 namespace:1>
                                                                                    <;:; sym level: 10 namespace:1>
                                                                                <&relational_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                    <<=:<= sym level: 10 namespace:1>
                                                                                    <&additive_expr ns:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:symbol_table sym level: 10 namespace:1>
                                                                                            <->:-> sym level: 10 namespace:1>
                                                                                            <identifier:level sym level: 10 namespace:0>
                                                                                        <+:+ sym level: 10 namespace:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <integer_constant:3 sym level: 10 namespace:1>
                                                                                <;:; sym level: 10 namespace:1>
                                                                                <&unary_expr ns:1>
                                                                                    <++:++ sym level: 10 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                <):) sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <compound_stmt ns:1>
                                                                                        <left_brace:{ sym level: 11 namespace:1>
                                                                                        <statement ns:1>
                                                                                            <expr_stmt ns:1>
                                                                                                <&postfix_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:printf sym level: 11 namespace:1>
                                                                                                    <(:( sym level: 11 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <string:"    " sym level: 11 namespace:1>
                                                                                                    <):) sym level: 11 namespace:1>
                                                                                                <;:; sym level: 11 namespace:1>
                                                                                        <right_brace:} sym level: 11 namespace:1>
                                                                        <statement ns:1>
                                                                            <expr_stmt ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:printf sym level: 9 namespace:1>
                                                                                    <(:( sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <string:"total size:%ld align size:%ld\n" sym level: 9 namespace:1>
                                                                                    <,:, sym level: 9 namespace:1>
                                                                                    <&postfix_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <(:( sym level: 9 namespace:1>
                                                                                            <&cast_expr ns:1>
                                                                                                <(:( sym level: 9 namespace:1>
                                                                                                <&type_name ns:1>
                                                                                                    <&spec_qual_list ns:1>
                                                                                                        <&type_spec ns:1>
                                                                                                            <&typedef_name ns:1>
                                                                                                                <identifier:TP_SU sym level: 9 namespace:1>
                                                                                                    <&abstract_declarator ns:1>
                                                                                                        <&pointer ns:1>
                                                                                                            <*:* sym level: 9 namespace:1>
                                                                                                <):) sym level: 9 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:tmpt sym level: 9 namespace:1>
                                                                                            <):) sym level: 9 namespace:1>
                                                                                        <->:-> sym level: 9 namespace:1>
                                                                                        <identifier:total_data_size sym level: 9 namespace:0>
                                                                                    <,:, sym level: 9 namespace:1>
                                                                                    <&postfix_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <(:( sym level: 9 namespace:1>
                                                                                            <&cast_expr ns:1>
                                                                                                <(:( sym level: 9 namespace:1>
                                                                                                <&type_name ns:1>
                                                                                                    <&spec_qual_list ns:1>
                                                                                                        <&type_spec ns:1>
                                                                                                            <&typedef_name ns:1>
                                                                                                                <identifier:TP_SU sym level: 9 namespace:1>
                                                                                                    <&abstract_declarator ns:1>
                                                                                                        <&pointer ns:1>
                                                                                                            <*:* sym level: 9 namespace:1>
                                                                                                <):) sym level: 9 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:tmpt sym level: 9 namespace:1>
                                                                                            <):) sym level: 9 namespace:1>
                                                                                        <->:-> sym level: 9 namespace:1>
                                                                                        <identifier:data_align sym level: 9 namespace:0>
                                                                                    <):) sym level: 9 namespace:1>
                                                                                <;:; sym level: 9 namespace:1>
                                                                        <right_brace:} sym level: 9 namespace:1>
                                                        <statement ns:1>
                                                            <&if_stmt ns:1>
                                                                <KW_if:if sym level: 8 namespace:1>
                                                                <(:( sym level: 8 namespace:1>
                                                                <&equality_expr ns:1>
                                                                    <&postfix_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:tmpt sym level: 8 namespace:1>
                                                                        <->:-> sym level: 8 namespace:1>
                                                                        <identifier:typ_category sym level: 8 namespace:0>
                                                                    <==:== sym level: 8 namespace:1>
                                                                    <&primary_expression ns:1>
                                                                        <identifier:TP_ARRAY sym level: 8 namespace:1>
                                                                <):) sym level: 8 namespace:1>
                                                                <statement ns:1>
                                                                    <compound_stmt ns:1>
                                                                        <left_brace:{ sym level: 9 namespace:1>
                                                                        <statement ns:1>
                                                                            <&for_stmt ns:1>
                                                                                <KW_for:for sym level: 10 namespace:1>
                                                                                <(:( sym level: 10 namespace:1>
                                                                                <declaration ns:1>
                                                                                    <&declaration_spec ns:1>
                                                                                        <&type_spec ns:1>
                                                                                            <KW_int:int sym level: 10 namespace:1>
                                                                                    <&init_decl_list ns:1>
                                                                                        <&init_decl ns:1>
                                                                                            <&declarator ns:1>
                                                                                                <&direct_declarator ns:1>
                                                                                                    <identifier:j sym level: 10 namespace:1>
                                                                                            <=:= sym level: 10 namespace:1>
                                                                                            <&initializer ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <integer_constant:0 sym level: 10 namespace:1>
                                                                                    <;:; sym level: 10 namespace:1>
                                                                                <&relational_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                    <<=:<= sym level: 10 namespace:1>
                                                                                    <&additive_expr ns:1>
                                                                                        <&postfix_expr ns:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <identifier:symbol_table sym level: 10 namespace:1>
                                                                                            <->:-> sym level: 10 namespace:1>
                                                                                            <identifier:level sym level: 10 namespace:0>
                                                                                        <+:+ sym level: 10 namespace:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <integer_constant:3 sym level: 10 namespace:1>
                                                                                <;:; sym level: 10 namespace:1>
                                                                                <&unary_expr ns:1>
                                                                                    <++:++ sym level: 10 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:j sym level: 10 namespace:1>
                                                                                <):) sym level: 10 namespace:1>
                                                                                <statement ns:1>
                                                                                    <compound_stmt ns:1>
                                                                                        <left_brace:{ sym level: 11 namespace:1>
                                                                                        <statement ns:1>
                                                                                            <expr_stmt ns:1>
                                                                                                <&postfix_expr ns:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <identifier:printf sym level: 11 namespace:1>
                                                                                                    <(:( sym level: 11 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <string:"    " sym level: 11 namespace:1>
                                                                                                    <):) sym level: 11 namespace:1>
                                                                                                <;:; sym level: 11 namespace:1>
                                                                                        <right_brace:} sym level: 11 namespace:1>
                                                                        <statement ns:1>
                                                                            <expr_stmt ns:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:printf sym level: 9 namespace:1>
                                                                                    <(:( sym level: 9 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <string:"array len is: %zu\n" sym level: 9 namespace:1>
                                                                                    <,:, sym level: 9 namespace:1>
                                                                                    <&postfix_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <(:( sym level: 9 namespace:1>
                                                                                            <&cast_expr ns:1>
                                                                                                <(:( sym level: 9 namespace:1>
                                                                                                <&type_name ns:1>
                                                                                                    <&spec_qual_list ns:1>
                                                                                                        <&type_spec ns:1>
                                                                                                            <&typedef_name ns:1>
                                                                                                                <identifier:TP_ARR sym level: 9 namespace:1>
                                                                                                    <&abstract_declarator ns:1>
                                                                                                        <&pointer ns:1>
                                                                                                            <*:* sym level: 9 namespace:1>
                                                                                                <):) sym level: 9 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:tmpt sym level: 9 namespace:1>
                                                                                            <):) sym level: 9 namespace:1>
                                                                                        <->:-> sym level: 9 namespace:1>
                                                                                        <identifier:axis_size sym level: 9 namespace:0>
                                                                                    <):) sym level: 9 namespace:1>
                                                                                <;:; sym level: 9 namespace:1>
                                                                        <right_brace:} sym level: 9 namespace:1>
                                                        <right_brace:} sym level: 7 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <&for_stmt ns:1>
                        <KW_for:for sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <declaration ns:1>
                            <&declaration_spec ns:1>
                                <&type_spec ns:1>
                                    <&typedef_name ns:1>
                                        <identifier:size_t sym level: 3 namespace:1>
                            <&init_decl_list ns:1>
                                <&init_decl ns:1>
                                    <&declarator ns:1>
                                        <&direct_declarator ns:1>
                                            <identifier:i sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 3 namespace:1>
                            <;:; sym level: 3 namespace:1>
                        <&relational_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                            <<:< sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 3 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:symbol_table sym level: 3 namespace:1>
                                    <->:-> sym level: 3 namespace:1>
                                    <identifier:child_table sym level: 3 namespace:0>
                                    <->:-> sym level: 3 namespace:1>
                                    <identifier:len sym level: 3 namespace:0>
                                <):) sym level: 3 namespace:1>
                        <;:; sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <++:++ sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <declaration ns:1>
                                    <&declaration_spec ns:1>
                                        <&type_spec ns:1>
                                            <&typedef_name ns:1>
                                                <identifier:SYM sym level: 4 namespace:1>
                                    <&init_decl_list ns:1>
                                        <&init_decl ns:1>
                                            <&declarator ns:1>
                                                <&pointer ns:1>
                                                    <*:* sym level: 4 namespace:1>
                                                <&direct_declarator ns:1>
                                                    <identifier:child sym level: 4 namespace:1>
                                            <=:= sym level: 4 namespace:1>
                                            <&initializer ns:1>
                                                <&cast_expr ns:1>
                                                    <(:( sym level: 4 namespace:1>
                                                    <&type_name ns:1>
                                                        <&spec_qual_list ns:1>
                                                            <&type_spec ns:1>
                                                                <&typedef_name ns:1>
                                                                    <identifier:SYM sym level: 4 namespace:1>
                                                        <&abstract_declarator ns:1>
                                                            <&pointer ns:1>
                                                                <*:* sym level: 4 namespace:1>
                                                    <):) sym level: 4 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 4 namespace:1>
                                                        <&conditional_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <(:( sym level: 4 namespace:1>
                                                                <&logical_and_expr ns:1>
                                                                    <&equality_expr ns:1>
                                                                        <&postfix_expr ns:1>
                                                                            <&primary_expression ns:1>
                                                                                <identifier:symbol_table sym level: 4 namespace:1>
                                                                            <->:-> sym level: 4 namespace:1>
                                                                            <identifier:child_table sym level: 4 namespace:0>
                                                                        <!=:!= sym level: 4 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <integer_constant:0 sym level: 4 namespace:1>
                                                                    <double_ampersand:&& sym level: 4 namespace:1>
                                                                    <&relational_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:i sym level: 4 namespace:1>
                                                                        <<:< sym level: 4 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <(:( sym level: 4 namespace:1>
                                                                            <&postfix_expr ns:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:symbol_table sym level: 4 namespace:1>
                                                                                <->:-> sym level: 4 namespace:1>
                                                                                <identifier:child_table sym level: 4 namespace:0>
                                                                                <->:-> sym level: 4 namespace:1>
                                                                                <identifier:len sym level: 4 namespace:0>
                                                                            <):) sym level: 4 namespace:1>
                                                                <):) sym level: 4 namespace:1>
                                                            <?:? sym level: 4 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <(:( sym level: 4 namespace:1>
                                                                <&postfix_expr ns:1>
                                                                    <&primary_expression ns:1>
                                                                        <identifier:symbol_table sym level: 4 namespace:1>
                                                                    <->:-> sym level: 4 namespace:1>
                                                                    <identifier:child_table sym level: 4 namespace:0>
                                                                    <->:-> sym level: 4 namespace:1>
                                                                    <identifier:data sym level: 4 namespace:0>
                                                                    <[:[ sym level: 4 namespace:1>
                                                                    <&primary_expression ns:1>
                                                                        <identifier:i sym level: 4 namespace:1>
                                                                    <]:] sym level: 4 namespace:1>
                                                                <):) sym level: 4 namespace:1>
                                                            <colon:: sym level: 4 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <integer_constant:0 sym level: 4 namespace:1>
                                                        <):) sym level: 4 namespace:1>
                                    <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&if_stmt ns:1>
                                        <KW_if:if sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <&equality_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:child sym level: 5 namespace:1>
                                            <!=:!= sym level: 5 namespace:1>
                                            <&primary_expression ns:1>
                                                <integer_constant:0 sym level: 5 namespace:1>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <expr_stmt ns:1>
                                                <&postfix_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:print_symbol_table sym level: 5 namespace:1>
                                                    <(:( sym level: 5 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <identifier:child sym level: 5 namespace:1>
                                                    <):) sym level: 5 namespace:1>
                                                <;:; sym level: 5 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&typedef_name ns:1>
                        <identifier:VEC sym level: 1 namespace:1>
            <&declarator ns:1>
                <&pointer ns:1>
                    <*:* sym level: 1 namespace:1>
                <&direct_declarator ns:1>
                    <identifier:get_symbol_hash sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:HASH sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:h sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:VEC sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:symbol_vec sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:InitVEC sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:3 sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <&typedef_name ns:1>
                                <identifier:SYM_ITEM sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&pointer ns:1>
                                    <*:* sym level: 2 namespace:1>
                                <&direct_declarator ns:1>
                                    <identifier:tmp sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&for_stmt ns:1>
                        <KW_for:for sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <declaration ns:1>
                            <&declaration_spec ns:1>
                                <&type_spec ns:1>
                                    <&typedef_name ns:1>
                                        <identifier:size_t sym level: 3 namespace:1>
                            <&init_decl_list ns:1>
                                <&init_decl ns:1>
                                    <&declarator ns:1>
                                        <&direct_declarator ns:1>
                                            <identifier:i sym level: 3 namespace:1>
                                    <=:= sym level: 3 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:0 sym level: 3 namespace:1>
                            <;:; sym level: 3 namespace:1>
                        <&relational_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                            <<:< sym level: 3 namespace:1>
                            <&postfix_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:h sym level: 3 namespace:1>
                                <->:-> sym level: 3 namespace:1>
                                <identifier:capicity sym level: 3 namespace:0>
                        <;:; sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <++:++ sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:i sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&if_stmt ns:1>
                                        <KW_if:if sym level: 5 namespace:1>
                                        <(:( sym level: 5 namespace:1>
                                        <&primary_expression ns:1>
                                            <(:( sym level: 5 namespace:1>
                                            <&postfix_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:h sym level: 5 namespace:1>
                                                <->:-> sym level: 5 namespace:1>
                                                <identifier:data sym level: 5 namespace:0>
                                                <[:[ sym level: 5 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:i sym level: 5 namespace:1>
                                                <]:] sym level: 5 namespace:1>
                                            <):) sym level: 5 namespace:1>
                                        <):) sym level: 5 namespace:1>
                                        <statement ns:1>
                                            <compound_stmt ns:1>
                                                <left_brace:{ sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <expr_stmt ns:1>
                                                        <&assignment_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:tmp sym level: 6 namespace:1>
                                                            <=:= sym level: 6 namespace:1>
                                                            <&cast_expr ns:1>
                                                                <(:( sym level: 6 namespace:1>
                                                                <&type_name ns:1>
                                                                    <&spec_qual_list ns:1>
                                                                        <&type_spec ns:1>
                                                                            <&typedef_name ns:1>
                                                                                <identifier:SYM_ITEM sym level: 6 namespace:1>
                                                                    <&abstract_declarator ns:1>
                                                                        <&pointer ns:1>
                                                                            <*:* sym level: 6 namespace:1>
                                                                <):) sym level: 6 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <(:( sym level: 6 namespace:1>
                                                                    <&conditional_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <(:( sym level: 6 namespace:1>
                                                                            <&relational_expr ns:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:i sym level: 6 namespace:1>
                                                                                <<:< sym level: 6 namespace:1>
                                                                                <&postfix_expr ns:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <identifier:h sym level: 6 namespace:1>
                                                                                    <->:-> sym level: 6 namespace:1>
                                                                                    <identifier:capicity sym level: 6 namespace:0>
                                                                            <):) sym level: 6 namespace:1>
                                                                        <?:? sym level: 6 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <(:( sym level: 6 namespace:1>
                                                                            <&postfix_expr ns:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:h sym level: 6 namespace:1>
                                                                                <->:-> sym level: 6 namespace:1>
                                                                                <identifier:data sym level: 6 namespace:0>
                                                                                <[:[ sym level: 6 namespace:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:i sym level: 6 namespace:1>
                                                                                <]:] sym level: 6 namespace:1>
                                                                            <):) sym level: 6 namespace:1>
                                                                        <colon:: sym level: 6 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <integer_constant:0 sym level: 6 namespace:1>
                                                                    <):) sym level: 6 namespace:1>
                                                        <;:; sym level: 6 namespace:1>
                                                <statement ns:1>
                                                    <expr_stmt ns:1>
                                                        <&postfix_expr ns:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:VECinsert sym level: 6 namespace:1>
                                                            <(:( sym level: 6 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:symbol_vec sym level: 6 namespace:1>
                                                            <,:, sym level: 6 namespace:1>
                                                            <&cast_expr ns:1>
                                                                <(:( sym level: 6 namespace:1>
                                                                <&type_name ns:1>
                                                                    <&spec_qual_list ns:1>
                                                                        <&type_spec ns:1>
                                                                            <KW_void:void sym level: 6 namespace:1>
                                                                    <&abstract_declarator ns:1>
                                                                        <&pointer ns:1>
                                                                            <*:* sym level: 6 namespace:1>
                                                                <):) sym level: 6 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:tmp sym level: 6 namespace:1>
                                                            <):) sym level: 6 namespace:1>
                                                        <;:; sym level: 6 namespace:1>
                                                <right_brace:} sym level: 6 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:symbol_vec sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_unsigned:unsigned sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_long:long sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:SymbolCharToKey sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:symbol sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <&typedef_name ns:1>
                                            <identifier:NMSP sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:name_space sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&unary_expr ns:1>
                            <!:! sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:symbol sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:name_space sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_unsigned:unsigned sym level: 2 namespace:1>
                        <&type_spec ns:1>
                            <KW_long:long sym level: 2 namespace:1>
                        <&type_spec ns:1>
                            <KW_long:long sym level: 2 namespace:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:res sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <identifier:name_space sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&while_stmt ns:1>
                        <KW_while:while sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&equality_expr ns:1>
                            <&unary_expr ns:1>
                                <*:* sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:symbol sym level: 3 namespace:1>
                            <!=:!= sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <char_const:'\0' sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:res sym level: 4 namespace:1>
                                            <=:*= sym level: 4 namespace:1>
                                            <&multi_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:res sym level: 4 namespace:1>
                                                <*:*= sym level: 4 namespace:1>
                                                <&primary_expression ns:1>
                                                    <integer_constant:26 sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&assignment_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:res sym level: 4 namespace:1>
                                            <=:+= sym level: 4 namespace:1>
                                            <&additive_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:res sym level: 4 namespace:1>
                                                <+:+= sym level: 4 namespace:1>
                                                <&additive_expr ns:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 4 namespace:1>
                                                        <&unary_expr ns:1>
                                                            <*:* sym level: 4 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <identifier:symbol sym level: 4 namespace:1>
                                                        <):) sym level: 4 namespace:1>
                                                    <-:- sym level: 4 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <char_const:'\0' sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <statement ns:1>
                                    <expr_stmt ns:1>
                                        <&postfix_expr ns:1>
                                            <&primary_expression ns:1>
                                                <identifier:symbol sym level: 4 namespace:1>
                                            <++:++ sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <identifier:res sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW__Bool:_Bool sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:symbol_item_cmp sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:a sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:b sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_and_expr ns:1>
                            <&equality_expr ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <(:( sym level: 3 namespace:1>
                                        <&cast_expr ns:1>
                                            <(:( sym level: 3 namespace:1>
                                            <&type_name ns:1>
                                                <&spec_qual_list ns:1>
                                                    <&type_spec ns:1>
                                                        <&typedef_name ns:1>
                                                            <identifier:SYM_ITEM sym level: 3 namespace:1>
                                                <&abstract_declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 3 namespace:1>
                                            <):) sym level: 3 namespace:1>
                                            <&primary_expression ns:1>
                                                <identifier:a sym level: 3 namespace:1>
                                        <):) sym level: 3 namespace:1>
                                    <->:-> sym level: 3 namespace:1>
                                    <identifier:name_space sym level: 3 namespace:0>
                                <==:== sym level: 3 namespace:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <(:( sym level: 3 namespace:1>
                                        <&cast_expr ns:1>
                                            <(:( sym level: 3 namespace:1>
                                            <&type_name ns:1>
                                                <&spec_qual_list ns:1>
                                                    <&type_spec ns:1>
                                                        <&typedef_name ns:1>
                                                            <identifier:SYM_ITEM sym level: 3 namespace:1>
                                                <&abstract_declarator ns:1>
                                                    <&pointer ns:1>
                                                        <*:* sym level: 3 namespace:1>
                                            <):) sym level: 3 namespace:1>
                                            <&primary_expression ns:1>
                                                <identifier:b sym level: 3 namespace:1>
                                        <):) sym level: 3 namespace:1>
                                    <->:-> sym level: 3 namespace:1>
                                    <identifier:name_space sym level: 3 namespace:0>
                            <double_ampersand:&& sym level: 3 namespace:1>
                            <&equality_expr ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:strcmp sym level: 3 namespace:1>
                                    <(:( sym level: 3 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <(:( sym level: 3 namespace:1>
                                            <&cast_expr ns:1>
                                                <(:( sym level: 3 namespace:1>
                                                <&type_name ns:1>
                                                    <&spec_qual_list ns:1>
                                                        <&type_spec ns:1>
                                                            <&typedef_name ns:1>
                                                                <identifier:SYM_ITEM sym level: 3 namespace:1>
                                                    <&abstract_declarator ns:1>
                                                        <&pointer ns:1>
                                                            <*:* sym level: 3 namespace:1>
                                                <):) sym level: 3 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:a sym level: 3 namespace:1>
                                            <):) sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:value sym level: 3 namespace:0>
                                    <,:, sym level: 3 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <(:( sym level: 3 namespace:1>
                                            <&cast_expr ns:1>
                                                <(:( sym level: 3 namespace:1>
                                                <&type_name ns:1>
                                                    <&spec_qual_list ns:1>
                                                        <&type_spec ns:1>
                                                            <&typedef_name ns:1>
                                                                <identifier:SYM_ITEM sym level: 3 namespace:1>
                                                    <&abstract_declarator ns:1>
                                                        <&pointer ns:1>
                                                            <*:* sym level: 3 namespace:1>
                                                <):) sym level: 3 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:b sym level: 3 namespace:1>
                                            <):) sym level: 3 namespace:1>
                                        <->:-> sym level: 3 namespace:1>
                                        <identifier:value sym level: 3 namespace:0>
                                    <):) sym level: 3 namespace:1>
                                <==:== sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <statement ns:1>
                                    <&return_stmt ns:1>
                                        <KW_return:return sym level: 4 namespace:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:1 sym level: 4 namespace:1>
                                        <;:; sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                        <KW_else:else sym level: 3 namespace:1>
                        <statement ns:1>
                            <&return_stmt ns:1>
                                <KW_return:return sym level: 3 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:0 sym level: 3 namespace:1>
                                <;:; sym level: 3 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start declaration line:26
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:28
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:29
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:31
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                    start struct union
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                            start array
                                start primary expr
                                <Type>:< signed_int >
                                end primary expr
                            finish array
                        finish declarator
                    finish struct union
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:41
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:46
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:48
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:54
        start specify or qualify node
        finish specify or qualify node
    finish declaration
    start declaration line:55
        start specify or qualify node
        finish specify or qualify node
    finish declaration
    start declaration line:56
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:57
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:58
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start add
                            start mul
                                start primary expr
                                <Type>:< signed_int >
                                end primary expr
                                start unary
                                    start specify or qualify node
                                    finish specify or qualify node
                                <Type>:< signed_int >
                                end unary
                            <Type>:< signed_int >
                            end mul
                            start mul
                                start primary expr
                                <Type>:< signed_int >
                                end primary expr
                                start unary
                                    start specify or qualify node
                                    finish specify or qualify node
                                <Type>:< signed_int >
                                end unary
                            <Type>:< signed_int >
                            end mul
                            start unary
                                start primary expr
                                    start primary expr
                                    <Type>:< unsigned_long >
                                    end primary expr
                                <Type>:< unsigned_long >
                                end primary expr
                            <Type>:< signed_int >
                            end unary
                        <Type>:< signed_int >
                        end add
                    finish array
                finish declarator
            finish struct union
        finish specify or qualify node
    finish declaration
    start declaration line:102
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:104
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:106
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:108
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:110
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:112
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:114
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:117
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:121
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:124
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:128
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:131
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:134
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:136
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:138
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:141
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:144
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:147
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:150
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:152
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:155
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:157
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:159
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:161
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:163
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:165
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:167
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:171
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:175
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:178
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:180
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:182
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:184
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:186
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:188
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:190
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:192
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:194
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:197
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:200
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:202
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:204
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:210
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:212
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:214
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:216
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:218
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:219
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:231
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:240
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:241
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:242
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:243
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:244
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:245
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:246
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:247
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:249
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:250
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:251
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:252
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:253
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:254
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:255
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:256
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:258
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:259
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:260
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:261
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:262
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:263
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:264
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:265
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:267
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:268
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:270
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:274
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:275
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:276
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:282
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:284
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                    start struct union
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                            start array
                                start primary expr
                                <Type>:< signed_int >
                                end primary expr
                            finish array
                        finish declarator
                    finish struct union
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:297
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:302
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:307
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:312
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:319
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:321
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:323
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:325
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:327
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:329
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:334
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:339
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:344
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:349
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:352
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:355
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start specify or qualify node
                    finish specify or qualify node
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:358
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:360
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start equal expr
                start primary expr
                <Type>:< unsigned_long >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end equal expr
            start return expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            end return stmt
        end if stmt
        start while expr
            start equal expr
                start mul
                    start primary expr
                    <Type>:< unsigned_long >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< unsigned_long >
                end mul
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end equal expr
            start compound expr
                start expr expr
                    start assignment expr
                        start primary expr
                        <Type>:< unsigned_long >
                        end primary expr
                        start mul
                            start primary expr
                            <Type>:< unsigned_long >
                            end primary expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< unsigned_long >
                        end mul
                    <Type>:< unsigned_long >
                    end assignment expr
                end comopound stmt
            end while stmt
            start if expr
                start equal expr
                    start primary expr
                    <Type>:< unsigned_long >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< signed_int >
                end equal expr
                start return expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                end return stmt
                start return expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                end return stmt
            end if stmt
        end comopound stmt
    start declaration line:389
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:509
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:510
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:515
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:522
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                    finish array
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:523
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:524
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:526
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                    finish array
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:527
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                    finish array
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:528
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:529
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:531
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start expr expr
            start assignment expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< signed_int >
                end postfix expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end assignment expr
            start expr expr
                start assignment expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< point , signed_char >
                    end postfix expr
                    start primary expr
                    <Type>:< point , signed_char >
                    end primary expr
                <Type>:< point , signed_char >
                end assignment expr
                start expr expr
                    start assignment expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< unsigned_int >
                        end postfix expr
                        start primary expr
                        <Type>:< unsigned_int >
                        end primary expr
                    <Type>:< unsigned_int >
                    end assignment expr
                    start expr expr
                        start assignment expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< point , signed_char >
                            end postfix expr
                            start primary expr
                            <Type>:< point , signed_char >
                            end primary expr
                        <Type>:< point , signed_char >
                        end assignment expr
                        start return expr
                            start cast
                                start specify or qualify node
                                finish specify or qualify node
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< point , void >
                            end cast
                        end return stmt
                    end comopound stmt
    start declaration line:548
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:559
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                    finish array
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:565
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:568
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:569
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start expr expr
            start postfix expr
                start primary expr
                <Type>:< function , point , extern , void >
                end primary expr
                start primary expr
                <Type>:< point , void >
                end primary expr
                start primary expr
                <Type>:< signed_char >
                end primary expr
                start primary expr
                <Type>:< unsigned_long >
                end primary expr
            <Type>:< point , extern , void >
            end postfix expr
        end comopound stmt
    start declaration line:579
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:583
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:584
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:588
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:596
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start return expr
            start mul
                start primary expr
                <Type>:< unsigned_long_long_int >
                end primary expr
                start primary expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_long_long_int >
                    end postfix expr
                <Type>:< unsigned_long_long_int >
                end primary expr
            <Type>:< unsigned_long_long_int >
            end mul
        end return stmt
    end comopound stmt
    start declaration line:603
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:604
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start func
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                    finish func
                    start declarator
                    finish declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:605
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start func
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                    finish func
                    start declarator
                    finish declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:606
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start func
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                    finish func
                    start declarator
                    finish declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:607
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start func
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                    finish func
                    start declarator
                    finish declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:608
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start func
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                    finish func
                    start declarator
                    finish declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:610
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:611
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
            finish func
        finish declarator
    finish declaration
    start declaration line:619
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:629
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:630
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:631
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:632
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:633
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:634
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:635
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start logical and expr
                start unary
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< signed_int >
                end unary
                start unary
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< signed_int >
                end unary
            <Type>:< signed_int >
            end logical and expr
            start return expr
            end return stmt
        end if stmt
        start for expr
            start declaration line:639
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start primary expr
                <Type>:< signed_int >
                end primary expr
            finish declaration
            start relation expr
                start primary expr
                <Type>:< unsigned_long >
                end primary expr
                start primary expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_long >
                    end postfix expr
                <Type>:< unsigned_long >
                end primary expr
            <Type>:< signed_int >
            end relation expr
            start unary
                start primary expr
                <Type>:< unsigned_long >
                end primary expr
            <Type>:< unsigned_long >
            end unary
            start compound expr
                start expr expr
                    start postfix expr
                        start primary expr
                        <Type>:< function , void >
                        end primary expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                        start primary expr
                            start condition expr
                                start primary expr
                                    start logical and expr
                                        start equal expr
                                            start primary expr
                                            <Type>:< point , struct >
                                            end primary expr
                                            start primary expr
                                            <Type>:< signed_int >
                                            end primary expr
                                        <Type>:< signed_int >
                                        end equal expr
                                        start relation expr
                                            start primary expr
                                            <Type>:< unsigned_long >
                                            end primary expr
                                            start primary expr
                                                start postfix expr
                                                    start primary expr
                                                    <Type>:< point , struct >
                                                    end primary expr
                                                <Type>:< unsigned_long >
                                                end postfix expr
                                            <Type>:< unsigned_long >
                                            end primary expr
                                        <Type>:< signed_int >
                                        end relation expr
                                    <Type>:< signed_int >
                                    end logical and expr
                                <Type>:< signed_int >
                                end primary expr
                                start primary expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                        start primary expr
                                        <Type>:< unsigned_long >
                                        end primary expr
                                    <Type>:< point , void >
                                    end postfix expr
                                <Type>:< point , void >
                                end primary expr
                                start primary expr
                                <Type>:< signed_int >
                                end primary expr
                            <Type>:< point , void >
                            end condition expr
                        <Type>:< point , void >
                        end primary expr
                    <Type>:< void >
                    end postfix expr
                end comopound stmt
            end for stmt
        end comopound stmt
    start declaration line:643
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:648
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:658
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:695
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                    start struct union
                        start specify or qualify node
                            start struct union
                                start specify or qualify node
                                finish specify or qualify node
                                start declarator
                                finish declarator
                                start specify or qualify node
                                finish specify or qualify node
                                start declarator
                                finish declarator
                                start specify or qualify node
                                finish specify or qualify node
                                start declarator
                                finish declarator
                                start specify or qualify node
                                finish specify or qualify node
                                start declarator
                                finish declarator
                            finish struct union
                        finish specify or qualify node
                        start specify or qualify node
                            start struct union
                                start specify or qualify node
                                finish specify or qualify node
                                start declarator
                                finish declarator
                                start specify or qualify node
                                finish specify or qualify node
                                start declarator
                                finish declarator
                            finish struct union
                        finish specify or qualify node
                    finish struct union
                finish specify or qualify node
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:711
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:723
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:733
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                    start struct union
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                        start specify or qualify node
                        finish specify or qualify node
                        start declarator
                        finish declarator
                    finish struct union
                finish specify or qualify node
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:746
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:754
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:763
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:768
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:775
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:796
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:801
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                    start array
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    finish array
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:807
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:810
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:811
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:813
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:817
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:818
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:819
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:820
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:821
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:822
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:823
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:824
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:825
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:826
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:827
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:828
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:829
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:831
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:832
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:833
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:834
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:835
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:837
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:838
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:839
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:840
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:841
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:842
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:845
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:846
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:847
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:850
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:854
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:857
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:860
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:863
        start specify or qualify node
            start enum
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:869
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:870
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
    finish declaration
    start declaration line:883
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:895
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:899
        start specify or qualify node
            start struct union
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish struct union
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start declaration line:903
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:904
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:905
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:906
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:907
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:908
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:909
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:910
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:911
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:912
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:913
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start declaration line:914
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
            finish func
        finish declarator
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start unary
                start primary expr
                <Type>:< point , struct >
                end primary expr
            <Type>:< signed_int >
            end unary
            start return expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            end return stmt
        end if stmt
        start if expr
            start unary
                start primary expr
                <Type>:< point , struct >
                end primary expr
            <Type>:< signed_int >
            end unary
            start expr expr
                start assignment expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                    start postfix expr
                        start primary expr
                        <Type>:< function , point , void >
                        end primary expr
                        start unary
                            start specify or qualify node
                            finish specify or qualify node
                        <Type>:< signed_int >
                        end unary
                    <Type>:< point , void >
                    end postfix expr
                <Type>:< point , struct >
                end assignment expr
            end if stmt
            start expr expr
                start assignment expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_int >
                    end postfix expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_int >
                    end postfix expr
                <Type>:< unsigned_int >
                end assignment expr
                start expr expr
                    start assignment expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< point , struct >
                        end postfix expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< point , struct >
                        end postfix expr
                    <Type>:< point , struct >
                    end assignment expr
                    start expr expr
                        start assignment expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< unsigned_long >
                            end postfix expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< unsigned_long >
                            end postfix expr
                        <Type>:< unsigned_long >
                        end assignment expr
                        start expr expr
                            start assignment expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                <Type>:< bool >
                                end postfix expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                <Type>:< bool >
                                end postfix expr
                            <Type>:< bool >
                            end assignment expr
                            start expr expr
                                start assignment expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< bool >
                                    end postfix expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< bool >
                                    end postfix expr
                                <Type>:< bool >
                                end assignment expr
                                start expr expr
                                    start assignment expr
                                        start postfix expr
                                            start primary expr
                                            <Type>:< point , struct >
                                            end primary expr
                                        <Type>:< unsigned_long_long_int >
                                        end postfix expr
                                        start postfix expr
                                            start primary expr
                                            <Type>:< point , struct >
                                            end primary expr
                                        <Type>:< unsigned_long_long_int >
                                        end postfix expr
                                    <Type>:< unsigned_long_long_int >
                                    end assignment expr
                                    start expr expr
                                        start assignment expr
                                            start postfix expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                            <Type>:< signed_int >
                                            end postfix expr
                                            start postfix expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                            <Type>:< signed_int >
                                            end postfix expr
                                        <Type>:< signed_int >
                                        end assignment expr
                                        start expr expr
                                            start assignment expr
                                                start postfix expr
                                                    start primary expr
                                                    <Type>:< point , struct >
                                                    end primary expr
                                                <Type>:< unsigned_int >
                                                end postfix expr
                                                start postfix expr
                                                    start primary expr
                                                    <Type>:< point , struct >
                                                    end primary expr
                                                <Type>:< unsigned_int >
                                                end postfix expr
                                            <Type>:< unsigned_int >
                                            end assignment expr
                                            start expr expr
                                                start assignment expr
                                                    start postfix expr
                                                        start primary expr
                                                        <Type>:< point , struct >
                                                        end primary expr
                                                    <Type>:< point , struct >
                                                    end postfix expr
                                                    start postfix expr
                                                        start primary expr
                                                        <Type>:< point , struct >
                                                        end primary expr
                                                    <Type>:< point , struct >
                                                    end postfix expr
                                                <Type>:< point , struct >
                                                end assignment expr
                                                start expr expr
                                                    start assignment expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< point , signed_char >
                                                        end postfix expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< point , signed_char >
                                                        end postfix expr
                                                    <Type>:< point , signed_char >
                                                    end assignment expr
                                                    start return expr
                                                        start primary expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                    end return stmt
                                                end comopound stmt
    start declaration line:933
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start array
                start primary expr
                <Type>:< signed_int >
                end primary expr
            finish array
        finish declarator
        start primary expr
        <Type>:< point , signed_char >
        end primary expr
        start primary expr
        <Type>:< point , signed_char >
        end primary expr
        start primary expr
        <Type>:< point , signed_char >
        end primary expr
        start primary expr
        <Type>:< point , signed_char >
        end primary expr
        start primary expr
        <Type>:< point , signed_char >
        end primary expr
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start declaration line:941
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start cast
                start specify or qualify node
                finish specify or qualify node
                start postfix expr
                    start primary expr
                    <Type>:< function , point , void >
                    end primary expr
                    start unary
                        start primary expr
                            start primary expr
                            <Type>:< struct >
                            end primary expr
                        <Type>:< struct >
                        end primary expr
                    <Type>:< signed_int >
                    end unary
                <Type>:< point , void >
                end postfix expr
            <Type>:< point , struct >
            end cast
        finish declaration
        start expr expr
            start assignment expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
            <Type>:< point , struct >
            end assignment expr
            start if expr
                start equal expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< signed_int >
                end equal expr
                start compound expr
                    start expr expr
                        start postfix expr
                            start primary expr
                            <Type>:< function , void >
                            end primary expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< point , struct >
                            end postfix expr
                            start cast
                                start specify or qualify node
                                finish specify or qualify node
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< point , void >
                            end cast
                        <Type>:< void >
                        end postfix expr
                    end comopound stmt
                end if stmt
                start if expr
                    start equal expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    <Type>:< signed_int >
                    end equal expr
                    start expr expr
                        start assignment expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< unsigned_int >
                            end postfix expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< unsigned_int >
                        end assignment expr
                        start expr expr
                            start assignment expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                <Type>:< unsigned_int >
                                end postfix expr
                                start add
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< unsigned_int >
                                    end postfix expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                <Type>:< unsigned_int >
                                end add
                            <Type>:< unsigned_int >
                            end assignment expr
                        end if stmt
                        start expr expr
                            start assignment expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                <Type>:< point , struct >
                                end postfix expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< function , point , struct >
                                    end primary expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                <Type>:< point , struct >
                                end postfix expr
                            <Type>:< point , struct >
                            end assignment expr
                            start expr expr
                                start assignment expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< point , struct >
                                    end postfix expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< function , point , struct >
                                        end primary expr
                                    <Type>:< point , struct >
                                    end postfix expr
                                <Type>:< point , struct >
                                end assignment expr
                                start expr expr
                                    start assignment expr
                                        start postfix expr
                                            start primary expr
                                            <Type>:< point , struct >
                                            end primary expr
                                        <Type>:< signed_int >
                                        end postfix expr
                                        start primary expr
                                        <Type>:< signed_int >
                                        end primary expr
                                    <Type>:< signed_int >
                                    end assignment expr
                                    start expr expr
                                        start assignment expr
                                            start postfix expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                            <Type>:< unsigned_int >
                                            end postfix expr
                                            start primary expr
                                            <Type>:< signed_int >
                                            end primary expr
                                        <Type>:< unsigned_int >
                                        end assignment expr
                                        start if expr
                                            start logical and expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                                start postfix expr
                                                    start primary expr
                                                    <Type>:< point , struct >
                                                    end primary expr
                                                <Type>:< point , struct >
                                                end postfix expr
                                            <Type>:< signed_int >
                                            end logical and expr
                                            start compound expr
                                                start expr expr
                                                    start assignment expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< point , struct >
                                                        end postfix expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< function , point , struct >
                                                            end primary expr
                                                        <Type>:< point , struct >
                                                        end postfix expr
                                                    <Type>:< point , struct >
                                                    end assignment expr
                                                    start expr expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< function , bool >
                                                            end primary expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                            start primary expr
                                                            <Type>:< function , bool >
                                                            end primary expr
                                                        <Type>:< bool >
                                                        end postfix expr
                                                    end comopound stmt
                                                    start expr expr
                                                        start assignment expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< function , point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                        <Type>:< point , struct >
                                                        end assignment expr
                                                    end if stmt
                                                    start expr expr
                                                        start assignment expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< function , point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                        <Type>:< point , struct >
                                                        end assignment expr
                                                        start if expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                            start expr expr
                                                                start assignment expr
                                                                    start postfix expr
                                                                        start primary expr
                                                                        <Type>:< point , struct >
                                                                        end primary expr
                                                                    <Type>:< signed_int >
                                                                    end postfix expr
                                                                    start postfix expr
                                                                        start primary expr
                                                                        <Type>:< point , struct >
                                                                        end primary expr
                                                                    <Type>:< signed_int >
                                                                    end postfix expr
                                                                <Type>:< signed_int >
                                                                end assignment expr
                                                                start expr expr
                                                                    start assignment expr
                                                                        start postfix expr
                                                                            start primary expr
                                                                            <Type>:< point , struct >
                                                                            end primary expr
                                                                        <Type>:< signed_int >
                                                                        end postfix expr
                                                                        start primary expr
                                                                        <Type>:< const , signed_int >
                                                                        end primary expr
                                                                    <Type>:< signed_int >
                                                                    end assignment expr
                                                                end if stmt
                                                                start expr expr
                                                                    start assignment expr
                                                                        start postfix expr
                                                                            start primary expr
                                                                            <Type>:< point , struct >
                                                                            end primary expr
                                                                        <Type>:< point , void >
                                                                        end postfix expr
                                                                        start primary expr
                                                                        <Type>:< signed_int >
                                                                        end primary expr
                                                                    <Type>:< point , void >
                                                                    end assignment expr
                                                                    start return expr
                                                                        start primary expr
                                                                        <Type>:< point , struct >
                                                                        end primary expr
                                                                    end return stmt
                                                                end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start equal expr
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end equal expr
            start return expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            end return stmt
        end if stmt
        start declaration line:971
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start cast
                start specify or qualify node
                finish specify or qualify node
                start postfix expr
                    start primary expr
                    <Type>:< function , point , void >
                    end primary expr
                    start unary
                        start primary expr
                            start primary expr
                            <Type>:< struct >
                            end primary expr
                        <Type>:< struct >
                        end primary expr
                    <Type>:< signed_int >
                    end unary
                <Type>:< point , void >
                end postfix expr
            <Type>:< point , struct >
            end cast
        finish declaration
        start expr expr
            start assignment expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , signed_char >
                end postfix expr
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
            <Type>:< point , signed_char >
            end assignment expr
            start expr expr
                start assignment expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_int >
                    end postfix expr
                    start primary expr
                    <Type>:< unsigned_int >
                    end primary expr
                <Type>:< unsigned_int >
                end assignment expr
                start expr expr
                    start assignment expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< unsigned_long_long_int >
                        end postfix expr
                        start postfix expr
                            start primary expr
                            <Type>:< function , unsigned_long_long_int >
                            end primary expr
                            start primary expr
                            <Type>:< point , signed_char >
                            end primary expr
                            start primary expr
                            <Type>:< unsigned_int >
                            end primary expr
                        <Type>:< unsigned_long_long_int >
                        end postfix expr
                    <Type>:< unsigned_long_long_int >
                    end assignment expr
                    start expr expr
                        start assignment expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< unsigned_int >
                            end postfix expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< unsigned_int >
                        end assignment expr
                        start expr expr
                            start assignment expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                <Type>:< bool >
                                end postfix expr
                                start assignment expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< bool >
                                    end postfix expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                <Type>:< bool >
                                end assignment expr
                            <Type>:< bool >
                            end assignment expr
                            start expr expr
                                start assignment expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< signed_int >
                                    end postfix expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                <Type>:< signed_int >
                                end assignment expr
                                start expr expr
                                    start assignment expr
                                        start postfix expr
                                            start primary expr
                                            <Type>:< point , struct >
                                            end primary expr
                                        <Type>:< signed_int >
                                        end postfix expr
                                        start primary expr
                                        <Type>:< const , signed_int >
                                        end primary expr
                                    <Type>:< signed_int >
                                    end assignment expr
                                    start expr expr
                                        start assignment expr
                                            start postfix expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                            <Type>:< signed_int >
                                            end postfix expr
                                            start primary expr
                                            <Type>:< const , signed_int >
                                            end primary expr
                                        <Type>:< signed_int >
                                        end assignment expr
                                        start expr expr
                                            start assignment expr
                                                start postfix expr
                                                    start primary expr
                                                    <Type>:< point , struct >
                                                    end primary expr
                                                <Type>:< bool >
                                                end postfix expr
                                                start primary expr
                                                <Type>:< signed_int >
                                                end primary expr
                                            <Type>:< bool >
                                            end assignment expr
                                            start expr expr
                                                start assignment expr
                                                    start postfix expr
                                                        start primary expr
                                                        <Type>:< point , struct >
                                                        end primary expr
                                                    <Type>:< unsigned_long >
                                                    end postfix expr
                                                    start primary expr
                                                    <Type>:< signed_int >
                                                    end primary expr
                                                <Type>:< unsigned_long >
                                                end assignment expr
                                                start expr expr
                                                    start assignment expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< point , struct >
                                                        end postfix expr
                                                        start cast
                                                            start specify or qualify node
                                                            finish specify or qualify node
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< function , point , void >
                                                                end primary expr
                                                                start unary
                                                                    start specify or qualify node
                                                                    finish specify or qualify node
                                                                <Type>:< signed_int >
                                                                end unary
                                                            <Type>:< point , void >
                                                            end postfix expr
                                                        <Type>:< point , struct >
                                                        end cast
                                                    <Type>:< point , struct >
                                                    end assignment expr
                                                    start expr expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< function , extern  inline , void >
                                                            end primary expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< point , struct >
                                                                end primary expr
                                                            <Type>:< point , struct >
                                                            end postfix expr
                                                            start primary expr
                                                            <Type>:< signed_int >
                                                            end primary expr
                                                            start unary
                                                                start specify or qualify node
                                                                finish specify or qualify node
                                                            <Type>:< signed_int >
                                                            end unary
                                                        <Type>:< extern  inline , void >
                                                        end postfix expr
                                                        start expr expr
                                                            start assignment expr
                                                                start postfix expr
                                                                    start primary expr
                                                                    <Type>:< point , struct >
                                                                    end primary expr
                                                                <Type>:< point , struct >
                                                                end postfix expr
                                                                start postfix expr
                                                                    start primary expr
                                                                    <Type>:< function , point , struct >
                                                                    end primary expr
                                                                    start primary expr
                                                                    <Type>:< signed_int >
                                                                    end primary expr
                                                                <Type>:< point , struct >
                                                                end postfix expr
                                                            <Type>:< point , struct >
                                                            end assignment expr
                                                            start expr expr
                                                                start assignment expr
                                                                    start postfix expr
                                                                        start primary expr
                                                                        <Type>:< point , struct >
                                                                        end primary expr
                                                                    <Type>:< bool >
                                                                    end postfix expr
                                                                    start primary expr
                                                                    <Type>:< signed_int >
                                                                    end primary expr
                                                                <Type>:< bool >
                                                                end assignment expr
                                                                start return expr
                                                                    start primary expr
                                                                    <Type>:< point , struct >
                                                                    end primary expr
                                                                end return stmt
                                                            end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start return expr
            start postfix expr
                start primary expr
                <Type>:< function , point , void >
                end primary expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
                start cast
                    start specify or qualify node
                    finish specify or qualify node
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end cast
                start primary expr
                <Type>:< function , bool >
                end primary expr
            <Type>:< point , void >
            end postfix expr
        end return stmt
    end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start logical and expr
                start unary
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< signed_int >
                end unary
                start unary
                    start primary expr
                    <Type>:< point , signed_char >
                    end primary expr
                <Type>:< signed_int >
                end unary
            <Type>:< signed_int >
            end logical and expr
            start return expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            end return stmt
        end if stmt
        start declaration line:994
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish declaration
        start declaration line:995
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
                start primary expr
                <Type>:< unsigned_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
        finish declaration
        start declaration line:996
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start primary expr
            <Type>:< point , struct >
            end primary expr
        finish declaration
        start while expr
            start logical and expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
                start equal expr
                    start primary expr
                        start assignment expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                            start cast
                                start specify or qualify node
                                finish specify or qualify node
                                start postfix expr
                                    start primary expr
                                    <Type>:< function , point , struct >
                                    end primary expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< point , struct >
                                    end postfix expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                    start primary expr
                                    <Type>:< function , bool >
                                    end primary expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                <Type>:< point , struct >
                                end postfix expr
                            <Type>:< point , struct >
                            end cast
                        <Type>:< point , struct >
                        end assignment expr
                    <Type>:< point , struct >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< signed_int >
                end equal expr
            <Type>:< signed_int >
            end logical and expr
            start compound expr
                start expr expr
                    start assignment expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< point , struct >
                        end postfix expr
                    <Type>:< point , struct >
                    end assignment expr
                end comopound stmt
            end while stmt
            start expr expr
                start postfix expr
                    start primary expr
                    <Type>:< function , void >
                    end primary expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< void >
                end postfix expr
                start return expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                end return stmt
            end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start logical and expr
                start unary
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< signed_int >
                end unary
                start unary
                    start primary expr
                    <Type>:< point , signed_char >
                    end primary expr
                <Type>:< signed_int >
                end unary
            <Type>:< signed_int >
            end logical and expr
            start return expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            end return stmt
        end if stmt
        start declaration line:1007
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
                start primary expr
                <Type>:< unsigned_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
        finish declaration
        start declaration line:1008
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start cast
                start specify or qualify node
                finish specify or qualify node
                start postfix expr
                    start primary expr
                    <Type>:< function , point , struct >
                    end primary expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< point , struct >
                    end postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                    start primary expr
                    <Type>:< function , bool >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
            <Type>:< point , struct >
            end cast
        finish declaration
        start expr expr
            start postfix expr
                start primary expr
                <Type>:< function , void >
                end primary expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
            <Type>:< void >
            end postfix expr
            start return expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
            end return stmt
        end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start declaration line:1013
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
                start primary expr
                <Type>:< unsigned_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
        finish declaration
        start expr expr
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
                start primary expr
                <Type>:< function , bool >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
            start expr expr
                start postfix expr
                    start primary expr
                    <Type>:< function , void >
                    end primary expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< void >
                end postfix expr
            end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start declaration line:1018
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
        finish declaration
        start declaration line:1019
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
                start primary expr
                <Type>:< function , bool >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
        finish declaration
        start expr expr
            start postfix expr
                start primary expr
                <Type>:< function , bool >
                end primary expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
                start primary expr
                <Type>:< function , bool >
                end primary expr
            <Type>:< bool >
            end postfix expr
            start expr expr
                start postfix expr
                    start primary expr
                    <Type>:< function , void >
                    end primary expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< void >
                end postfix expr
            end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start unary
                start primary expr
                <Type>:< point , struct >
                end primary expr
            <Type>:< signed_int >
            end unary
            start return expr
            end return stmt
        end if stmt
        start expr expr
            start postfix expr
                start primary expr
                <Type>:< function , void >
                end primary expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< point , struct >
                end postfix expr
            <Type>:< void >
            end postfix expr
            start expr expr
                start postfix expr
                    start primary expr
                    <Type>:< function , void >
                    end primary expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< point , struct >
                    end postfix expr
                <Type>:< void >
                end postfix expr
                start expr expr
                    start postfix expr
                        start primary expr
                        <Type>:< function , void >
                        end primary expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< point , struct >
                        end postfix expr
                    <Type>:< void >
                    end postfix expr
                    start expr expr
                        start postfix expr
                            start primary expr
                            <Type>:< function , void >
                            end primary expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< point , struct >
                            end postfix expr
                        <Type>:< void >
                        end postfix expr
                        start expr expr
                            start postfix expr
                                start primary expr
                                <Type>:< function , void >
                                end primary expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< void >
                            end postfix expr
                        end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start declaration line:1034
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start primary expr
            <Type>:< signed_int >
            end primary expr
        finish declaration
        start declaration line:1035
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start primary expr
            <Type>:< signed_int >
            end primary expr
        finish declaration
        start if expr
            start equal expr
                start primary expr
                <Type>:< point , struct >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end equal expr
            start compound expr
                start expr expr
                    start postfix expr
                        start primary expr
                        <Type>:< function , extern , signed_int >
                        end primary expr
                        start primary expr
                        <Type>:< point , signed_char >
                        end primary expr
                    <Type>:< extern , signed_int >
                    end postfix expr
                    start return expr
                    end return stmt
                end comopound stmt
            end if stmt
            start for expr
                start declaration line:1041
                    start specify or qualify node
                    finish specify or qualify node
                    start declarator
                    finish declarator
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                finish declaration
                start relation expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                    start postfix expr
                        start primary expr
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_int >
                    end postfix expr
                <Type>:< signed_int >
                end relation expr
                start unary
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< signed_int >
                end unary
                start compound expr
                    start expr expr
                        start postfix expr
                            start primary expr
                            <Type>:< function , extern , signed_int >
                            end primary expr
                            start primary expr
                            <Type>:< point , signed_char >
                            end primary expr
                        <Type>:< extern , signed_int >
                        end postfix expr
                    end comopound stmt
                end for stmt
                start expr expr
                    start postfix expr
                        start primary expr
                        <Type>:< function , extern , signed_int >
                        end primary expr
                        start primary expr
                        <Type>:< point , signed_char >
                        end primary expr
                        start postfix expr
                            start primary expr
                            <Type>:< array , point , static  const , signed_char >
                            end primary expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< signed_int >
                            end postfix expr
                        <Type>:< point , static  const , signed_char >
                        end postfix expr
                        start primary expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< unsigned_long >
                            end postfix expr
                        <Type>:< unsigned_long >
                        end primary expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< unsigned_int >
                        end postfix expr
                    <Type>:< extern , signed_int >
                    end postfix expr
                    start for expr
                        start declaration line:1046
                            start specify or qualify node
                            finish specify or qualify node
                            start declarator
                            finish declarator
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        finish declaration
                        start relation expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                            <Type>:< unsigned_int >
                            end postfix expr
                        <Type>:< signed_int >
                        end relation expr
                        start unary
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< signed_int >
                        end unary
                        start compound expr
                            start expr expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< function , extern , signed_int >
                                    end primary expr
                                    start primary expr
                                    <Type>:< point , signed_char >
                                    end primary expr
                                <Type>:< extern , signed_int >
                                end postfix expr
                            end comopound stmt
                        end for stmt
                        start expr expr
                            start postfix expr
                                start primary expr
                                <Type>:< function , extern , signed_int >
                                end primary expr
                                start primary expr
                                <Type>:< point , signed_char >
                                end primary expr
                            <Type>:< extern , signed_int >
                            end postfix expr
                            start expr expr
                                start assignment expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                    start postfix expr
                                        start primary expr
                                        <Type>:< function , point , struct >
                                        end primary expr
                                        start postfix expr
                                            start primary expr
                                            <Type>:< point , struct >
                                            end primary expr
                                        <Type>:< point , struct >
                                        end postfix expr
                                    <Type>:< point , struct >
                                    end postfix expr
                                <Type>:< point , struct >
                                end assignment expr
                                start for expr
                                    start declaration line:1051
                                        start specify or qualify node
                                        finish specify or qualify node
                                        start declarator
                                        finish declarator
                                        start primary expr
                                        <Type>:< signed_int >
                                        end primary expr
                                    finish declaration
                                    start relation expr
                                        start primary expr
                                        <Type>:< unsigned_long >
                                        end primary expr
                                        start primary expr
                                            start postfix expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                            <Type>:< unsigned_long >
                                            end postfix expr
                                        <Type>:< unsigned_long >
                                        end primary expr
                                    <Type>:< signed_int >
                                    end relation expr
                                    start unary
                                        start primary expr
                                        <Type>:< unsigned_long >
                                        end primary expr
                                    <Type>:< unsigned_long >
                                    end unary
                                    start compound expr
                                        start expr expr
                                            start assignment expr
                                                start primary expr
                                                <Type>:< point , struct >
                                                end primary expr
                                                start primary expr
                                                    start condition expr
                                                        start primary expr
                                                            start logical and expr
                                                                start equal expr
                                                                    start primary expr
                                                                    <Type>:< point , struct >
                                                                    end primary expr
                                                                    start primary expr
                                                                    <Type>:< signed_int >
                                                                    end primary expr
                                                                <Type>:< signed_int >
                                                                end equal expr
                                                                start relation expr
                                                                    start primary expr
                                                                    <Type>:< unsigned_long >
                                                                    end primary expr
                                                                    start primary expr
                                                                        start postfix expr
                                                                            start primary expr
                                                                            <Type>:< point , struct >
                                                                            end primary expr
                                                                        <Type>:< unsigned_long >
                                                                        end postfix expr
                                                                    <Type>:< unsigned_long >
                                                                    end primary expr
                                                                <Type>:< signed_int >
                                                                end relation expr
                                                            <Type>:< signed_int >
                                                            end logical and expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                        start primary expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< point , struct >
                                                                end primary expr
                                                                start primary expr
                                                                <Type>:< unsigned_long >
                                                                end primary expr
                                                            <Type>:< point , void >
                                                            end postfix expr
                                                        <Type>:< point , void >
                                                        end primary expr
                                                        start primary expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                    <Type>:< point , void >
                                                    end condition expr
                                                <Type>:< point , void >
                                                end primary expr
                                            <Type>:< point , struct >
                                            end assignment expr
                                            start if expr
                                                start logical and expr
                                                    start unary
                                                        start primary expr
                                                        <Type>:< point , struct >
                                                        end primary expr
                                                    <Type>:< signed_int >
                                                    end unary
                                                    start relation expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< unsigned_int >
                                                        end postfix expr
                                                        start primary expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                    <Type>:< signed_int >
                                                    end relation expr
                                                <Type>:< signed_int >
                                                end logical and expr
                                                start continue expr
                                                end continue stmt
                                            end if stmt
                                            start for expr
                                                start declaration line:1056
                                                    start specify or qualify node
                                                    finish specify or qualify node
                                                    start declarator
                                                    finish declarator
                                                    start primary expr
                                                    <Type>:< signed_int >
                                                    end primary expr
                                                finish declaration
                                                start relation expr
                                                    start primary expr
                                                    <Type>:< signed_int >
                                                    end primary expr
                                                    start add
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< unsigned_int >
                                                        end postfix expr
                                                        start primary expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                    <Type>:< unsigned_int >
                                                    end add
                                                <Type>:< signed_int >
                                                end relation expr
                                                start unary
                                                    start primary expr
                                                    <Type>:< signed_int >
                                                    end primary expr
                                                <Type>:< signed_int >
                                                end unary
                                                start compound expr
                                                    start expr expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< function , extern , signed_int >
                                                            end primary expr
                                                            start primary expr
                                                            <Type>:< point , signed_char >
                                                            end primary expr
                                                        <Type>:< extern , signed_int >
                                                        end postfix expr
                                                    end comopound stmt
                                                end for stmt
                                                start expr expr
                                                    start postfix expr
                                                        start primary expr
                                                        <Type>:< function , extern , signed_int >
                                                        end primary expr
                                                        start primary expr
                                                        <Type>:< point , signed_char >
                                                        end primary expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< point , signed_char >
                                                        end postfix expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< unsigned_int >
                                                        end postfix expr
                                                        start postfix expr
                                                            start primary expr
                                                            <Type>:< point , struct >
                                                            end primary expr
                                                        <Type>:< signed_int >
                                                        end postfix expr
                                                    <Type>:< extern , signed_int >
                                                    end postfix expr
                                                    start for expr
                                                        start declaration line:1060
                                                            start specify or qualify node
                                                            finish specify or qualify node
                                                            start declarator
                                                            finish declarator
                                                            start primary expr
                                                            <Type>:< signed_int >
                                                            end primary expr
                                                        finish declaration
                                                        start relation expr
                                                            start primary expr
                                                            <Type>:< signed_int >
                                                            end primary expr
                                                            start add
                                                                start postfix expr
                                                                    start primary expr
                                                                    <Type>:< point , struct >
                                                                    end primary expr
                                                                <Type>:< unsigned_int >
                                                                end postfix expr
                                                                start primary expr
                                                                <Type>:< signed_int >
                                                                end primary expr
                                                            <Type>:< unsigned_int >
                                                            end add
                                                        <Type>:< signed_int >
                                                        end relation expr
                                                        start unary
                                                            start primary expr
                                                            <Type>:< signed_int >
                                                            end primary expr
                                                        <Type>:< signed_int >
                                                        end unary
                                                        start compound expr
                                                            start expr expr
                                                                start postfix expr
                                                                    start primary expr
                                                                    <Type>:< function , extern , signed_int >
                                                                    end primary expr
                                                                    start primary expr
                                                                    <Type>:< point , signed_char >
                                                                    end primary expr
                                                                <Type>:< extern , signed_int >
                                                                end postfix expr
                                                            end comopound stmt
                                                        end for stmt
                                                        start expr expr
                                                            start postfix expr
                                                                start primary expr
                                                                <Type>:< function , extern , signed_int >
                                                                end primary expr
                                                                start primary expr
                                                                <Type>:< point , signed_char >
                                                                end primary expr
                                                            <Type>:< extern , signed_int >
                                                            end postfix expr
                                                            start declaration line:1064
                                                                start specify or qualify node
                                                                finish specify or qualify node
                                                                start declarator
                                                                finish declarator
                                                                start primary expr
                                                                <Type>:< signed_int >
                                                                end primary expr
                                                            finish declaration
                                                            start declaration line:1065
                                                                start specify or qualify node
                                                                finish specify or qualify node
                                                                start declarator
                                                                finish declarator
                                                                start primary expr
                                                                <Type>:< signed_int >
                                                                end primary expr
                                                            finish declaration
                                                            start if expr
                                                                start postfix expr
                                                                    start primary expr
                                                                    <Type>:< point , struct >
                                                                    end primary expr
                                                                <Type>:< point , struct >
                                                                end postfix expr
                                                                start compound expr
                                                                    start for expr
                                                                        start declaration line:1068
                                                                            start specify or qualify node
                                                                            finish specify or qualify node
                                                                            start declarator
                                                                            finish declarator
                                                                            start add
                                                                                start primary expr
                                                                                    start postfix expr
                                                                                        start primary expr
                                                                                        <Type>:< point , struct >
                                                                                        end primary expr
                                                                                    <Type>:< unsigned_long >
                                                                                    end postfix expr
                                                                                <Type>:< unsigned_long >
                                                                                end primary expr
                                                                                start primary expr
                                                                                <Type>:< signed_int >
                                                                                end primary expr
                                                                            <Type>:< unsigned_long >
                                                                            end add
                                                                        finish declaration
                                                                        start relation expr
                                                                            start primary expr
                                                                            <Type>:< signed_int >
                                                                            end primary expr
                                                                            start primary expr
                                                                            <Type>:< signed_int >
                                                                            end primary expr
                                                                        <Type>:< signed_int >
                                                                        end relation expr
                                                                        start unary
                                                                            start primary expr
                                                                            <Type>:< signed_int >
                                                                            end primary expr
                                                                        <Type>:< signed_int >
                                                                        end unary
                                                                        start compound expr
                                                                            start expr expr
                                                                                start assignment expr
                                                                                    start primary expr
                                                                                    <Type>:< point , struct >
                                                                                    end primary expr
                                                                                    start primary expr
                                                                                        start condition expr
                                                                                            start primary expr
                                                                                                start logical and expr
                                                                                                    start equal expr
                                                                                                        start postfix expr
                                                                                                            start primary expr
                                                                                                            <Type>:< point , struct >
                                                                                                            end primary expr
                                                                                                        <Type>:< point , struct >
                                                                                                        end postfix expr
                                                                                                        start primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end equal expr
                                                                                                    start relation expr
                                                                                                        start primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end primary expr
                                                                                                        start primary expr
                                                                                                            start postfix expr
                                                                                                                start primary expr
                                                                                                                <Type>:< point , struct >
                                                                                                                end primary expr
                                                                                                            <Type>:< unsigned_long >
                                                                                                            end postfix expr
                                                                                                        <Type>:< unsigned_long >
                                                                                                        end primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end relation expr
                                                                                                <Type>:< signed_int >
                                                                                                end logical and expr
                                                                                            <Type>:< signed_int >
                                                                                            end primary expr
                                                                                            start primary expr
                                                                                                start postfix expr
                                                                                                    start primary expr
                                                                                                    <Type>:< point , struct >
                                                                                                    end primary expr
                                                                                                    start primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end primary expr
                                                                                                <Type>:< point , void >
                                                                                                end postfix expr
                                                                                            <Type>:< point , void >
                                                                                            end primary expr
                                                                                            start primary expr
                                                                                            <Type>:< signed_int >
                                                                                            end primary expr
                                                                                        <Type>:< point , void >
                                                                                        end condition expr
                                                                                    <Type>:< point , void >
                                                                                    end primary expr
                                                                                <Type>:< point , struct >
                                                                                end assignment expr
                                                                                start if expr
                                                                                    start primary expr
                                                                                    <Type>:< point , struct >
                                                                                    end primary expr
                                                                                    start compound expr
                                                                                        start if expr
                                                                                            start logical and expr
                                                                                                start equal expr
                                                                                                    start primary expr
                                                                                                    <Type>:< point , struct >
                                                                                                    end primary expr
                                                                                                    start primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end primary expr
                                                                                                <Type>:< signed_int >
                                                                                                end equal expr
                                                                                                start equal expr
                                                                                                    start postfix expr
                                                                                                        start primary expr
                                                                                                        <Type>:< point , struct >
                                                                                                        end primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end postfix expr
                                                                                                    start primary expr
                                                                                                    <Type>:< const , signed_int >
                                                                                                    end primary expr
                                                                                                <Type>:< signed_int >
                                                                                                end equal expr
                                                                                            <Type>:< signed_int >
                                                                                            end logical and expr
                                                                                            start expr expr
                                                                                                start assignment expr
                                                                                                    start primary expr
                                                                                                    <Type>:< point , struct >
                                                                                                    end primary expr
                                                                                                    start primary expr
                                                                                                    <Type>:< point , struct >
                                                                                                    end primary expr
                                                                                                <Type>:< point , struct >
                                                                                                end assignment expr
                                                                                            end if stmt
                                                                                            start expr expr
                                                                                                start postfix expr
                                                                                                    start primary expr
                                                                                                    <Type>:< function , void >
                                                                                                    end primary expr
                                                                                                    start primary expr
                                                                                                    <Type>:< point , struct >
                                                                                                    end primary expr
                                                                                                <Type>:< void >
                                                                                                end postfix expr
                                                                                            end comopound stmt
                                                                                        end if stmt
                                                                                        start if expr
                                                                                            start primary expr
                                                                                            <Type>:< signed_int >
                                                                                            end primary expr
                                                                                            start expr expr
                                                                                                start postfix expr
                                                                                                    start primary expr
                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                    end primary expr
                                                                                                    start primary expr
                                                                                                    <Type>:< point , signed_char >
                                                                                                    end primary expr
                                                                                                <Type>:< extern , signed_int >
                                                                                                end postfix expr
                                                                                            end if stmt
                                                                                        end comopound stmt
                                                                                    end for stmt
                                                                                end comopound stmt
                                                                            end if stmt
                                                                            start expr expr
                                                                                start postfix expr
                                                                                    start primary expr
                                                                                    <Type>:< function , extern , signed_int >
                                                                                    end primary expr
                                                                                    start primary expr
                                                                                    <Type>:< point , signed_char >
                                                                                    end primary expr
                                                                                <Type>:< extern , signed_int >
                                                                                end postfix expr
                                                                                start expr expr
                                                                                    start assignment expr
                                                                                        start primary expr
                                                                                        <Type>:< point , struct >
                                                                                        end primary expr
                                                                                        start postfix expr
                                                                                            start primary expr
                                                                                            <Type>:< function , point , struct >
                                                                                            end primary expr
                                                                                            start postfix expr
                                                                                                start primary expr
                                                                                                <Type>:< point , struct >
                                                                                                end primary expr
                                                                                            <Type>:< point , struct >
                                                                                            end postfix expr
                                                                                        <Type>:< point , struct >
                                                                                        end postfix expr
                                                                                    <Type>:< point , struct >
                                                                                    end assignment expr
                                                                                    start if expr
                                                                                        start primary expr
                                                                                        <Type>:< point , struct >
                                                                                        end primary expr
                                                                                        start compound expr
                                                                                            start declaration line:1082
                                                                                                start specify or qualify node
                                                                                                finish specify or qualify node
                                                                                                start declarator
                                                                                                finish declarator
                                                                                                start postfix expr
                                                                                                    start primary expr
                                                                                                        start cast
                                                                                                            start specify or qualify node
                                                                                                            finish specify or qualify node
                                                                                                            start primary expr
                                                                                                            <Type>:< point , struct >
                                                                                                            end primary expr
                                                                                                        <Type>:< point , struct >
                                                                                                        end cast
                                                                                                    <Type>:< point , struct >
                                                                                                    end primary expr
                                                                                                <Type>:< point , struct >
                                                                                                end postfix expr
                                                                                            finish declaration
                                                                                            start if expr
                                                                                                start logical and expr
                                                                                                    start equal expr
                                                                                                        start primary expr
                                                                                                        <Type>:< point , struct >
                                                                                                        end primary expr
                                                                                                        start primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end equal expr
                                                                                                    start equal expr
                                                                                                        start primary expr
                                                                                                            start postfix expr
                                                                                                                start primary expr
                                                                                                                <Type>:< point , struct >
                                                                                                                end primary expr
                                                                                                            <Type>:< unsigned_long >
                                                                                                            end postfix expr
                                                                                                        <Type>:< unsigned_long >
                                                                                                        end primary expr
                                                                                                        start primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end equal expr
                                                                                                <Type>:< signed_int >
                                                                                                end logical and expr
                                                                                                start compound expr
                                                                                                    start for expr
                                                                                                        start declaration line:1084
                                                                                                            start specify or qualify node
                                                                                                            finish specify or qualify node
                                                                                                            start declarator
                                                                                                            finish declarator
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                        finish declaration
                                                                                                        start relation expr
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                            start add
                                                                                                                start postfix expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< point , struct >
                                                                                                                    end primary expr
                                                                                                                <Type>:< unsigned_int >
                                                                                                                end postfix expr
                                                                                                                start primary expr
                                                                                                                <Type>:< signed_int >
                                                                                                                end primary expr
                                                                                                            <Type>:< unsigned_int >
                                                                                                            end add
                                                                                                        <Type>:< signed_int >
                                                                                                        end relation expr
                                                                                                        start unary
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end unary
                                                                                                        start compound expr
                                                                                                            start expr expr
                                                                                                                start postfix expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                    end primary expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< point , signed_char >
                                                                                                                    end primary expr
                                                                                                                <Type>:< extern , signed_int >
                                                                                                                end postfix expr
                                                                                                            end comopound stmt
                                                                                                        end for stmt
                                                                                                        start expr expr
                                                                                                            start postfix expr
                                                                                                                start primary expr
                                                                                                                <Type>:< function , extern , signed_int >
                                                                                                                end primary expr
                                                                                                                start primary expr
                                                                                                                <Type>:< point , signed_char >
                                                                                                                end primary expr
                                                                                                            <Type>:< extern , signed_int >
                                                                                                            end postfix expr
                                                                                                            start continue expr
                                                                                                            end continue stmt
                                                                                                        end comopound stmt
                                                                                                    end if stmt
                                                                                                    start for expr
                                                                                                        start declaration line:1090
                                                                                                            start specify or qualify node
                                                                                                            finish specify or qualify node
                                                                                                            start declarator
                                                                                                            finish declarator
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                        finish declaration
                                                                                                        start relation expr
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                            start add
                                                                                                                start postfix expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< point , struct >
                                                                                                                    end primary expr
                                                                                                                <Type>:< unsigned_int >
                                                                                                                end postfix expr
                                                                                                                start primary expr
                                                                                                                <Type>:< signed_int >
                                                                                                                end primary expr
                                                                                                            <Type>:< unsigned_int >
                                                                                                            end add
                                                                                                        <Type>:< signed_int >
                                                                                                        end relation expr
                                                                                                        start unary
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end unary
                                                                                                        start compound expr
                                                                                                            start expr expr
                                                                                                                start postfix expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                    end primary expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< point , signed_char >
                                                                                                                    end primary expr
                                                                                                                <Type>:< extern , signed_int >
                                                                                                                end postfix expr
                                                                                                            end comopound stmt
                                                                                                        end for stmt
                                                                                                        start expr expr
                                                                                                            start postfix expr
                                                                                                                start primary expr
                                                                                                                <Type>:< function , extern , signed_int >
                                                                                                                end primary expr
                                                                                                                start primary expr
                                                                                                                <Type>:< point , signed_char >
                                                                                                                end primary expr
                                                                                                                start primary expr
                                                                                                                    start postfix expr
                                                                                                                        start primary expr
                                                                                                                        <Type>:< point , struct >
                                                                                                                        end primary expr
                                                                                                                    <Type>:< unsigned_long >
                                                                                                                    end postfix expr
                                                                                                                <Type>:< unsigned_long >
                                                                                                                end primary expr
                                                                                                            <Type>:< extern , signed_int >
                                                                                                            end postfix expr
                                                                                                            start for expr
                                                                                                                start declaration line:1094
                                                                                                                    start specify or qualify node
                                                                                                                    finish specify or qualify node
                                                                                                                    start declarator
                                                                                                                    finish declarator
                                                                                                                    start primary expr
                                                                                                                    <Type>:< signed_int >
                                                                                                                    end primary expr
                                                                                                                finish declaration
                                                                                                                start relation expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< unsigned_long >
                                                                                                                    end primary expr
                                                                                                                    start primary expr
                                                                                                                        start postfix expr
                                                                                                                            start primary expr
                                                                                                                            <Type>:< point , struct >
                                                                                                                            end primary expr
                                                                                                                        <Type>:< unsigned_long >
                                                                                                                        end postfix expr
                                                                                                                    <Type>:< unsigned_long >
                                                                                                                    end primary expr
                                                                                                                <Type>:< signed_int >
                                                                                                                end relation expr
                                                                                                                start unary
                                                                                                                    start primary expr
                                                                                                                    <Type>:< unsigned_long >
                                                                                                                    end primary expr
                                                                                                                <Type>:< unsigned_long >
                                                                                                                end unary
                                                                                                                start compound expr
                                                                                                                    start declaration line:1095
                                                                                                                        start specify or qualify node
                                                                                                                        finish specify or qualify node
                                                                                                                        start declarator
                                                                                                                        finish declarator
                                                                                                                        start primary expr
                                                                                                                            start condition expr
                                                                                                                                start primary expr
                                                                                                                                    start logical and expr
                                                                                                                                        start equal expr
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< point , struct >
                                                                                                                                            end primary expr
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end primary expr
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end equal expr
                                                                                                                                        start relation expr
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                            end primary expr
                                                                                                                                            start primary expr
                                                                                                                                                start postfix expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< unsigned_long >
                                                                                                                                                end postfix expr
                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                            end primary expr
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end relation expr
                                                                                                                                    <Type>:< signed_int >
                                                                                                                                    end logical and expr
                                                                                                                                <Type>:< signed_int >
                                                                                                                                end primary expr
                                                                                                                                start primary expr
                                                                                                                                    start postfix expr
                                                                                                                                        start primary expr
                                                                                                                                        <Type>:< point , struct >
                                                                                                                                        end primary expr
                                                                                                                                        start primary expr
                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                        end primary expr
                                                                                                                                    <Type>:< point , void >
                                                                                                                                    end postfix expr
                                                                                                                                <Type>:< point , void >
                                                                                                                                end primary expr
                                                                                                                                start primary expr
                                                                                                                                <Type>:< signed_int >
                                                                                                                                end primary expr
                                                                                                                            <Type>:< point , void >
                                                                                                                            end condition expr
                                                                                                                        <Type>:< point , void >
                                                                                                                        end primary expr
                                                                                                                    finish declaration
                                                                                                                    start for expr
                                                                                                                        start declaration line:1096
                                                                                                                            start specify or qualify node
                                                                                                                            finish specify or qualify node
                                                                                                                            start declarator
                                                                                                                            finish declarator
                                                                                                                            start primary expr
                                                                                                                            <Type>:< signed_int >
                                                                                                                            end primary expr
                                                                                                                        finish declaration
                                                                                                                        start relation expr
                                                                                                                            start primary expr
                                                                                                                            <Type>:< signed_int >
                                                                                                                            end primary expr
                                                                                                                            start add
                                                                                                                                start postfix expr
                                                                                                                                    start primary expr
                                                                                                                                    <Type>:< point , struct >
                                                                                                                                    end primary expr
                                                                                                                                <Type>:< unsigned_int >
                                                                                                                                end postfix expr
                                                                                                                                start primary expr
                                                                                                                                <Type>:< signed_int >
                                                                                                                                end primary expr
                                                                                                                            <Type>:< unsigned_int >
                                                                                                                            end add
                                                                                                                        <Type>:< signed_int >
                                                                                                                        end relation expr
                                                                                                                        start unary
                                                                                                                            start primary expr
                                                                                                                            <Type>:< signed_int >
                                                                                                                            end primary expr
                                                                                                                        <Type>:< signed_int >
                                                                                                                        end unary
                                                                                                                        start compound expr
                                                                                                                            start expr expr
                                                                                                                                start postfix expr
                                                                                                                                    start primary expr
                                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                                    end primary expr
                                                                                                                                    start primary expr
                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                    end primary expr
                                                                                                                                <Type>:< extern , signed_int >
                                                                                                                                end postfix expr
                                                                                                                            end comopound stmt
                                                                                                                        end for stmt
                                                                                                                        start if expr
                                                                                                                            start postfix expr
                                                                                                                                start primary expr
                                                                                                                                <Type>:< point , struct >
                                                                                                                                end primary expr
                                                                                                                            <Type>:< point , signed_char >
                                                                                                                            end postfix expr
                                                                                                                            start expr expr
                                                                                                                                start postfix expr
                                                                                                                                    start primary expr
                                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                                    end primary expr
                                                                                                                                    start primary expr
                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                    end primary expr
                                                                                                                                    start postfix expr
                                                                                                                                        start primary expr
                                                                                                                                        <Type>:< point , struct >
                                                                                                                                        end primary expr
                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                    end postfix expr
                                                                                                                                <Type>:< extern , signed_int >
                                                                                                                                end postfix expr
                                                                                                                                start expr expr
                                                                                                                                    start postfix expr
                                                                                                                                        start primary expr
                                                                                                                                        <Type>:< function , extern , signed_int >
                                                                                                                                        end primary expr
                                                                                                                                        start primary expr
                                                                                                                                        <Type>:< point , signed_char >
                                                                                                                                        end primary expr
                                                                                                                                    <Type>:< extern , signed_int >
                                                                                                                                    end postfix expr
                                                                                                                                end if stmt
                                                                                                                            end comopound stmt
                                                                                                                        end for stmt
                                                                                                                    end comopound stmt
                                                                                                                    start if expr
                                                                                                                        start logical and expr
                                                                                                                            start primary expr
                                                                                                                            <Type>:< point , struct >
                                                                                                                            end primary expr
                                                                                                                            start equal expr
                                                                                                                                start postfix expr
                                                                                                                                    start primary expr
                                                                                                                                    <Type>:< point , struct >
                                                                                                                                    end primary expr
                                                                                                                                <Type>:< bool >
                                                                                                                                end postfix expr
                                                                                                                                start primary expr
                                                                                                                                <Type>:< signed_int >
                                                                                                                                end primary expr
                                                                                                                            <Type>:< signed_int >
                                                                                                                            end equal expr
                                                                                                                        <Type>:< signed_int >
                                                                                                                        end logical and expr
                                                                                                                        start compound expr
                                                                                                                            start if expr
                                                                                                                                start logical and expr
                                                                                                                                    start equal expr
                                                                                                                                        start postfix expr
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< point , struct >
                                                                                                                                            end primary expr
                                                                                                                                        <Type>:< unsigned_int >
                                                                                                                                        end postfix expr
                                                                                                                                        start primary expr
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end primary expr
                                                                                                                                    <Type>:< signed_int >
                                                                                                                                    end equal expr
                                                                                                                                    start primary expr
                                                                                                                                        start logical and expr
                                                                                                                                            start equal expr
                                                                                                                                                start postfix expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                end postfix expr
                                                                                                                                                start primary expr
                                                                                                                                                <Type>:< const , signed_int >
                                                                                                                                                end primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end equal expr
                                                                                                                                            start equal expr
                                                                                                                                                start postfix expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                end postfix expr
                                                                                                                                                start primary expr
                                                                                                                                                <Type>:< const , signed_int >
                                                                                                                                                end primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end equal expr
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end logical and expr
                                                                                                                                    <Type>:< signed_int >
                                                                                                                                    end primary expr
                                                                                                                                <Type>:< signed_int >
                                                                                                                                end logical and expr
                                                                                                                                start compound expr
                                                                                                                                    start if expr
                                                                                                                                        start equal expr
                                                                                                                                            start postfix expr
                                                                                                                                                start primary expr
                                                                                                                                                    start cast
                                                                                                                                                        start specify or qualify node
                                                                                                                                                        finish specify or qualify node
                                                                                                                                                        start primary expr
                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                        end primary expr
                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                    end cast
                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                end primary expr
                                                                                                                                            <Type>:< point , struct >
                                                                                                                                            end postfix expr
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end primary expr
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end equal expr
                                                                                                                                        start continue expr
                                                                                                                                        end continue stmt
                                                                                                                                    end if stmt
                                                                                                                                    start for expr
                                                                                                                                        start declaration line:1109
                                                                                                                                            start specify or qualify node
                                                                                                                                            finish specify or qualify node
                                                                                                                                            start declarator
                                                                                                                                            finish declarator
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end primary expr
                                                                                                                                        finish declaration
                                                                                                                                        start relation expr
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end primary expr
                                                                                                                                            start add
                                                                                                                                                start postfix expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< unsigned_int >
                                                                                                                                                end postfix expr
                                                                                                                                                start primary expr
                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                end primary expr
                                                                                                                                            <Type>:< unsigned_int >
                                                                                                                                            end add
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end relation expr
                                                                                                                                        start unary
                                                                                                                                            start primary expr
                                                                                                                                            <Type>:< signed_int >
                                                                                                                                            end primary expr
                                                                                                                                        <Type>:< signed_int >
                                                                                                                                        end unary
                                                                                                                                        start compound expr
                                                                                                                                            start expr expr
                                                                                                                                                start postfix expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                                                    end primary expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< extern , signed_int >
                                                                                                                                                end postfix expr
                                                                                                                                            end comopound stmt
                                                                                                                                        end for stmt
                                                                                                                                        start expr expr
                                                                                                                                            start postfix expr
                                                                                                                                                start primary expr
                                                                                                                                                <Type>:< function , extern , signed_int >
                                                                                                                                                end primary expr
                                                                                                                                                start primary expr
                                                                                                                                                <Type>:< point , signed_char >
                                                                                                                                                end primary expr
                                                                                                                                                start primary expr
                                                                                                                                                    start postfix expr
                                                                                                                                                        start primary expr
                                                                                                                                                            start cast
                                                                                                                                                                start specify or qualify node
                                                                                                                                                                finish specify or qualify node
                                                                                                                                                                start primary expr
                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                end primary expr
                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                            end cast
                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                        end primary expr
                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                    end postfix expr
                                                                                                                                                <Type>:< unsigned_long >
                                                                                                                                                end primary expr
                                                                                                                                            <Type>:< extern , signed_int >
                                                                                                                                            end postfix expr
                                                                                                                                            start for expr
                                                                                                                                                start declaration line:1113
                                                                                                                                                    start specify or qualify node
                                                                                                                                                    finish specify or qualify node
                                                                                                                                                    start declarator
                                                                                                                                                    finish declarator
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                    end primary expr
                                                                                                                                                finish declaration
                                                                                                                                                start relation expr
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                    end primary expr
                                                                                                                                                    start primary expr
                                                                                                                                                        start postfix expr
                                                                                                                                                            start primary expr
                                                                                                                                                                start cast
                                                                                                                                                                    start specify or qualify node
                                                                                                                                                                    finish specify or qualify node
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                    end primary expr
                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                end cast
                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                            end primary expr
                                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                                        end postfix expr
                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                end relation expr
                                                                                                                                                start unary
                                                                                                                                                    start primary expr
                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                    end primary expr
                                                                                                                                                <Type>:< unsigned_long >
                                                                                                                                                end unary
                                                                                                                                                start compound expr
                                                                                                                                                    start declaration line:1114
                                                                                                                                                        start specify or qualify node
                                                                                                                                                        finish specify or qualify node
                                                                                                                                                        start declarator
                                                                                                                                                        finish declarator
                                                                                                                                                        start primary expr
                                                                                                                                                            start condition expr
                                                                                                                                                                start primary expr
                                                                                                                                                                    start logical and expr
                                                                                                                                                                        start equal expr
                                                                                                                                                                            start postfix expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                    start cast
                                                                                                                                                                                        start specify or qualify node
                                                                                                                                                                                        finish specify or qualify node
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                                    end cast
                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                            end postfix expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end equal expr
                                                                                                                                                                        start relation expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                            end primary expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                                start postfix expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                        start cast
                                                                                                                                                                                            start specify or qualify node
                                                                                                                                                                                            finish specify or qualify node
                                                                                                                                                                                            start primary expr
                                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                                            end primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end cast
                                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                <Type>:< unsigned_long >
                                                                                                                                                                                end postfix expr
                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end relation expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end logical and expr
                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                end primary expr
                                                                                                                                                                start primary expr
                                                                                                                                                                    start postfix expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                            start cast
                                                                                                                                                                                start specify or qualify node
                                                                                                                                                                                finish specify or qualify node
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                            end cast
                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                        end primary expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    <Type>:< point , void >
                                                                                                                                                                    end postfix expr
                                                                                                                                                                <Type>:< point , void >
                                                                                                                                                                end primary expr
                                                                                                                                                                start primary expr
                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                end primary expr
                                                                                                                                                            <Type>:< point , void >
                                                                                                                                                            end condition expr
                                                                                                                                                        <Type>:< point , void >
                                                                                                                                                        end primary expr
                                                                                                                                                    finish declaration
                                                                                                                                                    start if expr
                                                                                                                                                        start primary expr
                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                        end primary expr
                                                                                                                                                        start compound expr
                                                                                                                                                            start for expr
                                                                                                                                                                start declaration line:1116
                                                                                                                                                                    start specify or qualify node
                                                                                                                                                                    finish specify or qualify node
                                                                                                                                                                    start declarator
                                                                                                                                                                    finish declarator
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end primary expr
                                                                                                                                                                finish declaration
                                                                                                                                                                start relation expr
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end primary expr
                                                                                                                                                                    start add
                                                                                                                                                                        start postfix expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< unsigned_int >
                                                                                                                                                                        end postfix expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    <Type>:< unsigned_int >
                                                                                                                                                                    end add
                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                end relation expr
                                                                                                                                                                start unary
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end primary expr
                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                end unary
                                                                                                                                                                start compound expr
                                                                                                                                                                    start expr expr
                                                                                                                                                                        start postfix expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< function , extern , signed_int >
                                                                                                                                                                            end primary expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< point , signed_char >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< extern , signed_int >
                                                                                                                                                                        end postfix expr
                                                                                                                                                                    end comopound stmt
                                                                                                                                                                end for stmt
                                                                                                                                                                start if expr
                                                                                                                                                                    start postfix expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                                                    end postfix expr
                                                                                                                                                                    start compound expr
                                                                                                                                                                        start if expr
                                                                                                                                                                            start postfix expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< bool >
                                                                                                                                                                            end postfix expr
                                                                                                                                                                            start expr expr
                                                                                                                                                                                start postfix expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                <Type>:< extern , signed_int >
                                                                                                                                                                                end postfix expr
                                                                                                                                                                                start expr expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< function , extern , signed_int >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , signed_char >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                        start postfix expr
                                                                                                                                                                                            start primary expr
                                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                                            end primary expr
                                                                                                                                                                                        <Type>:< point , signed_char >
                                                                                                                                                                                        end postfix expr
                                                                                                                                                                                        start postfix expr
                                                                                                                                                                                            start primary expr
                                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                                            end primary expr
                                                                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                                                                        end postfix expr
                                                                                                                                                                                    <Type>:< extern , signed_int >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                end if stmt
                                                                                                                                                                            end comopound stmt
                                                                                                                                                                            start compound expr
                                                                                                                                                                                start if expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< bool >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                    start expr expr
                                                                                                                                                                                        start postfix expr
                                                                                                                                                                                            start primary expr
                                                                                                                                                                                            <Type>:< function , extern , signed_int >
                                                                                                                                                                                            end primary expr
                                                                                                                                                                                            start primary expr
                                                                                                                                                                                            <Type>:< point , signed_char >
                                                                                                                                                                                            end primary expr
                                                                                                                                                                                            start postfix expr
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                                            end postfix expr
                                                                                                                                                                                            start postfix expr
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                                            end postfix expr
                                                                                                                                                                                            start postfix expr
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                                            end postfix expr
                                                                                                                                                                                        <Type>:< extern , signed_int >
                                                                                                                                                                                        end postfix expr
                                                                                                                                                                                        start expr expr
                                                                                                                                                                                            start postfix expr
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< function , extern , signed_int >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< point , signed_char >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                                start postfix expr
                                                                                                                                                                                                    start primary expr
                                                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                                                    end primary expr
                                                                                                                                                                                                <Type>:< unsigned_long >
                                                                                                                                                                                                end postfix expr
                                                                                                                                                                                            <Type>:< extern , signed_int >
                                                                                                                                                                                            end postfix expr
                                                                                                                                                                                        end if stmt
                                                                                                                                                                                    end comopound stmt
                                                                                                                                                                                end if stmt
                                                                                                                                                                            end comopound stmt
                                                                                                                                                                        end if stmt
                                                                                                                                                                    end comopound stmt
                                                                                                                                                                end for stmt
                                                                                                                                                                start for expr
                                                                                                                                                                    start declaration line:1135
                                                                                                                                                                        start specify or qualify node
                                                                                                                                                                        finish specify or qualify node
                                                                                                                                                                        start declarator
                                                                                                                                                                        finish declarator
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    finish declaration
                                                                                                                                                                    start relation expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end primary expr
                                                                                                                                                                        start add
                                                                                                                                                                            start postfix expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< unsigned_int >
                                                                                                                                                                            end postfix expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< unsigned_int >
                                                                                                                                                                        end add
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end relation expr
                                                                                                                                                                    start unary
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end unary
                                                                                                                                                                    start compound expr
                                                                                                                                                                        start expr expr
                                                                                                                                                                            start postfix expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< function , extern , signed_int >
                                                                                                                                                                                end primary expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< point , signed_char >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< extern , signed_int >
                                                                                                                                                                            end postfix expr
                                                                                                                                                                        end comopound stmt
                                                                                                                                                                    end for stmt
                                                                                                                                                                    start expr expr
                                                                                                                                                                        start postfix expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< function , extern , signed_int >
                                                                                                                                                                            end primary expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< point , signed_char >
                                                                                                                                                                            end primary expr
                                                                                                                                                                            start postfix expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                    start cast
                                                                                                                                                                                        start specify or qualify node
                                                                                                                                                                                        finish specify or qualify node
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                                    end cast
                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                            end postfix expr
                                                                                                                                                                            start postfix expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                    start cast
                                                                                                                                                                                        start specify or qualify node
                                                                                                                                                                                        finish specify or qualify node
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                                    end cast
                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                            end postfix expr
                                                                                                                                                                        <Type>:< extern , signed_int >
                                                                                                                                                                        end postfix expr
                                                                                                                                                                    end comopound stmt
                                                                                                                                                                end if stmt
                                                                                                                                                                start if expr
                                                                                                                                                                    start equal expr
                                                                                                                                                                        start postfix expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                        end postfix expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< const , signed_int >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end equal expr
                                                                                                                                                                    start compound expr
                                                                                                                                                                        start for expr
                                                                                                                                                                            start declaration line:1142
                                                                                                                                                                                start specify or qualify node
                                                                                                                                                                                finish specify or qualify node
                                                                                                                                                                                start declarator
                                                                                                                                                                                finish declarator
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            finish declaration
                                                                                                                                                                            start relation expr
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                                end primary expr
                                                                                                                                                                                start add
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< unsigned_int >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                <Type>:< unsigned_int >
                                                                                                                                                                                end add
                                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                                            end relation expr
                                                                                                                                                                            start unary
                                                                                                                                                                                start primary expr
                                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                                end primary expr
                                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                                            end unary
                                                                                                                                                                            start compound expr
                                                                                                                                                                                start expr expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< function , extern , signed_int >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< point , signed_char >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< extern , signed_int >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                end comopound stmt
                                                                                                                                                                            end for stmt
                                                                                                                                                                            start expr expr
                                                                                                                                                                                start postfix expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< function , extern , signed_int >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< point , signed_char >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                    start postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                            start cast
                                                                                                                                                                                                start specify or qualify node
                                                                                                                                                                                                finish specify or qualify node
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                                            end cast
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                                                    end postfix expr
                                                                                                                                                                                <Type>:< extern , signed_int >
                                                                                                                                                                                end postfix expr
                                                                                                                                                                            end comopound stmt
                                                                                                                                                                        end if stmt
                                                                                                                                                                    end comopound stmt
                                                                                                                                                                end if stmt
                                                                                                                                                            end if stmt
                                                                                                                                                        end comopound stmt
                                                                                                                                                    end for stmt
                                                                                                                                                    start for expr
                                                                                                                                                        start declaration line:1150
                                                                                                                                                            start specify or qualify node
                                                                                                                                                            finish specify or qualify node
                                                                                                                                                            start declarator
                                                                                                                                                            finish declarator
                                                                                                                                                            start primary expr
                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                            end primary expr
                                                                                                                                                        finish declaration
                                                                                                                                                        start relation expr
                                                                                                                                                            start primary expr
                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                            end primary expr
                                                                                                                                                            start primary expr
                                                                                                                                                                start postfix expr
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                    end primary expr
                                                                                                                                                                <Type>:< unsigned_long >
                                                                                                                                                                end postfix expr
                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                            end primary expr
                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                        end relation expr
                                                                                                                                                        start unary
                                                                                                                                                            start primary expr
                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                            end primary expr
                                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                                        end unary
                                                                                                                                                        start compound expr
                                                                                                                                                            start declaration line:1151
                                                                                                                                                                start specify or qualify node
                                                                                                                                                                finish specify or qualify node
                                                                                                                                                                start declarator
                                                                                                                                                                finish declarator
                                                                                                                                                                start cast
                                                                                                                                                                    start specify or qualify node
                                                                                                                                                                    finish specify or qualify node
                                                                                                                                                                    start primary expr
                                                                                                                                                                        start condition expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                                start logical and expr
                                                                                                                                                                                    start equal expr
                                                                                                                                                                                        start postfix expr
                                                                                                                                                                                            start primary expr
                                                                                                                                                                                            <Type>:< point , struct >
                                                                                                                                                                                            end primary expr
                                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                                        end postfix expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< signed_int >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                                    end equal expr
                                                                                                                                                                                    start relation expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                        start primary expr
                                                                                                                                                                                            start postfix expr
                                                                                                                                                                                                start primary expr
                                                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                                                end primary expr
                                                                                                                                                                                            <Type>:< unsigned_long >
                                                                                                                                                                                            end postfix expr
                                                                                                                                                                                        <Type>:< unsigned_long >
                                                                                                                                                                                        end primary expr
                                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                                    end relation expr
                                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                                end logical and expr
                                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                                            end primary expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                                start postfix expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                    start primary expr
                                                                                                                                                                                    <Type>:< unsigned_long >
                                                                                                                                                                                    end primary expr
                                                                                                                                                                                <Type>:< point , void >
                                                                                                                                                                                end postfix expr
                                                                                                                                                                            <Type>:< point , void >
                                                                                                                                                                            end primary expr
                                                                                                                                                                            start primary expr
                                                                                                                                                                            <Type>:< signed_int >
                                                                                                                                                                            end primary expr
                                                                                                                                                                        <Type>:< point , void >
                                                                                                                                                                        end condition expr
                                                                                                                                                                    <Type>:< point , void >
                                                                                                                                                                    end primary expr
                                                                                                                                                                <Type>:< point , struct >
                                                                                                                                                                end cast
                                                                                                                                                            finish declaration
                                                                                                                                                            start if expr
                                                                                                                                                                start equal expr
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< point , struct >
                                                                                                                                                                    end primary expr
                                                                                                                                                                    start primary expr
                                                                                                                                                                    <Type>:< signed_int >
                                                                                                                                                                    end primary expr
                                                                                                                                                                <Type>:< signed_int >
                                                                                                                                                                end equal expr
                                                                                                                                                                start expr expr
                                                                                                                                                                    start postfix expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< function , void >
                                                                                                                                                                        end primary expr
                                                                                                                                                                        start primary expr
                                                                                                                                                                        <Type>:< point , struct >
                                                                                                                                                                        end primary expr
                                                                                                                                                                    <Type>:< void >
                                                                                                                                                                    end postfix expr
                                                                                                                                                                end if stmt
                                                                                                                                                            end comopound stmt
                                                                                                                                                        end for stmt
                                                                                                                                                    end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start declaration line:1157
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                <Type>:< function , point , struct >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< point , struct >
            end postfix expr
        finish declaration
        start declaration line:1158
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish declaration
        start for expr
            start declaration line:1159
                start specify or qualify node
                finish specify or qualify node
                start declarator
                finish declarator
                start primary expr
                <Type>:< signed_int >
                end primary expr
            finish declaration
            start relation expr
                start primary expr
                <Type>:< unsigned_long >
                end primary expr
                start postfix expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                <Type>:< unsigned_long_long_int >
                end postfix expr
            <Type>:< signed_int >
            end relation expr
            start unary
                start primary expr
                <Type>:< unsigned_long >
                end primary expr
            <Type>:< unsigned_long >
            end unary
            start compound expr
                start if expr
                    start primary expr
                        start postfix expr
                            start primary expr
                            <Type>:< point , struct >
                            end primary expr
                            start primary expr
                            <Type>:< unsigned_long >
                            end primary expr
                        <Type>:< point , void >
                        end postfix expr
                    <Type>:< point , void >
                    end primary expr
                    start compound expr
                        start expr expr
                            start assignment expr
                                start primary expr
                                <Type>:< point , struct >
                                end primary expr
                                start cast
                                    start specify or qualify node
                                    finish specify or qualify node
                                    start primary expr
                                        start condition expr
                                            start primary expr
                                                start relation expr
                                                    start primary expr
                                                    <Type>:< unsigned_long >
                                                    end primary expr
                                                    start postfix expr
                                                        start primary expr
                                                        <Type>:< point , struct >
                                                        end primary expr
                                                    <Type>:< unsigned_long_long_int >
                                                    end postfix expr
                                                <Type>:< signed_int >
                                                end relation expr
                                            <Type>:< signed_int >
                                            end primary expr
                                            start primary expr
                                                start postfix expr
                                                    start primary expr
                                                    <Type>:< point , struct >
                                                    end primary expr
                                                    start primary expr
                                                    <Type>:< unsigned_long >
                                                    end primary expr
                                                <Type>:< point , void >
                                                end postfix expr
                                            <Type>:< point , void >
                                            end primary expr
                                            start primary expr
                                            <Type>:< signed_int >
                                            end primary expr
                                        <Type>:< point , void >
                                        end condition expr
                                    <Type>:< point , void >
                                    end primary expr
                                <Type>:< point , struct >
                                end cast
                            <Type>:< point , struct >
                            end assignment expr
                            start expr expr
                                start postfix expr
                                    start primary expr
                                    <Type>:< function , void >
                                    end primary expr
                                    start primary expr
                                    <Type>:< point , struct >
                                    end primary expr
                                    start cast
                                        start specify or qualify node
                                        finish specify or qualify node
                                        start primary expr
                                        <Type>:< point , struct >
                                        end primary expr
                                    <Type>:< point , void >
                                    end cast
                                <Type>:< void >
                                end postfix expr
                            end comopound stmt
                        end if stmt
                    end comopound stmt
                end for stmt
                start return expr
                    start primary expr
                    <Type>:< point , struct >
                    end primary expr
                end return stmt
            end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start unary
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
            <Type>:< signed_int >
            end unary
            start return expr
                start primary expr
                <Type>:< unsigned_int >
                end primary expr
            end return stmt
        end if stmt
        start declaration line:1170
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start primary expr
            <Type>:< unsigned_int >
            end primary expr
        finish declaration
        start while expr
            start equal expr
                start unary
                    start primary expr
                    <Type>:< point , signed_char >
                    end primary expr
                <Type>:< signed_char >
                end unary
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end equal expr
            start compound expr
                start expr expr
                    start assignment expr
                        start primary expr
                        <Type>:< unsigned_long_long_int >
                        end primary expr
                        start mul
                            start primary expr
                            <Type>:< unsigned_long_long_int >
                            end primary expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< unsigned_long_long_int >
                        end mul
                    <Type>:< unsigned_long_long_int >
                    end assignment expr
                    start expr expr
                        start assignment expr
                            start primary expr
                            <Type>:< unsigned_long_long_int >
                            end primary expr
                            start add
                                start primary expr
                                <Type>:< unsigned_long_long_int >
                                end primary expr
                                start add
                                    start primary expr
                                        start unary
                                            start primary expr
                                            <Type>:< point , signed_char >
                                            end primary expr
                                        <Type>:< signed_char >
                                        end unary
                                    <Type>:< signed_char >
                                    end primary expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                <Type>:< signed_int >
                                end add
                            <Type>:< unsigned_long_long_int >
                            end add
                        <Type>:< unsigned_long_long_int >
                        end assignment expr
                        start expr expr
                            start postfix expr
                                start primary expr
                                <Type>:< point , signed_char >
                                end primary expr
                            <Type>:< point , signed_char >
                            end postfix expr
                        end comopound stmt
                    end while stmt
                    start return expr
                        start primary expr
                        <Type>:< unsigned_long_long_int >
                        end primary expr
                    end return stmt
                end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start logical and expr
                start equal expr
                    start postfix expr
                        start primary expr
                            start cast
                                start specify or qualify node
                                finish specify or qualify node
                                start primary expr
                                <Type>:< point , void >
                                end primary expr
                            <Type>:< point , struct >
                            end cast
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_int >
                    end postfix expr
                    start postfix expr
                        start primary expr
                            start cast
                                start specify or qualify node
                                finish specify or qualify node
                                start primary expr
                                <Type>:< point , void >
                                end primary expr
                            <Type>:< point , struct >
                            end cast
                        <Type>:< point , struct >
                        end primary expr
                    <Type>:< unsigned_int >
                    end postfix expr
                <Type>:< signed_int >
                end equal expr
                start equal expr
                    start postfix expr
                        start primary expr
                        <Type>:< function , extern , signed_int >
                        end primary expr
                        start postfix expr
                            start primary expr
                                start cast
                                    start specify or qualify node
                                    finish specify or qualify node
                                    start primary expr
                                    <Type>:< point , void >
                                    end primary expr
                                <Type>:< point , struct >
                                end cast
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< point , signed_char >
                        end postfix expr
                        start postfix expr
                            start primary expr
                                start cast
                                    start specify or qualify node
                                    finish specify or qualify node
                                    start primary expr
                                    <Type>:< point , void >
                                    end primary expr
                                <Type>:< point , struct >
                                end cast
                            <Type>:< point , struct >
                            end primary expr
                        <Type>:< point , signed_char >
                        end postfix expr
                    <Type>:< extern , signed_int >
                    end postfix expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< signed_int >
                end equal expr
            <Type>:< signed_int >
            end logical and expr
            start compound expr
                start return expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                end return stmt
            end comopound stmt
            start return expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            end return stmt
        end if stmt
    end comopound stmt
start print symbol table
scope type:file_scope with child 158 and namespace 0
    <symbol table>
        <symbol:count ns:174 linkage:0>
            type::< unsigned_int >
        <symbol:find_symbol_curr_table ns:1 linkage:2>
            type::< function , point , struct >
                function have 3 parameters are:
                    symbol_table
                    symbol
                    name_space
        <symbol:hash_table ns:2 linkage:0>
            type::< struct >
                struct have 4 members are:
                    < data off:0 >
                    < capicity off:8 >
                    < capicity_index off:16 >
                    < record_num off:24 >
                total size:32 align size:8
        <symbol:C0075_ERR_FOR_DECLARATION_STOR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_ARRAY ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:W0001_WARN_NONE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0010_ERR_NEED_MORE_TYPE_SPEC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:level ns:236 linkage:0>
            type::< unsigned_int >
        <symbol:_IO_read_ptr ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:fwrite ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 4 parameters are:
                    ptr
                    size
                    nmemb
                    stream
        <symbol:ferror ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    stream
        <symbol:C0072_ERR_ASSIGN_OPERAND ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_IO_marker ns:2 linkage:0>
            type::< struct >
        <symbol:strcpy ns:1 linkage:2>
            type::< function , point , extern , signed_char >
                function have 2 parameters are:
                    s1
                    s2
        <symbol:C0053_ERR_EXPR_STRUCT_UNION_DOT_TYPE_WRONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Create_symbol_table ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    father
                    type
        <symbol:uintptr_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0016_ERR_UNDECLARATION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:key ns:183 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:Type_VEC_get_Pointer_TO ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    type_vec
                    is_pointer
        <symbol:int_fast64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:HASH ns:1 linkage:2>
            type::< typedef_name >
        <symbol:data_size ns:188 linkage:0>
            type::< unsigned_int >
        <symbol:__off64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:strtoul ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 3 parameters are:
                    nptr
                    endptr
                    base
        <symbol:C0006_ERR_NOT_IN_SYMBOL_TABLE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:bit_field ns:181 linkage:0>
            type::< bool >
        <symbol:__wch ns:8 linkage:0>
            type::< unsigned_int >
        <symbol:key ns:188 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:typ_category ns:192 linkage:0>
            type::< enum >
        <symbol:data_size ns:238 linkage:0>
            type::< unsigned_long >
        <symbol:Type_VEC_change_actual_base_type ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    type_vec
                    tmp_type
        <symbol:typ_category ns:179 linkage:0>
            type::< enum >
        <symbol:strtod ns:1 linkage:2>
            type::< function , extern , double >
                function have 2 parameters are:
                    nptr
                    endptr
        <symbol:strtof ns:1 linkage:2>
            type::< function , extern , float >
                function have 2 parameters are:
                    nptr
                    endptr
        <symbol:LKA_EXTERN ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:is_star ns:183 linkage:0>
            type::< bool >
        <symbol:members ns:186 linkage:0>
            type::< point , struct >
        <symbol:_IO_save_base ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:int64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:complete ns:188 linkage:0>
            type::< bool >
        <symbol:_lock ns:19 linkage:0>
            type::< point , void >
        <symbol:C0046_ERR_FUNC_VOID_MORE_THAN_ONE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:uint_fast64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:strtol ns:1 linkage:2>
            type::< function , extern , signed_long >
                function have 3 parameters are:
                    nptr
                    endptr
                    base
        <symbol:func_name ns:188 linkage:0>
            type::< point , signed_char >
        <symbol:member_name ns:181 linkage:0>
            type::< point , signed_char >
        <symbol:C0040_ERR_ARR_FUNCTIONS_INCOMPLETE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_flags2 ns:19 linkage:0>
            type::< signed_int >
        <symbol:fscanf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    stream
                    format
        <symbol:W0003_WARN_NO_DECLARATION_ANY_THING ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:line_number ns:125 linkage:0>
            type::< unsigned_int >
        <symbol:sys_malloc_cnt ns:138 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:TP_DEF_TYPE ns:1 linkage:2>
            type::< typedef_name >
        <symbol:error_line ns:127 linkage:0>
            type::< unsigned_int >
        <symbol:typ_category ns:188 linkage:0>
            type::< enum >
        <symbol:sym_table ns:2 linkage:0>
            type::< struct >
                struct have 10 members are:
                    < level off:0 >
                    < father off:8 >
                    < child_table off:16 >
                    < sym_hash_table off:24 >
                    < sp_type off:32 >
                    < name_space off:36 >
                    < typedef_name_table off:40 >
                    < enum_const_table off:48 >
                    < st_attr_type off:56 >
                    < st_attr off:64 >
                total size:72 align size:8
        <symbol:C0085_ERR_FUNC_PARA_OLD_NOT_FIND ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0034_ERR_ARR_STAR_SCOPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:m_error ns:1 linkage:2>
            type::< function , void >
                function have 3 parameters are:
                    filename
                    function
                    reason
        <symbol:ptrdiff_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:linkage_type ns:2 linkage:0>
            type::< enum >
        <symbol:C0091_ERR_INIT_TYPE_COMPLETE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:name_space ns:181 linkage:0>
            type::< unsigned_int >
        <symbol:M_TYPE ns:1 linkage:2>
            type::< typedef_name >
        <symbol:c16rtomb ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 3 parameters are:
                    s
                    c16
                    ps
        <symbol:mbrtoc16 ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 4 parameters are:
                    pc16
                    s
                    n
                    p
        <symbol:C0067_ERR_ADD_OPERAND_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:m_test_arg_char ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    item_arg
        <symbol:align_spec ns:176 linkage:0>
            type::< unsigned_long >
        <symbol:have_default ns:242 linkage:0>
            type::< bool >
        <symbol:capicity ns:148 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:tag ns:186 linkage:0>
            type::< point , signed_char >
        <symbol:is_legal_align ns:1 linkage:0>
            type::< function , extern  inline , bool >
                function have 1 parameters are:
                    align_size
        <symbol:fsetpos ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    stream
                    pos
        <symbol:ungetc ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    c
                    stream
        <symbol:TestHASH ns:1 linkage:2>
            type::< function , void >
                no parameter
        <symbol:para_name ns:190 linkage:0>
            type::< point , signed_char >
        <symbol:data_size ns:186 linkage:0>
            type::< unsigned_int >
        <symbol:uint8_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:MEM_POOL ns:1 linkage:2>
            type::< typedef_name >
        <symbol:end ns:125 linkage:0>
            type::< unsigned_long >
        <symbol:VECshrink ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    v
        <symbol:TP_POINT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:HASHDELITEM ns:1 linkage:2>
            type::< function , bool >
                function have 3 parameters are:
                    h
                    del_item
                    cmp
        <symbol:integer_promotion ns:1 linkage:2>
            type::< function , bool >
                function have 1 parameters are:
                    integer_operand
        <symbol:FSPEC_NONE ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:mbrtoc32 ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 4 parameters are:
                    pc32
                    s
                    n
                    p
        <symbol:modifier ns:174 linkage:0>
            type::< bool >
        <symbol:count ns:179 linkage:0>
            type::< unsigned_int >
        <symbol:declared ns:238 linkage:0>
            type::< bool >
        <symbol:func_parameters ns:188 linkage:0>
            type::< point , struct >
        <symbol:Type_VEC_get_actual_base_type ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    type_vec
        <symbol:count ns:101 linkage:0>
            type::< signed_int >
        <symbol:hash_item ns:2 linkage:0>
            type::< struct >
                struct have 2 members are:
                    < key off:0 >
                    < count off:8 >
                total size:16 align size:8
        <symbol:wchb ns:102 linkage:0>
            type::< array , signed_char >
                array len is: 4
        <symbol:malloc_cnt ns:138 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:data_align ns:179 linkage:0>
            type::< unsigned_long >
        <symbol:C0068_ERR_MINUS_OPERAND_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_EXTERN_THREAD_LOCAL ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:typedef_name_table ns:236 linkage:0>
            type::< point , struct >
        <symbol:VECcpy ns:1 linkage:2>
            type::< function , void >
                function have 2 parameters are:
                    src
                    dst
        <symbol:key ns:238 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:C0074_ERR_FUNC_PARA_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:memcpy ns:1 linkage:2>
            type::< function , point , extern , void >
                function have 3 parameters are:
                    s1
                    s2
                    n
        <symbol:vector ns:2 linkage:0>
            type::< struct >
                struct have 3 members are:
                    < data off:0 >
                    < capicity off:8 >
                    < len off:16 >
                total size:24 align size:8
        <symbol:TP_STATIC_THREAD_LOCAL ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:is_old_style ns:188 linkage:0>
            type::< bool >
        <symbol:_IO_buf_base ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:count ns:238 linkage:0>
            type::< unsigned_int >
        <symbol:TP_LONG_DOUBLE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:sshort ns:194 linkage:0>
            type::< signed_short >
        <symbol:uint32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:__ctype_get_mb_cur_max ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                no parameter
        <symbol:C0043_ERR_FUN_RETURN_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:linkage ns:238 linkage:0>
            type::< enum >
        <symbol:enum_const_table ns:236 linkage:0>
            type::< point , struct >
        <symbol:Type_VEC_unqualifier ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    type_vec
                    is_qual
        <symbol:m_error_item ns:1 linkage:0>
            type::< function , point , extern  inline , void >
                function have 5 parameters are:
                    tei
                    ce
                    filename
                    error_line
                    error_token_value
        <symbol:st_attr ns:236 linkage:0>
            type::< point , void >
        <symbol:_cur_column ns:19 linkage:0>
            type::< unsigned_short >
        <symbol:modifier ns:188 linkage:0>
            type::< bool >
        <symbol:TP_FUNC ns:1 linkage:2>
            type::< typedef_name >
        <symbol:setbuf ns:1 linkage:2>
            type::< function , extern , void >
                function have 2 parameters are:
                    stream
                    buf
        <symbol:m_test_item ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    test_item_name
        <symbol:ERROR_ITEM ns:1 linkage:2>
            type::< typedef_name >
        <symbol:insert_symbol ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    symbol_table
                    symbol_item
        <symbol:TP_ENUMERA ns:1 linkage:2>
            type::< typedef_name >
        <symbol:type_vec ns:181 linkage:0>
            type::< point , struct >
        <symbol:axis_size ns:184 linkage:0>
            type::< unsigned_long >
        <symbol:C0059_ERR_OPERAND_SHOULD_POINTER ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Type_VEC_get_func_return_type ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    type_vec
                    is_function
        <symbol:sscanf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    s
                    format
        <symbol:rename ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    old
                    new
        <symbol:total_data_size ns:179 linkage:0>
            type::< unsigned_long >
        <symbol:schar ns:194 linkage:0>
            type::< signed_char >
        <symbol:C0030_ERR_LKA_NO_FOLLOW_EXTERN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:VALUE_DATA ns:1 linkage:2>
            type::< typedef_name >
        <symbol:complete ns:183 linkage:0>
            type::< bool >
        <symbol:sllong ns:194 linkage:0>
            type::< signed_long_long_int >
        <symbol:VALUE ns:2 linkage:0>
            type::< struct >
                struct have 2 members are:
                    < const_expr_type off:0 >
                    < const_value off:8 >
                total size:16 align size:8
        <symbol:c32rtomb ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 3 parameters are:
                    s
                    c32
                    ps
        <symbol:TP_SSHORT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:uint16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0070_ERR_EQUAL_OPERAND ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_USLONGLONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:have_flex_array ns:179 linkage:0>
            type::< bool >
        <symbol:key ns:192 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:uschar ns:194 linkage:0>
            type::< unsigned_char >
        <symbol:sprintf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    s
                    format
        <symbol:ftell ns:1 linkage:2>
            type::< function , extern , signed_long >
                function have 1 parameters are:
                    stream
        <symbol:compatible_types ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    type_vec_a
                    type_vec_b
        <symbol:VECinsert ns:1 linkage:2>
            type::< function , void >
                function have 2 parameters are:
                    v
                    p
        <symbol:fclose ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    stream
        <symbol:C0015_ERR_REDEFINATION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0024_ERR_BIT_FIELD_WIDTH_INT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:SPT_FUN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_DOUBLE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:__off_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:tmpnam ns:1 linkage:2>
            type::< function , point , extern , signed_char >
                function have 1 parameters are:
                    s
        <symbol:mbtowc ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 3 parameters are:
                    pwc
                    str
                    n
        <symbol:TP_EXTERN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0029_ERR_LKA_EXTERN_FOLLOW_NO ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:data ns:148 linkage:0>
            type::< point , point , void >
        <symbol:scope_type ns:2 linkage:0>
            type::< enum >
        <symbol:TP_FLOAT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:putc ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    c
                    stream
        <symbol:m_alloc ns:1 linkage:2>
            type::< function , point , void >
                function have 1 parameters are:
                    n
        <symbol:perror ns:1 linkage:2>
            type::< function , extern , void >
                function have 1 parameters are:
                    s
        <symbol:scanf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    format
        <symbol:sym_hash_table ns:236 linkage:0>
            type::< point , struct >
        <symbol:print_type_vec ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    type_vec
        <symbol:count ns:192 linkage:0>
            type::< unsigned_int >
        <symbol:have_ret ns:240 linkage:0>
            type::< bool >
        <symbol:puts ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    s
        <symbol:freopen ns:1 linkage:2>
            type::< function , point , extern , struct >
                function have 3 parameters are:
                    filename
                    mode
                    stream
        <symbol:__count ns:7 linkage:0>
            type::< signed_int >
        <symbol:strtoull ns:1 linkage:2>
            type::< function , extern , unsigned_long_long_int >
                function have 3 parameters are:
                    nptr
                    endptr
                    base
        <symbol:_freeres_buf ns:19 linkage:0>
            type::< point , void >
        <symbol:floatcomplex ns:194 linkage:0>
            type::< array , float >
                array len is: 2
        <symbol:_IO_wide_data ns:2 linkage:0>
            type::< struct >
        <symbol:TP_USCHAR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:VECexpand ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    v
        <symbol:SPT_NONE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_AUTO ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_SPEC_NONE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:InitVEC ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    len
        <symbol:_offset ns:19 linkage:0>
            type::< signed_long >
        <symbol:LKA_NONE ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:_wide_data ns:19 linkage:0>
            type::< point , struct >
        <symbol:TP_REGISTER ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0056_ERR_EXPR_MODIFIABLE_LVALUE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:complete ns:186 linkage:0>
            type::< bool >
        <symbol:_IO_read_end ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:C0033_ERR_CONFICT_THREAD_LOCAL ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_ARR ns:1 linkage:2>
            type::< typedef_name >
        <symbol:function_spec_type ns:2 linkage:0>
            type::< enum >
        <symbol:fpos_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:TP_LABEL ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:name_space ns:238 linkage:0>
            type::< unsigned_int >
        <symbol:W0005_WARN_IMPLICIT_DEC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:fseek ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 3 parameters are:
                    stream
                    offset
                    whence
        <symbol:uint_least32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:tmpfile ns:1 linkage:2>
            type::< function , point , extern , struct >
                no parameter
        <symbol:_unused2 ns:19 linkage:0>
            type::< array , signed_char >
                array len is: 20
        <symbol:m_error_arg_int ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    arg
        <symbol:record_num ns:148 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:SPT_FILE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:int_least32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:TP_TYPE_DEF ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:fflush ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    stream
        <symbol:datafloat ns:194 linkage:0>
            type::< float >
        <symbol:__wchb ns:8 linkage:0>
            type::< array , signed_char >
                array len is: 4
        <symbol:const_expr ns:238 linkage:0>
            type::< bool >
        <symbol:print_type ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    tmpt
        <symbol:const_value ns:196 linkage:0>
            type::< point , struct >
        <symbol:m_free ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    p
        <symbol:int_least8_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:build_base_type ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    spec_type
        <symbol:_IO_codecvt ns:2 linkage:0>
            type::< struct >
        <symbol:filename ns:127 linkage:0>
            type::< point , signed_char >
        <symbol:C0079_ERR_IN_SWITCH_LOOP ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0014_ERR_ATOMIC_TYPE_NAME ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:remove ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    filename
        <symbol:_IO_write_ptr ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:Type_VEC_get_sub_obj_off_element_type ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    sub_obj_type
                    sub_obj_off
        <symbol:TP_STRUCT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:ce ns:127 linkage:0>
            type::< enum >
        <symbol:datadouble ns:194 linkage:0>
            type::< double >
        <symbol:C0049_ERR_LVALUE_ARR_TYPE_WRONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:modifier ns:183 linkage:0>
            type::< bool >
        <symbol:TP_SU_MEMBER ns:1 linkage:2>
            type::< typedef_name >
        <symbol:name_space ns:236 linkage:0>
            type::< unsigned_int >
        <symbol:uint_least16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:__errno_location ns:1 linkage:2>
            type::< function , point , extern , signed_int >
                no parameter
        <symbol:SymbolCharToKey ns:1 linkage:2>
            type::< function , unsigned_long_long_int >
                function have 2 parameters are:
                    symbol
                    name_space
        <symbol:Thread_local ns:238 linkage:0>
            type::< bool >
        <symbol:Type_size ns:1 linkage:2>
            type::< function , unsigned_long >
                function have 1 parameters are:
                    type_vec
        <symbol:_fileno ns:19 linkage:0>
            type::< signed_int >
        <symbol:getc ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    stream
        <symbol:uint_least8_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0092_ERR_INIT_ENTITY ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_STATIC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:size_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:int_least16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0065_ERR_SIZEOF_FUNCTION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0081_ERR_FUNC_RET_NONE_VOID ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:uint64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:SPT_FUN_PROTOTYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:key ns:186 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:int_fast8_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0057_ERR_OPERAND_BIT_FIELD ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:usint ns:194 linkage:0>
            type::< unsigned_int >
        <symbol:_G_fpos64_t ns:2 linkage:0>
            type::< struct >
                struct have 2 members are:
                    < __pos off:0 >
                    < __state off:8 >
                total size:16 align size:8
        <symbol:TP_STORAGE_SPEC ns:2 linkage:0>
            type::< enum >
        <symbol:printf_s ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    format
        <symbol:_flags ns:19 linkage:0>
            type::< signed_int >
        <symbol:m_test ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    test
        <symbol:_IO_lock_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:__mbstate_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:TP_SCHAR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:SA_FUNC ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:_codecvt ns:19 linkage:0>
            type::< point , struct >
        <symbol:__pos ns:13 linkage:0>
            type::< signed_long >
        <symbol:C0094_ERR_INIT_DESIGNATOR_IDENTIFIER ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:fread ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 4 parameters are:
                    ptr
                    size
                    nmemb
                    stream
        <symbol:C0026_ERR_BIT_FIELD_ZERO_WITH_DECLERATOR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:VECremove ns:1 linkage:2>
            type::< function , void >
                function have 3 parameters are:
                    v
                    low
                    high
        <symbol:MEMDel ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    pool
        <symbol:tag ns:179 linkage:0>
            type::< point , signed_char >
        <symbol:find_symbol ns:1 linkage:2>
            type::< function , point , struct >
                function have 3 parameters are:
                    symbol_table
                    symbol
                    name_space
        <symbol:LINE ns:1 linkage:2>
            type::< typedef_name >
        <symbol:__pad5 ns:19 linkage:0>
            type::< unsigned_long >
        <symbol:C0020_ERR_CONST_EXPR_RANGE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Type_VEC_get_spec_other ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    type_vec
        <symbol:get_symbol_hash ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    h
        <symbol:W0002_WARN_UNKNOWN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:modifier ns:186 linkage:0>
            type::< bool >
        <symbol:name ns:138 linkage:0>
            type::< array , signed_char >
                array len is: 8
        <symbol:TP_VOID ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:VECappend ns:1 linkage:0>
            type::< function , extern  inline , void >
                function have 2 parameters are:
                    src
                    dst
        <symbol:RESET_NAMESPACE ns:1 linkage:2>
            type::< function , void >
                no parameter
        <symbol:getchar ns:1 linkage:2>
            type::< function , extern , signed_int >
                no parameter
        <symbol:Type_VEC_get_element_size ns:1 linkage:2>
            type::< function , unsigned_long >
                function have 1 parameters are:
                    current_obj_type
        <symbol:TP_USHORT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:type_vec ns:190 linkage:0>
            type::< point , struct >
        <symbol:DelVEC ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    v
        <symbol:C0047_ERR_FUNC_PARA_STORAGE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:switch_value ns:242 linkage:0>
            type::< point , struct >
        <symbol:_IO_write_base ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:complete ns:192 linkage:0>
            type::< bool >
        <symbol:C0037_ERR_ARR_STATIC_THREAD_WITH_VLA ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0055_ERR_EXPR_POSTFIX_DOUBLE_P_M_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0012_ERR_COMPLEX_NOT_SUPPORT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:del_symbol_typedef_table ns:1 linkage:2>
            type::< function , void >
                function have 2 parameters are:
                    symbol_table
                    symbol
        <symbol:count ns:186 linkage:0>
            type::< unsigned_int >
        <symbol:doublecomplex ns:194 linkage:0>
            type::< array , double >
                array len is: 2
        <symbol:LINE_NUM ns:1 linkage:2>
            type::< typedef_name >
        <symbol:TP_SLONGLONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0087_ERR_FUNC_PARA_OLD_STOR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0041_ERR_VM_ID ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:feof ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    stream
        <symbol:usual_arith_conversion ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    operand_a
                    operand_b
        <symbol:putchar ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    c
        <symbol:C0028_ERR_ENUM_RANGE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_BOOL ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_IO_backup_base ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:key ns:150 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:C0050_ERR_LVALUE_FUNC_TYPE_WRONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:exit ns:1 linkage:2>
            type::< function , extern  noreturn , void >
                function have 1 parameters are:
                    status
        <symbol:pointer ns:194 linkage:0>
            type::< point , void >
        <symbol:_vtable_offset ns:19 linkage:0>
            type::< signed_char >
        <symbol:C0054_ERR_EXPR_STRUCT_UNION_POINT_TYPE_WRONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:setvbuf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 4 parameters are:
                    stream
                    buf
                    mode
                    size
        <symbol:SA_SWITCH ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:TP_UNION_STRUCT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:sym_item ns:2 linkage:0>
            type::< struct >
                struct have 14 members are:
                    < key off:0 >
                    < count off:8 >
                    < type_vec off:16 >
                    < data_size off:24 >
                    < data_field off:32 >
                    < const_expr off:40 bit_off:0 bit_size:1 >
                    < value off:48 >
                    < name_space off:56 >
                    < align_size off:60 >
                    < linkage off:64 >
                    < fspec_type off:68 >
                    < Thread_local off:72 >
                    < defined off:73 >
                    < declared off:74 >
                total size:80 align size:8
        <symbol:fgetpos ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    stream
                    pos
        <symbol:TP_FUNC_PARA ns:1 linkage:2>
            type::< typedef_name >
        <symbol:slong ns:194 linkage:0>
            type::< signed_long >
        <symbol:mcc_error ns:1 linkage:2>
            type::< function , void >
                function have 3 parameters are:
                    e
                    file_buf
                    line
        <symbol:TP_STOR_NONE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0008_ERR_TOO_MANY_STOR_SPEC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:strlen ns:1 linkage:2>
            type::< function , extern , unsigned_long >
                function have 1 parameters are:
                    s
        <symbol:have_ellipsis ns:188 linkage:0>
            type::< bool >
        <symbol:typ_stor ns:176 linkage:0>
            type::< enum >
        <symbol:MEMInit ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    name
        <symbol:C0021_ERR_STATIC_ASSERT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:__pos ns:10 linkage:0>
            type::< signed_long >
        <symbol:uint_least64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0052_ERR_EXPR_TYPE_ERROR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:m_test_arg_int ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    item_arg
        <symbol:uslong ns:194 linkage:0>
            type::< unsigned_long >
        <symbol:C0022_ERR_BIT_FIELD_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:print_symbol_table ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    symbol_table
        <symbol:fscanf_s ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    stream
                    format
        <symbol:_old_offset ns:19 linkage:0>
            type::< signed_long >
        <symbol:fspec_type ns:238 linkage:0>
            type::< enum >
        <symbol:data ns:161 linkage:0>
            type::< point , point , void >
        <symbol:sint ns:194 linkage:0>
            type::< signed_int >
        <symbol:bit_field_size ns:181 linkage:0>
            type::< unsigned_long >
        <symbol:typ_category ns:177 linkage:0>
            type::< enum >
        <symbol:bit_field_offset ns:181 linkage:0>
            type::< unsigned_long >
        <symbol:type_qual ns:176 linkage:0>
            type::< unsigned_char >
        <symbol:int_least64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:malloc ns:1 linkage:2>
            type::< function , point , extern , void >
                function have 1 parameters are:
                    size
        <symbol:C0090_ERR_ALIGN_DIFFERENT_DECLARATION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_IO_read_base ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:sys_free_cnt ns:138 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:C0051_ERR_LVALUE_REQUIRED ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:databool ns:194 linkage:0>
            type::< bool >
        <symbol:align_size ns:238 linkage:0>
            type::< signed_int >
        <symbol:child_table ns:236 linkage:0>
            type::< point , struct >
        <symbol:C0038_ERR_ARR_SIZE_INTEGER ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:char32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:Type_VEC_modify_lvalue ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    type_vec
                    is_lvalue
        <symbol:C0039_ERR_ARR_SIZE_ZERO ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_ENUM ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:typ_category ns:186 linkage:0>
            type::< enum >
        <symbol:wchar_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:Type_composite_qual ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    qual_a
                    qual_b
        <symbol:FILE ns:1 linkage:2>
            type::< typedef_name >
        <symbol:m_error_arg_char ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    arg
        <symbol:Type_VEC_get_qual ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    type_vec
        <symbol:TP_USLONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0002_ERR_UNKNOWN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:count ns:183 linkage:0>
            type::< unsigned_int >
        <symbol:SYMBOL_TABLE_SWITCH_ATTR ns:1 linkage:2>
            type::< typedef_name >
        <symbol:TP_FUNCTION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:can_be_modified_lvalue ns:179 linkage:0>
            type::< bool >
        <symbol:HASHInsert ns:1 linkage:2>
            type::< function , point , void >
                function have 3 parameters are:
                    h
                    item
                    cmp
        <symbol:compiler_error ns:2 linkage:0>
            type::< enum >
        <symbol:memset ns:1 linkage:2>
            type::< function , point , extern , void >
                function have 3 parameters are:
                    s
                    c
                    n
        <symbol:members ns:179 linkage:0>
            type::< point , struct >
        <symbol:uintmax_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:func_spec ns:176 linkage:0>
            type::< unsigned_char >
        <symbol:HASH_ITEM ns:1 linkage:2>
            type::< typedef_name >
        <symbol:scanf_s ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    format
        <symbol:_chain ns:19 linkage:0>
            type::< point , struct >
        <symbol:fprintf_s ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    stream
                    format
        <symbol:C0073_ERR_FUNC_MORE_PARAMETERS ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0045_ERR_FUNC_PARA_INCOMPLETE_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:VEC ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0080_ERR_FUNC_RET_VOID ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:CONST_VALUE ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0019_ERR_ILLEGAL_CONST_EXPR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:HASHFind ns:1 linkage:2>
            type::< function , point , struct >
                function have 5 parameters are:
                    h
                    a
                    cmp
                    delete_item
                    insert_item
        <symbol:TP_UNION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_USINT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:modifier ns:192 linkage:0>
            type::< bool >
        <symbol:C0063_ERR_OPERAND_REAL_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:char16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:W0004_WARN_DUPLICATE_QUAL ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:namespece ns:179 linkage:0>
            type::< unsigned_int >
        <symbol:TP_SINT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0042_ERR_FUN_IDENTIFIER_LIST ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:data_field ns:238 linkage:0>
            type::< point , struct >
        <symbol:__fpos_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0027_ERR_ENUM_NOT_INT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_freeres_list ns:19 linkage:0>
            type::< point , struct >
        <symbol:C0089_ERR_ALIGN_CANNOT_SPECIFIE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_IO_save_end ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:mblen ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    s
                    n
        <symbol:C0086_ERR_FUNC_PARA_OLD_NOT_DEC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:fopen ns:1 linkage:2>
            type::< function , point , extern , struct >
                function have 2 parameters are:
                    filename
                    mode
        <symbol:C0058_ERR_OPERAND_REGISTER ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0003_ERR_LEX_ERROR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_G_fpos_t ns:2 linkage:0>
            type::< struct >
                struct have 2 members are:
                    < __pos off:0 >
                    < __state off:8 >
                total size:16 align size:8
        <symbol:snprintf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 3 parameters are:
                    s
                    n
                    format
        <symbol:C0036_ERR_ARR_QUAL_STATIC_IN_PARA ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_IO_write_end ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:data_size ns:183 linkage:0>
            type::< unsigned_int >
        <symbol:C0048_ERR_LVALUE_ARR_TYPE_COMPLETE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:FSPEC_INLINE ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:assign_expr_node ns:184 linkage:0>
            type::< point , void >
        <symbol:clearerr ns:1 linkage:2>
            type::< function , extern , void >
                function have 1 parameters are:
                    stream
        <symbol:C0023_ERR_BIT_FIELD_WIDTH_EXCEED ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:usshort ns:194 linkage:0>
            type::< unsigned_short >
        <symbol:C0061_ERR_OPERAND_ARTHMATIC_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0082_ERR_FUNC_NO_ID_LIST_BUT_DEC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:SYM ns:1 linkage:2>
            type::< typedef_name >
        <symbol:function_symbol ns:240 linkage:0>
            type::< point , struct >
        <symbol:C0032_ERR_CONFICT_LINKAGE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:scope_type_str ns:1 linkage:1>
            type::< array , point , static  const , signed_char >
                array len is: 5
        <symbol:StrToKey ns:1 linkage:2>
            type::< function , unsigned_long_long_int >
                function have 1 parameters are:
                    str
        <symbol:float_promotion ns:1 linkage:2>
            type::< function , bool >
                function have 1 parameters are:
                    float_operand
        <symbol:C0009_ERR_THREAD_LOCAL_PREFIX ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:_markers ns:19 linkage:0>
            type::< point , struct >
        <symbol:symbol_item_cmp ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    a
                    b
        <symbol:C0069_ERR_NEED_COMPATIBLE_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:sscanf_s ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    s
                    format
        <symbol:free ns:1 linkage:2>
            type::< function , extern , void >
                function have 1 parameters are:
                    ptr
        <symbol:C0005_ERR_REDEFINE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:len ns:161 linkage:0>
            type::< unsigned_long >
        <symbol:count ns:188 linkage:0>
            type::< unsigned_int >
        <symbol:usllong ns:194 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:complete ns:179 linkage:0>
            type::< bool >
        <symbol:Del_symbol_table ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    symbol_table
        <symbol:C0011_ERR_WRONG_TYPE_SPEC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_SU ns:1 linkage:2>
            type::< typedef_name >
        <symbol:int_fast32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:Type_VEC_get_Array_TO ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    type_vec
                    is_array
        <symbol:__state ns:13 linkage:0>
            type::< struct >
        <symbol:printf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 1 parameters are:
                    format
        <symbol:Type_align ns:1 linkage:2>
            type::< function , unsigned_long >
                function have 1 parameters are:
                    type_vec
        <symbol:C0060_ERR_OPERAND_INTEGER_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:DelHASH ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    h
        <symbol:value ns:101 linkage:0>
            type::< union >
        <symbol:free_cnt ns:138 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:rewind ns:1 linkage:2>
            type::< function , extern , void >
                function have 1 parameters are:
                    stream
        <symbol:TP_SLONG ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0078_ERR_IN_LOOP ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:key ns:174 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:VECpopback ns:1 linkage:2>
            type::< function , void >
                function have 1 parameters are:
                    v
        <symbol:sym_table_attr_type ns:2 linkage:0>
            type::< enum >
        <symbol:SA_LOOP ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:_IO_FILE ns:2 linkage:0>
            type::< struct >
                struct have 29 members are:
                    < _flags off:0 >
                    < _IO_read_ptr off:8 >
                    < _IO_read_end off:16 >
                    < _IO_read_base off:24 >
                    < _IO_write_base off:32 >
                    < _IO_write_ptr off:40 >
                    < _IO_write_end off:48 >
                    < _IO_buf_base off:56 >
                    < _IO_buf_end off:64 >
                    < _IO_save_base off:72 >
                    < _IO_backup_base off:80 >
                    < _IO_save_end off:88 >
                    < _markers off:96 >
                    < _chain off:104 >
                    < _fileno off:112 >
                    < _flags2 off:116 >
                    < _old_offset off:120 >
                    < _cur_column off:128 >
                    < _vtable_offset off:130 >
                    < _shortbuf off:0 >
                    < _lock off:8 >
                    < _offset off:16 >
                    < _codecvt off:24 >
                    < _wide_data off:32 >
                    < _freeres_list off:40 >
                    < _freeres_buf off:48 >
                    < __pad5 off:56 >
                    < _mode off:64 >
                    < _unused2 off:0 >
                total size:24 align size:8
        <symbol:m_memset ns:1 linkage:0>
            type::< function , extern  inline , void >
                function have 3 parameters are:
                    p
                    value
                    len
        <symbol:TP_SPEC_ATOMIC ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:fputc ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    c
                    stream
        <symbol:axis_modify ns:183 linkage:0>
            type::< point , void >
        <symbol:father ns:236 linkage:0>
            type::< point , struct >
        <symbol:key ns:179 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:const_expr_type ns:196 linkage:0>
            type::< enum >
        <symbol:uint_fast32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:HASHFunction ns:1 linkage:0>
            type::< function , extern  inline , unsigned_long_long_int >
                function have 2 parameters are:
                    key
                    h
        <symbol:int32_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:SYM_ITEM ns:1 linkage:2>
            type::< typedef_name >
        <symbol:fputs ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    s
                    stream
        <symbol:TP_FLOAT_COMPLEX ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:capicity ns:161 linkage:0>
            type::< unsigned_long >
        <symbol:Type_item_cmp ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    a
                    b
        <symbol:C0001_ERR_NONE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:NMSP ns:1 linkage:2>
            type::< typedef_name >
        <symbol:is_vla ns:183 linkage:0>
            type::< bool >
        <symbol:TypeToKey ns:1 linkage:2>
            type::< function , unsigned_long_long_int >
                function have 1 parameters are:
                    t
        <symbol:del_symbol ns:1 linkage:2>
            type::< function , void >
                function have 3 parameters are:
                    symbol_table
                    symbol
                    name_space
        <symbol:C0031_ERR_CONFICT_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Type_VEC_get_Atomic_TO ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    type_vec
                    is_atomic
        <symbol:error_token_value ns:127 linkage:0>
            type::< point , signed_char >
        <symbol:int_fast16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:defined ns:238 linkage:0>
            type::< bool >
        <symbol:C0077_ERR_SWITCH_SAME_CASE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:mem_pool ns:2 linkage:0>
            type::< struct >
                struct have 5 members are:
                    < name off:0 >
                    < malloc_cnt off:8 >
                    < free_cnt off:16 >
                    < sys_malloc_cnt off:24 >
                    < sys_free_cnt off:32 >
                total size:40 align size:8
        <symbol:value ns:238 linkage:0>
            type::< point , signed_char >
        <symbol:C0025_ERR_BIT_FIELD_WIDTH_NEGATIVE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:GET_NEW_NAMESPACE ns:1 linkage:2>
            type::< function , unsigned_int >
                no parameter
        <symbol:_IO_buf_end ns:19 linkage:0>
            type::< point , signed_char >
        <symbol:C0093_ERR_INIT_DESIGNATOR_CONST_EXPR ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:line ns:2 linkage:0>
            type::< struct >
                struct have 3 members are:
                    < line_number off:0 >
                    < start off:8 >
                    < end off:16 >
                total size:24 align size:8
        <symbol:LKA_INTERN ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:data_size ns:192 linkage:0>
            type::< unsigned_int >
        <symbol:TP_TYPE_DEF_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0044_ERR_FUNC_DEF_DECL_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0007_ERR_UNEXPECTED_TOKEN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Create_symbol_item ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    symbol
                    name_space
        <symbol:Type_VEC_cmp ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    a
                    b
        <symbol:_mode ns:19 linkage:0>
            type::< signed_int >
        <symbol:C0064_ERR_SIZEOF_INCOMPLETE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:int16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:uint_fast16_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:FSPEC_NORETURN ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:typedef_name_type ns:192 linkage:0>
            type::< point , struct >
        <symbol:Type_VEC_get_sub_obj_type ns:1 linkage:2>
            type::< function , point , struct >
                function have 2 parameters are:
                    current_obj_type
                    sub_obj_size
        <symbol:lvalue_convertion ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    tmp_type_vec
        <symbol:data_size ns:179 linkage:0>
            type::< unsigned_int >
        <symbol:strtold ns:1 linkage:2>
            type::< function , extern , long_double >
                function have 2 parameters are:
                    nptr
                    endptr
        <symbol:InitHASH ns:1 linkage:2>
            type::< function , point , struct >
                no parameter
        <symbol:strtoll ns:1 linkage:2>
            type::< function , extern , signed_long_long_int >
                function have 3 parameters are:
                    nptr
                    endptr
                    base
        <symbol:C0062_ERR_OPERAND_SCALAR_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:st_attr_type ns:236 linkage:0>
            type::< enum >
        <symbol:offset ns:181 linkage:0>
            type::< unsigned_long >
        <symbol:start ns:125 linkage:0>
            type::< unsigned_long >
        <symbol:_shortbuf ns:19 linkage:0>
            type::< array , signed_char >
                array len is: 1
        <symbol:C0076_ERR_IN_SWITCH ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:__state ns:10 linkage:0>
            type::< struct >
        <symbol:Type_VEC_get_Atomic ns:1 linkage:2>
            type::< function , point , struct >
                function have 1 parameters are:
                    type_vec
        <symbol:C0018_ERR_STRUCT_INCOMPLETE_FUNCTION_TYPE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Type_VEC_VM ns:1 linkage:2>
            type::< function , bool >
                function have 1 parameters are:
                    type_vec
        <symbol:mcc_error_item ns:2 linkage:0>
            type::< struct >
                struct have 4 members are:
                    < ce off:0 >
                    < filename off:8 >
                    < error_line off:16 >
                    < error_token_value off:24 >
                total size:32 align size:8
        <symbol:mbstate_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:build_modify_type ns:1 linkage:2>
            type::< function , point , struct >
                function have 4 parameters are:
                    storage_spec_type
                    type_qual_cnt
                    func_spec_cnt
                    align_spec_cnt
        <symbol:C0066_ERR_CAST_CONVERT_POINT_FLOAT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:count ns:150 linkage:0>
            type::< unsigned_int >
        <symbol:HSAHExpand ns:1 linkage:2>
            type::< function , bool >
                function have 2 parameters are:
                    h
                    cmp
        <symbol:TP_NULL_POINTER_CONSTANT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:composite_types ns:1 linkage:2>
            type::< function , point , struct >
                function have 3 parameters are:
                    type_vec_a
                    type_vec_b
                    compatible_type
        <symbol:Type_VEC_VLA ns:1 linkage:2>
            type::< function , bool >
                function have 1 parameters are:
                    type_vec
        <symbol:W0006_WARN_NO_RETURN ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:TP_DOUBLE_COMPLEX ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:SYMBOL_TABLE_FUNC_ATTR ns:1 linkage:2>
            type::< typedef_name >
        <symbol:longdoublecomplex ns:194 linkage:0>
            type::< array , long_double >
                array len is: 2
        <symbol:SPT_BLOCK ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:SA_ATTR_NONE ns:1 linkage:0>
            type::< const , NULL pointer constant >
        <symbol:TP_CATEGORY ns:2 linkage:0>
            type::< enum >
        <symbol:fprintf ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    stream
                    format
        <symbol:C0035_ERR_ARR_QUAL_STATIC_OUTMOST ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0013_ERR_ATOMIC_UNSUPPORT ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:modifier ns:179 linkage:0>
            type::< bool >
        <symbol:capicity_index ns:148 linkage:0>
            type::< unsigned_long_long_int >
        <symbol:C0083_ERR_FUNC_PARA_INITILIZATION ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:Copy_sym_item ns:1 linkage:0>
            type::< function , extern  inline , bool >
                function have 2 parameters are:
                    new
                    old
        <symbol:wch ns:102 linkage:0>
            type::< signed_int >
        <symbol:typ_category ns:183 linkage:0>
            type::< enum >
        <symbol:fgets ns:1 linkage:2>
            type::< function , point , extern , signed_char >
                function have 3 parameters are:
                    s
                    n
                    stream
        <symbol:C0088_ERR_ALIGN_TWO_POWER ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0071_ERR_CONDITION_OPERAND ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:__value ns:7 linkage:0>
            type::< union >
        <symbol:datalongdouble ns:194 linkage:0>
            type::< long_double >
        <symbol:complete ns:174 linkage:0>
            type::< bool >
        <symbol:strcmp ns:1 linkage:2>
            type::< function , extern , signed_int >
                function have 2 parameters are:
                    s1
                    s2
        <symbol:data_size ns:177 linkage:0>
            type::< unsigned_int >
        <symbol:sp_type ns:236 linkage:0>
            type::< enum >
        <symbol:type_vec ns:238 linkage:0>
            type::< point , struct >
        <symbol:TP_LONG_DOUBLE_COMPLEX ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:C0017_ERR_TYPEDEF_OVERLAP ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:HASHCOPY ns:1 linkage:2>
            type::< function , bool >
                function have 3 parameters are:
                    dst
                    src
                    cmp
        <symbol:__fpos64_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0084_ERR_FUNC_STORAGE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:int8_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:C0004_ERR_NAMESPACE ns:1 linkage:0>
            type::< const , signed_int >
        <symbol:uint_fast8_t ns:1 linkage:2>
            type::< typedef_name >
        <symbol:intmax_t ns:1 linkage:2>
            type::< typedef_name >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:filename ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:new ns:1 linkage:0>
                type::< point , const , signed_char >
            <symbol:old ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:mode ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:filename ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:mode ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:filename ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:buf ns:1 linkage:0>
                type::< restrict , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:mode ns:1 linkage:0>
                type::< signed_int >
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:buf ns:1 linkage:0>
                type::< restrict , point , signed_char >
            <symbol:size ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , signed_char >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , signed_char >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< signed_int >
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , signed_char >
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:c ns:1 linkage:0>
                type::< signed_int >
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:c ns:1 linkage:0>
                type::< signed_int >
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:c ns:1 linkage:0>
                type::< signed_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:c ns:1 linkage:0>
                type::< signed_int >
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:nmemb ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:ptr ns:1 linkage:0>
                type::< restrict , point , void >
            <symbol:size ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:nmemb ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:ptr ns:1 linkage:0>
                type::< restrict , point , const , void >
            <symbol:size ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:pos ns:1 linkage:0>
                type::< restrict , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
            <symbol:offset ns:1 linkage:0>
                type::< signed_long >
            <symbol:whence ns:1 linkage:0>
                type::< signed_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
            <symbol:pos ns:1 linkage:0>
                type::< point , const , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:stream ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:format ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:c ns:1 linkage:0>
                type::< signed_int >
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:s ns:1 linkage:0>
                type::< point , void >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s1 ns:1 linkage:0>
                type::< point , const , signed_char >
            <symbol:s2 ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:s1 ns:1 linkage:0>
                type::< restrict , point , void >
            <symbol:s2 ns:1 linkage:0>
                type::< restrict , point , const , void >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s1 ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:s2 ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:p ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:pc16 ns:1 linkage:0>
                type::< restrict , point , unsigned_short >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:c16 ns:1 linkage:0>
                type::< unsigned_short >
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , signed_char >
            <symbol:ps ns:1 linkage:0>
                type::< restrict , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:p ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:pc32 ns:1 linkage:0>
                type::< restrict , point , unsigned_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:s ns:1 linkage:0>
                type::< restrict , point , signed_char >
            <symbol:ps ns:1 linkage:0>
                type::< restrict , point , struct >
            <symbol:c32 ns:1 linkage:0>
                type::< unsigned_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:size ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:ptr ns:1 linkage:0>
                type::< point , void >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:status ns:1 linkage:0>
                type::< signed_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:base ns:1 linkage:0>
                type::< signed_int >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:base ns:1 linkage:0>
                type::< signed_int >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:base ns:1 linkage:0>
                type::< signed_int >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:base ns:1 linkage:0>
                type::< signed_int >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:nptr ns:1 linkage:0>
                type::< restrict , point , const , signed_char >
            <symbol:endptr ns:1 linkage:0>
                type::< restrict , point , point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:pwc ns:1 linkage:0>
                type::< point , signed_int >
            <symbol:str ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:s ns:1 linkage:0>
                type::< point , const , signed_char >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 3 and namespace 0
            <symbol table>
                <symbol:align_size ns:1 linkage:0>
                    type::< unsigned_long >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:function ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:reason ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:filename ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:arg ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:arg ns:1 linkage:0>
                type::< signed_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:test ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:test_item_name ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:item_arg ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:item_arg ns:1 linkage:0>
                type::< signed_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:e ns:1 linkage:0>
                type::< point , struct >
            <symbol:file_buf ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:line ns:1 linkage:0>
                type::< point , struct >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:error_line ns:1 linkage:0>
                    type::< unsigned_int >
                <symbol:tei ns:1 linkage:0>
                    type::< point , struct >
                <symbol:filename ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:error_token_value ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:ce ns:1 linkage:0>
                    type::< enum >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:name ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:pool ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:n ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:p ns:1 linkage:0>
                type::< point , void >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:value ns:1 linkage:0>
                    type::< signed_char >
                <symbol:p ns:1 linkage:0>
                    type::< point , void >
                <symbol:len ns:1 linkage:0>
                    type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:h ns:1 linkage:0>
                    type::< point , struct >
                <symbol:key ns:1 linkage:0>
                    type::< unsigned_long_long_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 1 and namespace 0
        <symbol table>
            <symbol:h ns:1 linkage:0>
                type::< point , struct >
            <symbol:cmp ns:1 linkage:0>
                type::< point , function , bool >
                    function have 2 parameters are:
                        a
                        b
        scope type:function_prototype_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< point , void >
                <symbol:b ns:1 linkage:0>
                    type::< point , void >
    scope type:function_prototype_scope with child 1 and namespace 0
        <symbol table>
            <symbol:h ns:1 linkage:0>
                type::< point , struct >
            <symbol:item ns:1 linkage:0>
                type::< point , struct >
            <symbol:cmp ns:1 linkage:0>
                type::< point , function , bool >
                    function have 2 parameters are:
                        a
                        b
        scope type:function_prototype_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< point , void >
                <symbol:b ns:1 linkage:0>
                    type::< point , void >
    scope type:function_prototype_scope with child 1 and namespace 0
        <symbol table>
            <symbol:a ns:1 linkage:0>
                type::< point , void >
            <symbol:h ns:1 linkage:0>
                type::< point , struct >
            <symbol:delete_item ns:1 linkage:0>
                type::< bool >
            <symbol:insert_item ns:1 linkage:0>
                type::< bool >
            <symbol:cmp ns:1 linkage:0>
                type::< point , function , bool >
                    function have 2 parameters are:
                        a
                        b
        scope type:function_prototype_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< point , void >
                <symbol:b ns:1 linkage:0>
                    type::< point , void >
    scope type:function_prototype_scope with child 1 and namespace 0
        <symbol table>
            <symbol:dst ns:1 linkage:0>
                type::< point , struct >
            <symbol:cmp ns:1 linkage:0>
                type::< point , function , bool >
                    function have 2 parameters are:
                        a
                        b
            <symbol:src ns:1 linkage:0>
                type::< point , struct >
        scope type:function_prototype_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< point , void >
                <symbol:b ns:1 linkage:0>
                    type::< point , void >
    scope type:function_prototype_scope with child 1 and namespace 0
        <symbol table>
            <symbol:h ns:1 linkage:0>
                type::< point , struct >
            <symbol:cmp ns:1 linkage:0>
                type::< point , function , bool >
                    function have 2 parameters are:
                        a
                        b
            <symbol:del_item ns:1 linkage:0>
                type::< point , struct >
        scope type:function_prototype_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< point , void >
                <symbol:b ns:1 linkage:0>
                    type::< point , void >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:h ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:len ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:p ns:1 linkage:0>
                type::< point , void >
            <symbol:v ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:low ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:high ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:v ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:v ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:v ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:v ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:dst ns:1 linkage:0>
                type::< point , point , struct >
            <symbol:src ns:1 linkage:0>
                type::< point , struct >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 2 and namespace 0
            <symbol table>
                <symbol:dst ns:1 linkage:0>
                    type::< point , struct >
                <symbol:src ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                    <symbol:i ns:1 linkage:0>
                        type::< unsigned_long >
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:v ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_qual_cnt ns:1 linkage:0>
                type::< point , signed_int >
            <symbol:func_spec_cnt ns:1 linkage:0>
                type::< point , signed_int >
            <symbol:storage_spec_type ns:1 linkage:0>
                type::< enum >
            <symbol:align_spec_cnt ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:spec_type ns:1 linkage:0>
                type::< enum >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:str ns:1 linkage:0>
                type::< point , signed_char >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:t ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:tmpt ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:a ns:1 linkage:0>
                type::< point , struct >
            <symbol:b ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:a ns:1 linkage:0>
                type::< point , void >
            <symbol:b ns:1 linkage:0>
                type::< point , void >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:is_lvalue ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:qual_a ns:1 linkage:0>
                type::< point , struct >
            <symbol:qual_b ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:tmp_type ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:is_atomic ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:is_pointer ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:is_array ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:is_function ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
            <symbol:is_qual ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:tmp_type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec_a ns:1 linkage:0>
                type::< point , struct >
            <symbol:type_vec_b ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec_a ns:1 linkage:0>
                type::< point , struct >
            <symbol:type_vec_b ns:1 linkage:0>
                type::< point , struct >
            <symbol:compatible_type ns:1 linkage:0>
                type::< bool >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:operand_a ns:1 linkage:0>
                type::< point , point , struct >
            <symbol:operand_b ns:1 linkage:0>
                type::< point , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:integer_operand ns:1 linkage:0>
                type::< point , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:float_operand ns:1 linkage:0>
                type::< point , point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:current_obj_type ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:current_obj_type ns:1 linkage:0>
                type::< point , struct >
            <symbol:sub_obj_size ns:1 linkage:0>
                type::< unsigned_long >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:sub_obj_off ns:1 linkage:0>
                type::< unsigned_long >
            <symbol:sub_obj_type ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:type_vec ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:father ns:1 linkage:0>
                type::< point , struct >
            <symbol:type ns:1 linkage:0>
                type::< enum >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol_item ns:1 linkage:0>
                type::< point , struct >
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:name_space ns:1 linkage:0>
                type::< unsigned_int >
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:name_space ns:1 linkage:0>
                type::< unsigned_int >
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:name_space ns:1 linkage:0>
                type::< unsigned_int >
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol_table ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:h ns:1 linkage:0>
                type::< point , struct >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:name_space ns:1 linkage:0>
                type::< unsigned_int >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:a ns:1 linkage:0>
                type::< point , void >
            <symbol:b ns:1 linkage:0>
                type::< point , void >
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:symbol ns:1 linkage:0>
                type::< point , signed_char >
            <symbol:name_space ns:1 linkage:0>
                type::< unsigned_int >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 2 and namespace 0
            <symbol table>
                <symbol:new ns:1 linkage:0>
                    type::< point , struct >
                <symbol:old ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 4 and namespace 0
            <symbol table>
                <symbol:father ns:1 linkage:0>
                    type::< point , struct >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
                <symbol:type ns:1 linkage:0>
                    type::< enum >
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 1 and namespace 0
            <symbol table>
                <symbol:symbol ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:name_space ns:1 linkage:0>
                    type::< unsigned_int >
                <symbol:tmp ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:symbol_item ns:1 linkage:0>
                    type::< point , struct >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 2 and namespace 0
            <symbol table>
                <symbol:curr ns:1 linkage:0>
                    type::< point , struct >
                <symbol:symbol ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:item ns:1 linkage:0>
                    type::< point , struct >
                <symbol:name_space ns:1 linkage:0>
                    type::< unsigned_int >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
                <symbol:find_item ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 1 and namespace 0
            <symbol table>
                <symbol:symbol ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:item ns:1 linkage:0>
                    type::< point , struct >
                <symbol:name_space ns:1 linkage:0>
                    type::< unsigned_int >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
                <symbol:find_item ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:symbol ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:name_space ns:1 linkage:0>
                    type::< unsigned_int >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
                <symbol:find_item ns:1 linkage:0>
                    type::< point , struct >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:symbol ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
                <symbol:find_item ns:1 linkage:0>
                    type::< point , struct >
                <symbol:del_item ns:1 linkage:0>
                    type::< point , struct >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 1 and namespace 0
            <symbol table>
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 5 and namespace 0
            <symbol table>
                <symbol:symbol_vec ns:1 linkage:0>
                    type::< point , struct >
                <symbol:symbol_table ns:1 linkage:0>
                    type::< point , struct >
                <symbol:tmp ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                    <symbol:i ns:1 linkage:0>
                        type::< signed_int >
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                    <symbol:i ns:1 linkage:0>
                        type::< signed_int >
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                    <symbol:i ns:1 linkage:0>
                        type::< unsigned_long >
                scope type:block_scope with child 5 and namespace 0
                    <symbol table>
                        <symbol:tmpt ns:1 linkage:0>
                            type::< point , struct >
                        <symbol:tmpfunct ns:1 linkage:0>
                            type::< point , struct >
                    scope type:block_scope with child 0 and namespace 0
                        <symbol table>
                    scope type:block_scope with child 1 and namespace 0
                        <symbol table>
                            <symbol:j ns:1 linkage:0>
                                type::< signed_int >
                        scope type:block_scope with child 0 and namespace 0
                            <symbol table>
                    scope type:block_scope with child 1 and namespace 0
                        <symbol table>
                            <symbol:j ns:1 linkage:0>
                                type::< signed_int >
                        scope type:block_scope with child 0 and namespace 0
                            <symbol table>
                    scope type:block_scope with child 1 and namespace 0
                        <symbol table>
                        scope type:block_scope with child 1 and namespace 0
                            <symbol table>
                            scope type:block_scope with child 1 and namespace 0
                                <symbol table>
                                    <symbol:j ns:1 linkage:0>
                                        type::< signed_int >
                                scope type:block_scope with child 2 and namespace 0
                                    <symbol table>
                                    scope type:block_scope with child 1 and namespace 0
                                        <symbol table>
                                        scope type:block_scope with child 1 and namespace 0
                                            <symbol table>
                                            scope type:block_scope with child 0 and namespace 0
                                                <symbol table>
                                    scope type:block_scope with child 0 and namespace 0
                                        <symbol table>
                    scope type:block_scope with child 2 and namespace 0
                        <symbol table>
                        scope type:block_scope with child 3 and namespace 0
                            <symbol table>
                                <symbol:paravec ns:1 linkage:0>
                                    type::< point , struct >
                            scope type:block_scope with child 1 and namespace 0
                                <symbol table>
                                scope type:block_scope with child 1 and namespace 0
                                    <symbol table>
                                    scope type:block_scope with child 1 and namespace 0
                                        <symbol table>
                                            <symbol:k ns:1 linkage:0>
                                                type::< signed_int >
                                        scope type:block_scope with child 0 and namespace 0
                                            <symbol table>
                            scope type:block_scope with child 1 and namespace 0
                                <symbol table>
                                    <symbol:j ns:1 linkage:0>
                                        type::< signed_int >
                                scope type:block_scope with child 0 and namespace 0
                                    <symbol table>
                            scope type:block_scope with child 1 and namespace 0
                                <symbol table>
                                    <symbol:j ns:1 linkage:0>
                                        type::< unsigned_long >
                                scope type:block_scope with child 2 and namespace 0
                                    <symbol table>
                                        <symbol:tmpfuncpara ns:1 linkage:0>
                                            type::< point , struct >
                                    scope type:block_scope with child 1 and namespace 0
                                        <symbol table>
                                            <symbol:k ns:1 linkage:0>
                                                type::< signed_int >
                                        scope type:block_scope with child 0 and namespace 0
                                            <symbol table>
                                    scope type:block_scope with child 0 and namespace 0
                                        <symbol table>
                        scope type:block_scope with child 1 and namespace 0
                            <symbol table>
                            scope type:block_scope with child 2 and namespace 0
                                <symbol table>
                                scope type:block_scope with child 1 and namespace 0
                                    <symbol table>
                                    scope type:block_scope with child 4 and namespace 0
                                        <symbol table>
                                        scope type:block_scope with child 0 and namespace 0
                                            <symbol table>
                                        scope type:block_scope with child 1 and namespace 0
                                            <symbol table>
                                                <symbol:j ns:1 linkage:0>
                                                    type::< signed_int >
                                            scope type:block_scope with child 0 and namespace 0
                                                <symbol table>
                                        scope type:block_scope with child 1 and namespace 0
                                            <symbol table>
                                                <symbol:j ns:1 linkage:0>
                                                    type::< unsigned_long >
                                            scope type:block_scope with child 1 and namespace 0
                                                <symbol table>
                                                    <symbol:tmpm ns:1 linkage:0>
                                                        type::< point , struct >
                                                scope type:block_scope with child 1 and namespace 0
                                                    <symbol table>
                                                    scope type:block_scope with child 2 and namespace 0
                                                        <symbol table>
                                                        scope type:block_scope with child 1 and namespace 0
                                                            <symbol table>
                                                                <symbol:k ns:1 linkage:0>
                                                                    type::< signed_int >
                                                            scope type:block_scope with child 0 and namespace 0
                                                                <symbol table>
                                                        scope type:block_scope with child 2 and namespace 0
                                                            <symbol table>
                                                            scope type:block_scope with child 1 and namespace 0
                                                                <symbol table>
                                                                scope type:block_scope with child 0 and namespace 0
                                                                    <symbol table>
                                                            scope type:block_scope with child 1 and namespace 0
                                                                <symbol table>
                                                                scope type:block_scope with child 0 and namespace 0
                                                                    <symbol table>
                                        scope type:block_scope with child 1 and namespace 0
                                            <symbol table>
                                                <symbol:j ns:1 linkage:0>
                                                    type::< signed_int >
                                            scope type:block_scope with child 0 and namespace 0
                                                <symbol table>
                                scope type:block_scope with child 1 and namespace 0
                                    <symbol table>
                                    scope type:block_scope with child 1 and namespace 0
                                        <symbol table>
                                        scope type:block_scope with child 1 and namespace 0
                                            <symbol table>
                                                <symbol:j ns:1 linkage:0>
                                                    type::< signed_int >
                                            scope type:block_scope with child 0 and namespace 0
                                                <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                    <symbol:i ns:1 linkage:0>
                        type::< unsigned_long >
                scope type:block_scope with child 1 and namespace 0
                    <symbol table>
                        <symbol:child ns:1 linkage:0>
                            type::< point , struct >
                    scope type:block_scope with child 0 and namespace 0
                        <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 1 and namespace 0
            <symbol table>
                <symbol:h ns:1 linkage:0>
                    type::< point , struct >
                <symbol:symbol_vec ns:1 linkage:0>
                    type::< point , struct >
                <symbol:tmp ns:1 linkage:0>
                    type::< point , struct >
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                    <symbol:i ns:1 linkage:0>
                        type::< unsigned_long >
                scope type:block_scope with child 1 and namespace 0
                    <symbol table>
                    scope type:block_scope with child 1 and namespace 0
                        <symbol table>
                        scope type:block_scope with child 0 and namespace 0
                            <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 2 and namespace 0
            <symbol table>
                <symbol:res ns:1 linkage:0>
                    type::< unsigned_long_long_int >
                <symbol:symbol ns:1 linkage:0>
                    type::< point , signed_char >
                <symbol:name_space ns:1 linkage:0>
                    type::< unsigned_int >
            scope type:block_scope with child 0 and namespace 0
                <symbol table>
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 1 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< point , void >
                <symbol:b ns:1 linkage:0>
                    type::< point , void >
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
end print symbol table
start print ir
start print ir
not decided token ce
not decided token filename
not decided token error_line
not decided token error_token_value
not decided token capicity
not decided token len
not decided token len
not decided token data
not decided token count
not decided token count
not decided token data_field
not decided token data_field
not decided token data_size
not decided token data_size
not decided token declared
not decided token declared
not decided token defined
not decided token defined
not decided token key
not decided token key
not decided token linkage
not decided token linkage
not decided token name_space
not decided token name_space
not decided token type_vec
not decided token type_vec
not decided token value
not decided token value
not decided token father
not decided token child_table
not decided token level
not decided token level
not decided token level
not decided token child_table
not decided token sym_hash_table
not decided token sp_type
not decided token name_space
not decided token typedef_name_table
not decided token typedef_name_table
not decided token typedef_name_table
not decided token typedef_name_table
not decided token typedef_name_table
not decided token enum_const_table
not decided token st_attr_type
not decided token st_attr_type
not decided token st_attr_type
not decided token st_attr
not decided token value
not decided token name_space
not decided token key
not decided token count
not decided token declared
not decided token defined
not decided token align_size
not decided token linkage
not decided token fspec_type
not decided token Thread_local
not decided token data_size
not decided token data_field
not decided token data_field
not decided token type_vec
not decided token const_expr
not decided token sym_hash_table
not decided token sym_hash_table
not decided token father
not decided token sym_hash_table
not decided token sym_hash_table
not decided token typedef_name_table
not decided token typedef_name_table
not decided token sym_hash_table
not decided token typedef_name_table
not decided token enum_const_table
not decided token child_table
not decided token level
not decided token sp_type
not decided token child_table
not decided token len
not decided token name_space
not decided token level
not decided token sym_hash_table
not decided token len
not decided token len
not decided token data
not decided token count
not decided token level
not decided token value
not decided token name_space
not decided token linkage
not decided token level
not decided token type_vec
not decided token type_vec
not decided token len
not decided token type_vec
not decided token type_vec
not decided token len
not decided token type_vec
not decided token data
not decided token typ_category
not decided token type_vec
not decided token func_parameters
not decided token len
not decided token level
not decided token level
not decided token len
not decided token len
not decided token len
not decided token data
not decided token level
not decided token para_name
not decided token para_name
not decided token modifier
not decided token name_space
not decided token typ_category
not decided token typ_category
not decided token members
not decided token level
not decided token members
not decided token len
not decided token members
not decided token len
not decided token members
not decided token members
not decided token len
not decided token members
not decided token data
not decided token level
not decided token member_name
not decided token bit_field
not decided token member_name
not decided token offset
not decided token bit_field_offset
not decided token bit_field_size
not decided token member_name
not decided token offset
not decided token bit_field
not decided token offset
not decided token bit_field_offset
not decided token bit_field_size
not decided token offset
not decided token level
not decided token total_data_size
not decided token data_align
not decided token typ_category
not decided token level
not decided token axis_size
not decided token child_table
not decided token len
not decided token child_table
not decided token child_table
not decided token len
not decided token child_table
not decided token data
not decided token capicity
not decided token data
not decided token capicity
not decided token data
not decided token name_space
not decided token name_space
not decided token value
not decided token value
test pass!
