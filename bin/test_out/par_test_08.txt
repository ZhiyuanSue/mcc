read in file name:
	./bin/test_src/par_test_08.c
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:TP_CATEGORY sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SPEC_NONE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_VOID sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SCHAR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USCHAR sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SSHORT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USHORT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SINT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USINT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SLONGLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_USLONGLONG sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_FLOAT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_DOUBLE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_LONG_DOUBLE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_BOOL sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_FLOAT_COMPLEX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_DOUBLE_COMPLEX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_LONG_DOUBLE_COMPLEX sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_POINT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_UNION_STRUCT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_UNION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_STRUCT sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_ARRAY sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_ENUM sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_FUNCTION sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_TYPE_DEF_TYPE sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:TP_SPEC_ATOMIC sym level: 0 namespace:1>
                        <,:, sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:main sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:t sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <integer_constant:19 sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:a sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:a sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 2 namespace:1>
                                <&conditional_expr ns:1>
                                    <&equality_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:t sym level: 2 namespace:1>
                                        <==:== sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <identifier:TP_VOID sym level: 2 namespace:1>
                                    <?:? sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:1 sym level: 2 namespace:1>
                                    <colon:: sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <(:( sym level: 2 namespace:1>
                                        <&conditional_expr ns:1>
                                            <&equality_expr ns:1>
                                                <&primary_expression ns:1>
                                                    <identifier:t sym level: 2 namespace:1>
                                                <==:== sym level: 2 namespace:1>
                                                <&primary_expression ns:1>
                                                    <identifier:TP_SCHAR sym level: 2 namespace:1>
                                            <?:? sym level: 2 namespace:1>
                                            <&primary_expression ns:1>
                                                <integer_constant:2 sym level: 2 namespace:1>
                                            <colon:: sym level: 2 namespace:1>
                                            <&primary_expression ns:1>
                                                <(:( sym level: 2 namespace:1>
                                                <&conditional_expr ns:1>
                                                    <&equality_expr ns:1>
                                                        <&primary_expression ns:1>
                                                            <identifier:t sym level: 2 namespace:1>
                                                        <==:== sym level: 2 namespace:1>
                                                        <&primary_expression ns:1>
                                                            <identifier:TP_USCHAR sym level: 2 namespace:1>
                                                    <?:? sym level: 2 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <integer_constant:3 sym level: 2 namespace:1>
                                                    <colon:: sym level: 2 namespace:1>
                                                    <&primary_expression ns:1>
                                                        <(:( sym level: 2 namespace:1>
                                                        <&conditional_expr ns:1>
                                                            <&equality_expr ns:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:t sym level: 2 namespace:1>
                                                                <==:== sym level: 2 namespace:1>
                                                                <&primary_expression ns:1>
                                                                    <identifier:TP_SSHORT sym level: 2 namespace:1>
                                                            <?:? sym level: 2 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <integer_constant:4 sym level: 2 namespace:1>
                                                            <colon:: sym level: 2 namespace:1>
                                                            <&primary_expression ns:1>
                                                                <(:( sym level: 2 namespace:1>
                                                                <&conditional_expr ns:1>
                                                                    <&equality_expr ns:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:t sym level: 2 namespace:1>
                                                                        <==:== sym level: 2 namespace:1>
                                                                        <&primary_expression ns:1>
                                                                            <identifier:TP_USHORT sym level: 2 namespace:1>
                                                                    <?:? sym level: 2 namespace:1>
                                                                    <&primary_expression ns:1>
                                                                        <integer_constant:5 sym level: 2 namespace:1>
                                                                    <colon:: sym level: 2 namespace:1>
                                                                    <&primary_expression ns:1>
                                                                        <(:( sym level: 2 namespace:1>
                                                                        <&conditional_expr ns:1>
                                                                            <&equality_expr ns:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:t sym level: 2 namespace:1>
                                                                                <==:== sym level: 2 namespace:1>
                                                                                <&primary_expression ns:1>
                                                                                    <identifier:TP_SINT sym level: 2 namespace:1>
                                                                            <?:? sym level: 2 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <integer_constant:6 sym level: 2 namespace:1>
                                                                            <colon:: sym level: 2 namespace:1>
                                                                            <&primary_expression ns:1>
                                                                                <(:( sym level: 2 namespace:1>
                                                                                <&conditional_expr ns:1>
                                                                                    <&equality_expr ns:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <identifier:t sym level: 2 namespace:1>
                                                                                        <==:== sym level: 2 namespace:1>
                                                                                        <&primary_expression ns:1>
                                                                                            <identifier:TP_USINT sym level: 2 namespace:1>
                                                                                    <?:? sym level: 2 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <integer_constant:7 sym level: 2 namespace:1>
                                                                                    <colon:: sym level: 2 namespace:1>
                                                                                    <&primary_expression ns:1>
                                                                                        <(:( sym level: 2 namespace:1>
                                                                                        <&conditional_expr ns:1>
                                                                                            <&equality_expr ns:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:t sym level: 2 namespace:1>
                                                                                                <==:== sym level: 2 namespace:1>
                                                                                                <&primary_expression ns:1>
                                                                                                    <identifier:TP_SLONG sym level: 2 namespace:1>
                                                                                            <?:? sym level: 2 namespace:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <integer_constant:8 sym level: 2 namespace:1>
                                                                                            <colon:: sym level: 2 namespace:1>
                                                                                            <&primary_expression ns:1>
                                                                                                <(:( sym level: 2 namespace:1>
                                                                                                <&conditional_expr ns:1>
                                                                                                    <&equality_expr ns:1>
                                                                                                        <&primary_expression ns:1>
                                                                                                            <identifier:t sym level: 2 namespace:1>
                                                                                                        <==:== sym level: 2 namespace:1>
                                                                                                        <&primary_expression ns:1>
                                                                                                            <identifier:TP_USLONG sym level: 2 namespace:1>
                                                                                                    <?:? sym level: 2 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <integer_constant:9 sym level: 2 namespace:1>
                                                                                                    <colon:: sym level: 2 namespace:1>
                                                                                                    <&primary_expression ns:1>
                                                                                                        <(:( sym level: 2 namespace:1>
                                                                                                        <&conditional_expr ns:1>
                                                                                                            <&equality_expr ns:1>
                                                                                                                <&primary_expression ns:1>
                                                                                                                    <identifier:t sym level: 2 namespace:1>
                                                                                                                <==:== sym level: 2 namespace:1>
                                                                                                                <&primary_expression ns:1>
                                                                                                                    <identifier:TP_SLONGLONG sym level: 2 namespace:1>
                                                                                                            <?:? sym level: 2 namespace:1>
                                                                                                            <&primary_expression ns:1>
                                                                                                                <integer_constant:10 sym level: 2 namespace:1>
                                                                                                            <colon:: sym level: 2 namespace:1>
                                                                                                            <&primary_expression ns:1>
                                                                                                                <(:( sym level: 2 namespace:1>
                                                                                                                <&conditional_expr ns:1>
                                                                                                                    <&equality_expr ns:1>
                                                                                                                        <&primary_expression ns:1>
                                                                                                                            <identifier:t sym level: 2 namespace:1>
                                                                                                                        <==:== sym level: 2 namespace:1>
                                                                                                                        <&primary_expression ns:1>
                                                                                                                            <identifier:TP_USLONGLONG sym level: 2 namespace:1>
                                                                                                                    <?:? sym level: 2 namespace:1>
                                                                                                                    <&primary_expression ns:1>
                                                                                                                        <integer_constant:11 sym level: 2 namespace:1>
                                                                                                                    <colon:: sym level: 2 namespace:1>
                                                                                                                    <&primary_expression ns:1>
                                                                                                                        <(:( sym level: 2 namespace:1>
                                                                                                                        <&conditional_expr ns:1>
                                                                                                                            <&equality_expr ns:1>
                                                                                                                                <&primary_expression ns:1>
                                                                                                                                    <identifier:t sym level: 2 namespace:1>
                                                                                                                                <==:== sym level: 2 namespace:1>
                                                                                                                                <&primary_expression ns:1>
                                                                                                                                    <identifier:TP_FLOAT sym level: 2 namespace:1>
                                                                                                                            <?:? sym level: 2 namespace:1>
                                                                                                                            <&primary_expression ns:1>
                                                                                                                                <integer_constant:12 sym level: 2 namespace:1>
                                                                                                                            <colon:: sym level: 2 namespace:1>
                                                                                                                            <&primary_expression ns:1>
                                                                                                                                <(:( sym level: 2 namespace:1>
                                                                                                                                <&conditional_expr ns:1>
                                                                                                                                    <&equality_expr ns:1>
                                                                                                                                        <&primary_expression ns:1>
                                                                                                                                            <identifier:t sym level: 2 namespace:1>
                                                                                                                                        <==:== sym level: 2 namespace:1>
                                                                                                                                        <&primary_expression ns:1>
                                                                                                                                            <identifier:TP_DOUBLE sym level: 2 namespace:1>
                                                                                                                                    <?:? sym level: 2 namespace:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <integer_constant:13 sym level: 2 namespace:1>
                                                                                                                                    <colon:: sym level: 2 namespace:1>
                                                                                                                                    <&primary_expression ns:1>
                                                                                                                                        <integer_constant:0 sym level: 2 namespace:1>
                                                                                                                                <):) sym level: 2 namespace:1>
                                                                                                                        <):) sym level: 2 namespace:1>
                                                                                                                <):) sym level: 2 namespace:1>
                                                                                                        <):) sym level: 2 namespace:1>
                                                                                                <):) sym level: 2 namespace:1>
                                                                                        <):) sym level: 2 namespace:1>
                                                                                <):) sym level: 2 namespace:1>
                                                                        <):) sym level: 2 namespace:1>
                                                                <):) sym level: 2 namespace:1>
                                                        <):) sym level: 2 namespace:1>
                                                <):) sym level: 2 namespace:1>
                                        <):) sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start declaration line:0
        start specify or qualify node
            start enum
            finish enum
        finish specify or qualify node
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
        finish func
    finish declarator
    start compound expr
        start declaration line:35
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start primary expr
            <Type>:< signed_int >
            end primary expr
        finish declaration
        start declaration line:36
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish declaration
        start expr expr
            start assignment expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
                start primary expr
                    start condition expr
                        start equal expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                            start primary expr
                            <Type>:< const , signed_int >
                            end primary expr
                        <Type>:< signed_int >
                        end equal expr
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                        start primary expr
                            start condition expr
                                start equal expr
                                    start primary expr
                                    <Type>:< signed_int >
                                    end primary expr
                                    start primary expr
                                    <Type>:< const , signed_int >
                                    end primary expr
                                <Type>:< signed_int >
                                end equal expr
                                start primary expr
                                <Type>:< signed_int >
                                end primary expr
                                start primary expr
                                    start condition expr
                                        start equal expr
                                            start primary expr
                                            <Type>:< signed_int >
                                            end primary expr
                                            start primary expr
                                            <Type>:< const , signed_int >
                                            end primary expr
                                        <Type>:< signed_int >
                                        end equal expr
                                        start primary expr
                                        <Type>:< signed_int >
                                        end primary expr
                                        start primary expr
                                            start condition expr
                                                start equal expr
                                                    start primary expr
                                                    <Type>:< signed_int >
                                                    end primary expr
                                                    start primary expr
                                                    <Type>:< const , signed_int >
                                                    end primary expr
                                                <Type>:< signed_int >
                                                end equal expr
                                                start primary expr
                                                <Type>:< signed_int >
                                                end primary expr
                                                start primary expr
                                                    start condition expr
                                                        start equal expr
                                                            start primary expr
                                                            <Type>:< signed_int >
                                                            end primary expr
                                                            start primary expr
                                                            <Type>:< const , signed_int >
                                                            end primary expr
                                                        <Type>:< signed_int >
                                                        end equal expr
                                                        start primary expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                        start primary expr
                                                            start condition expr
                                                                start equal expr
                                                                    start primary expr
                                                                    <Type>:< signed_int >
                                                                    end primary expr
                                                                    start primary expr
                                                                    <Type>:< const , signed_int >
                                                                    end primary expr
                                                                <Type>:< signed_int >
                                                                end equal expr
                                                                start primary expr
                                                                <Type>:< signed_int >
                                                                end primary expr
                                                                start primary expr
                                                                    start condition expr
                                                                        start equal expr
                                                                            start primary expr
                                                                            <Type>:< signed_int >
                                                                            end primary expr
                                                                            start primary expr
                                                                            <Type>:< const , signed_int >
                                                                            end primary expr
                                                                        <Type>:< signed_int >
                                                                        end equal expr
                                                                        start primary expr
                                                                        <Type>:< signed_int >
                                                                        end primary expr
                                                                        start primary expr
                                                                            start condition expr
                                                                                start equal expr
                                                                                    start primary expr
                                                                                    <Type>:< signed_int >
                                                                                    end primary expr
                                                                                    start primary expr
                                                                                    <Type>:< const , signed_int >
                                                                                    end primary expr
                                                                                <Type>:< signed_int >
                                                                                end equal expr
                                                                                start primary expr
                                                                                <Type>:< signed_int >
                                                                                end primary expr
                                                                                start primary expr
                                                                                    start condition expr
                                                                                        start equal expr
                                                                                            start primary expr
                                                                                            <Type>:< signed_int >
                                                                                            end primary expr
                                                                                            start primary expr
                                                                                            <Type>:< const , signed_int >
                                                                                            end primary expr
                                                                                        <Type>:< signed_int >
                                                                                        end equal expr
                                                                                        start primary expr
                                                                                        <Type>:< signed_int >
                                                                                        end primary expr
                                                                                        start primary expr
                                                                                            start condition expr
                                                                                                start equal expr
                                                                                                    start primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end primary expr
                                                                                                    start primary expr
                                                                                                    <Type>:< const , signed_int >
                                                                                                    end primary expr
                                                                                                <Type>:< signed_int >
                                                                                                end equal expr
                                                                                                start primary expr
                                                                                                <Type>:< signed_int >
                                                                                                end primary expr
                                                                                                start primary expr
                                                                                                    start condition expr
                                                                                                        start equal expr
                                                                                                            start primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end primary expr
                                                                                                            start primary expr
                                                                                                            <Type>:< const , signed_int >
                                                                                                            end primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end equal expr
                                                                                                        start primary expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end primary expr
                                                                                                        start primary expr
                                                                                                            start condition expr
                                                                                                                start equal expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< signed_int >
                                                                                                                    end primary expr
                                                                                                                    start primary expr
                                                                                                                    <Type>:< const , signed_int >
                                                                                                                    end primary expr
                                                                                                                <Type>:< signed_int >
                                                                                                                end equal expr
                                                                                                                start primary expr
                                                                                                                <Type>:< signed_int >
                                                                                                                end primary expr
                                                                                                                start primary expr
                                                                                                                    start condition expr
                                                                                                                        start equal expr
                                                                                                                            start primary expr
                                                                                                                            <Type>:< signed_int >
                                                                                                                            end primary expr
                                                                                                                            start primary expr
                                                                                                                            <Type>:< const , signed_int >
                                                                                                                            end primary expr
                                                                                                                        <Type>:< signed_int >
                                                                                                                        end equal expr
                                                                                                                        start primary expr
                                                                                                                        <Type>:< signed_int >
                                                                                                                        end primary expr
                                                                                                                        start primary expr
                                                                                                                        <Type>:< signed_int >
                                                                                                                        end primary expr
                                                                                                                    <Type>:< signed_int >
                                                                                                                    end condition expr
                                                                                                                <Type>:< signed_int >
                                                                                                                end primary expr
                                                                                                            <Type>:< signed_int >
                                                                                                            end condition expr
                                                                                                        <Type>:< signed_int >
                                                                                                        end primary expr
                                                                                                    <Type>:< signed_int >
                                                                                                    end condition expr
                                                                                                <Type>:< signed_int >
                                                                                                end primary expr
                                                                                            <Type>:< signed_int >
                                                                                            end condition expr
                                                                                        <Type>:< signed_int >
                                                                                        end primary expr
                                                                                    <Type>:< signed_int >
                                                                                    end condition expr
                                                                                <Type>:< signed_int >
                                                                                end primary expr
                                                                            <Type>:< signed_int >
                                                                            end condition expr
                                                                        <Type>:< signed_int >
                                                                        end primary expr
                                                                    <Type>:< signed_int >
                                                                    end condition expr
                                                                <Type>:< signed_int >
                                                                end primary expr
                                                            <Type>:< signed_int >
                                                            end condition expr
                                                        <Type>:< signed_int >
                                                        end primary expr
                                                    <Type>:< signed_int >
                                                    end condition expr
                                                <Type>:< signed_int >
                                                end primary expr
                                            <Type>:< signed_int >
                                            end condition expr
                                        <Type>:< signed_int >
                                        end primary expr
                                    <Type>:< signed_int >
                                    end condition expr
                                <Type>:< signed_int >
                                end primary expr
                            <Type>:< signed_int >
                            end condition expr
                        <Type>:< signed_int >
                        end primary expr
                    <Type>:< signed_int >
                    end condition expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end assignment expr
        end comopound stmt
start print symbol table
scope type:file_scope with child 1 and namespace 0
    <symbol table>
        <symbol:TP_USHORT ns:1 linkage:0>
            type::< const , signed_int >
                value:5
        <symbol:TP_DOUBLE_COMPLEX ns:1 linkage:0>
            type::< const , signed_int >
                value:17
        <symbol:TP_DOUBLE ns:1 linkage:0>
            type::< const , signed_int >
                value:13
        <symbol:TP_FLOAT ns:1 linkage:0>
            type::< const , signed_int >
                value:12
        <symbol:TP_FLOAT_COMPLEX ns:1 linkage:0>
            type::< const , signed_int >
                value:16
        <symbol:TP_ARRAY ns:1 linkage:0>
            type::< const , signed_int >
                value:23
        <symbol:TP_SPEC_NONE ns:1 linkage:0>
            type::< const , signed_int >
                value:0
        <symbol:TP_USINT ns:1 linkage:0>
            type::< const , signed_int >
                value:7
        <symbol:main ns:1 linkage:0>
            type::< function , void >
                no parameter
        <symbol:TP_TYPE_DEF_TYPE ns:1 linkage:0>
            type::< const , signed_int >
                value:26
        <symbol:TP_SINT ns:1 linkage:0>
            type::< const , signed_int >
                value:6
        <symbol:TP_FUNCTION ns:1 linkage:0>
            type::< const , signed_int >
                value:25
        <symbol:TP_USLONGLONG ns:1 linkage:0>
            type::< const , signed_int >
                value:11
        <symbol:TP_CATEGORY ns:2 linkage:0>
            type::< enum >
        <symbol:TP_SPEC_ATOMIC ns:1 linkage:0>
            type::< const , signed_int >
                value:27
        <symbol:TP_USCHAR ns:1 linkage:0>
            type::< const , signed_int >
                value:3
        <symbol:TP_STRUCT ns:1 linkage:0>
            type::< const , signed_int >
                value:22
        <symbol:TP_USLONG ns:1 linkage:0>
            type::< const , signed_int >
                value:9
        <symbol:TP_SCHAR ns:1 linkage:0>
            type::< const , signed_int >
                value:2
        <symbol:TP_LONG_DOUBLE_COMPLEX ns:1 linkage:0>
            type::< const , signed_int >
                value:18
        <symbol:TP_UNION_STRUCT ns:1 linkage:0>
            type::< const , signed_int >
                value:20
        <symbol:TP_SSHORT ns:1 linkage:0>
            type::< const , signed_int >
                value:4
        <symbol:TP_SLONGLONG ns:1 linkage:0>
            type::< const , signed_int >
                value:10
        <symbol:TP_ENUM ns:1 linkage:0>
            type::< const , signed_int >
                value:24
        <symbol:TP_SLONG ns:1 linkage:0>
            type::< const , signed_int >
                value:8
        <symbol:TP_VOID ns:1 linkage:0>
            type::< const , signed_int >
                value:1
        <symbol:TP_BOOL ns:1 linkage:0>
            type::< const , signed_int >
                value:15
        <symbol:TP_UNION ns:1 linkage:0>
            type::< const , signed_int >
                value:21
        <symbol:TP_POINT ns:1 linkage:0>
            type::< const , signed_int >
                value:19
        <symbol:TP_LONG_DOUBLE ns:1 linkage:0>
            type::< const , signed_int >
                value:14
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< signed_int >
                        value:0
                <symbol:t ns:1 linkage:0>
                    type::< signed_int >
                        value:0
end print symbol table
mempool global alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 54938 times,free 996 times
mempool file alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 17205 times,free 10739 times
test pass!
