read in file name:
	./bin/test_src/par_test_06.c
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:main sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_int:int sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:argc sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_char:char sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&pointer ns:1>
                                        <*:* sym level: 2 namespace:1>
                                    <&direct_declarator ns:1>
                                        <identifier:argv sym level: 2 namespace:1>
                                        <[:[ sym level: 2 namespace:1>
                                        <]:] sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_qual ns:1>
                            <KW__Atomic:_Atomic sym level: 2 namespace:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:hoge sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:piyo sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&postfix_expr ns:1>
                                    <&primary_expression ns:1>
                                        <identifier:atomic_load sym level: 2 namespace:1>
                                    <(:( sym level: 2 namespace:1>
                                    <&unary_expr ns:1>
                                        <ampersand:& sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <identifier:hoge sym level: 2 namespace:1>
                                    <):) sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:printf sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <string:"piyo = %d.\n" sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:piyo sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:piyo sym level: 2 namespace:1>
                            <=:+= sym level: 2 namespace:1>
                            <&additive_expr ns:1>
                                <&primary_expression ns:1>
                                    <identifier:piyo sym level: 2 namespace:1>
                                <+:+= sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <integer_constant:2 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:atomic_store sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&unary_expr ns:1>
                                <ampersand:& sym level: 2 namespace:1>
                                <&primary_expression ns:1>
                                    <identifier:hoge sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:piyo sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:printf sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <string:"hoge = %d.\n" sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:hoge sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
                start array
                finish array
            finish declarator
        finish func
    finish declarator
    start compound expr
        start declaration line:1
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
        finish declaration
        start declaration line:2
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start postfix expr
                start primary expr
                end primary expr fail
                start unary
                    start primary expr
                    <Type>:< atomic , signed_int >
                    end primary expr
                <Type>:< point , atomic , signed_int >
                end unary
            <Type>:< signed_int >
            end postfix expr
        finish declaration
        start expr expr
            start postfix expr
                start primary expr
                end primary expr fail
                start primary expr
                <Type>:< point , signed_char >
                end primary expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end postfix expr
            start expr expr
                start assignment expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                    start add
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    <Type>:< signed_int >
                    end add
                <Type>:< signed_int >
                end assignment expr
                start expr expr
                    start postfix expr
                        start primary expr
                        end primary expr fail
                        start unary
                            start primary expr
                            <Type>:< atomic , signed_int >
                            end primary expr
                        <Type>:< point , atomic , signed_int >
                        end unary
                        start primary expr
                        <Type>:< signed_int >
                        end primary expr
                    <Type>:< signed_int >
                    end postfix expr
                    start expr expr
                        start postfix expr
                            start primary expr
                            <Type>:< function , signed_int >
                            end primary expr
                            start primary expr
                            <Type>:< point , signed_char >
                            end primary expr
                            start primary expr
                            <Type>:< atomic , signed_int >
                            end primary expr
                        <Type>:< signed_int >
                        end postfix expr
                        start return expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        end return stmt
                    end comopound stmt
start print symbol table
scope type:file_scope with child 1 and namespace 0
    <symbol table>
        <symbol:main ns:1 linkage:0>
            type::< function , signed_int >
                function have 2 parameters are:
                    argc
                    argv
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:argc ns:1 linkage:0>
                    type::< signed_int >
                        value:0
                <symbol:piyo ns:1 linkage:0>
                    type::< signed_int >
                        value:0
                <symbol:printf ns:1 linkage:2>
                    type::< function , signed_int >
                        no parameter
                <symbol:atomic_store ns:1 linkage:2>
                    type::< function , signed_int >
                        no parameter
                <symbol:argv ns:1 linkage:0>
                    type::< point , point , signed_char >
                <symbol:hoge ns:1 linkage:0>
                    type::< atomic , signed_int >
                        value:0
                <symbol:atomic_load ns:1 linkage:2>
                    type::< function , signed_int >
                        no parameter
end print symbol table
start print ir
start print ir
Compile Warning:(file ./bin/test_src/par_test_06.c: line 2: token atomic_load )
    int piyo = atomic_load(&hoge);  
reason:	W0005:Implicit function decleration
Compile Warning:(file ./bin/test_src/par_test_06.c: line 3: token printf )
    printf("piyo = %d.\n", piyo);
reason:	W0005:Implicit function decleration
Compile Warning:(file ./bin/test_src/par_test_06.c: line 5: token atomic_store )
    atomic_store(&hoge, piyo);
reason:	W0005:Implicit function decleration
not decided token atomic_load
not decided token printf
not decided token atomic_store
mempool global alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 54938 times,free 996 times
mempool file alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 8878 times,free 6652 times
test pass!
