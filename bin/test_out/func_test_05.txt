read in file name:
	./bin/test_src/func_test_05.c
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:test sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&identifier_list ns:1>
                        <identifier:a sym level: 2 namespace:1>
                        <identifier:b sym level: 2 namespace:1>
                        <identifier:c sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <declaration ns:1>
                <&declaration_spec ns:1>
                    <&type_spec ns:1>
                        <KW_int:int sym level: 2 namespace:1>
                <&init_decl_list ns:1>
                    <&init_decl ns:1>
                        <&declarator ns:1>
                            <&direct_declarator ns:1>
                                <identifier:a sym level: 2 namespace:1>
                    <&init_decl ns:1>
                        <&declarator ns:1>
                            <&direct_declarator ns:1>
                                <identifier:c sym level: 2 namespace:1>
                <;:; sym level: 2 namespace:1>
            <declaration ns:1>
                <&declaration_spec ns:1>
                    <&type_spec ns:1>
                        <KW_double:double sym level: 2 namespace:1>
                <&init_decl_list ns:1>
                    <&init_decl ns:1>
                        <&declarator ns:1>
                            <&direct_declarator ns:1>
                                <identifier:b sym level: 2 namespace:1>
                <;:; sym level: 2 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&function_spec ns:1>
                    <KW__Noreturn:_Noreturn sym level: 1 namespace:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:abc sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
        finish func
    finish declarator
    start declaration line:1
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
        start declarator
        finish declarator
    finish declaration
    start declaration line:2
        start specify or qualify node
        finish specify or qualify node
        start declarator
        finish declarator
    finish declaration
    start compound expr
    end comopound stmt
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
        finish func
    finish declarator
    start compound expr
        start return expr
            start primary expr
            <Type>:< signed_int >
            end primary expr
        end return stmt
    end comopound stmt
start print symbol table
scope type:file_scope with child 2 and namespace 0
    <symbol table>
        <symbol:abc ns:1 linkage:0>
            type::< function , extern  noreturn , signed_int >
                no parameter
        <symbol:test ns:1 linkage:0>
            type::< function , signed_int >
                function have 3 parameters are:
                    a
                    b
                    c
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< signed_int >
                        value:0
                <symbol:b ns:1 linkage:0>
                    type::< double >
                <symbol:c ns:1 linkage:0>
                    type::< signed_int >
                        value:0
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
end print symbol table
start print ir
start print ir
Compile Warning:(file ./bin/test_src/func_test_05.c: line 8: token return )
    return 0;
reason:	W0006:A function declarated '_Noreturn' with a return statement
not decided token a
not decided token b
not decided token c
mempool global alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 54938 times,free 996 times
mempool file alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 3134 times,free 2345 times
test pass!
