read in file name:
	./bin/test_src/arr_test_04.c
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&storage_class_spec ns:1>
                    <KW_extern:extern sym level: 0 namespace:1>
                <&type_spec ns:1>
                    <&struct_union_spec ns:1>
                        <&struct_union ns:1>
                            <KW_struct:struct sym level: 0 namespace:1>
                        <identifier:ssss sym level: 0 namespace:2>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_int:int sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:main sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:testarr sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <integer_constant:1 sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:a sym level: 2 namespace:1>
                                    <[:[ sym level: 2 namespace:1>
                                    <]:] sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <left_brace:{ sym level: 2 namespace:1>
                                <&initializer_list ns:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:1 sym level: 2 namespace:1>
                                    <&initializer ns:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:2 sym level: 2 namespace:1>
                                <right_brace:} sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <&return_stmt ns:1>
                        <KW_return:return sym level: 2 namespace:1>
                        <&primary_expression ns:1>
                            <integer_constant:0 sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start declaration line:0
        start specify or qualify node
        finish specify or qualify node
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
        finish func
    finish declarator
    start compound expr
        start declaration line:2
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start primary expr
            <Type>:< signed_int >
            end primary expr
        finish declaration
        start declaration line:3
            start specify or qualify node
            finish specify or qualify node
            start declarator
                start array
                finish array
            finish declarator
        finish declaration
        start return expr
            start primary expr
            <Type>:< signed_int >
            end primary expr
        end return stmt
    end comopound stmt
start print symbol table
scope type:file_scope with child 1 and namespace 0
    <symbol table>
        <symbol:main ns:1 linkage:0>
            type::< function , signed_int >
                no parameter
        <symbol:ssss ns:2 linkage:0>
            type::< struct >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< array , signed_int >
                        array len is: 0
                <symbol:testarr ns:1 linkage:0>
                    type::< signed_int >
                        value:0
end print symbol table
start print ir
start print ir
mempool global alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 54938 times,free 996 times
mempool file alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 4114 times,free 3149 times
test pass!
