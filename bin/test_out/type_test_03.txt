read in file name:
	./bin/test_src/type_test_03.c
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:v sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_int:int sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:i sym level: 2 namespace:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_int:int sym level: 2 namespace:1>
                                <&declarator ns:1>
                                    <&direct_declarator ns:1>
                                        <identifier:a sym level: 2 namespace:1>
                                        <[:[ sym level: 2 namespace:1>
                                        <&type_qual_list ns:1>
                                            <&type_qual ns:1>
                                                <KW_const:const sym level: 2 namespace:1>
                                        <KW_static:static sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <identifier:i sym level: 2 namespace:1>
                                        <]:] sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <statement ns:1>
                    <&if_stmt ns:1>
                        <KW_if:if sym level: 3 namespace:1>
                        <(:( sym level: 3 namespace:1>
                        <&logical_and_expr ns:1>
                            <&primary_expression ns:1>
                                <integer_constant:1 sym level: 3 namespace:1>
                            <double_ampersand:&& sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:2 sym level: 3 namespace:1>
                            <double_ampersand:&& sym level: 3 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:3 sym level: 3 namespace:1>
                        <):) sym level: 3 namespace:1>
                        <statement ns:1>
                            <compound_stmt ns:1>
                                <left_brace:{ sym level: 4 namespace:1>
                                <right_brace:} sym level: 4 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
            start declarator
            finish declarator
            start specify or qualify node
            finish specify or qualify node
            start declarator
                start array
                    start specify or qualify node
                    finish specify or qualify node
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                finish array
            finish declarator
        finish func
    finish declarator
    start compound expr
        start if expr
            start logical and expr
                start primary expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end logical and expr
            start compound expr
            end comopound stmt
        end if stmt
    end comopound stmt
start print symbol table
scope type:file_scope with child 1 and namespace 0
    <symbol table>
        <symbol:v ns:1 linkage:0>
            type::< function , void >
                function have 2 parameters are:
                    i
                    a
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 1 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< static  const , point , signed_int >
                <symbol:i ns:1 linkage:0>
                    type::< signed_int >
                        value:0
            scope type:block_scope with child 1 and namespace 0
                <symbol table>
                scope type:block_scope with child 0 and namespace 0
                    <symbol table>
end print symbol table
start print ir
start print ir
mempool global alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 54938 times,free 996 times
mempool file alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 3350 times,free 2516 times
test pass!
