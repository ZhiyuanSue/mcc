read in file name:
	./bin/test_src/expr_test_11.c
parser start


test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
start print ast tree
<translation_unit ns:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <&enum_spec ns:1>
                        <KW_enum:enum sym level: 0 namespace:1>
                        <identifier:EEE sym level: 0 namespace:2>
                        <left_brace:{ sym level: 0 namespace:1>
                        <&enum_list ns:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:ERAXT sym level: 0 namespace:1>
                                <=:= sym level: 0 namespace:1>
                                <&constant_expr ns:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:0 sym level: 0 namespace:1>
                            <&enumerator ns:1>
                                <&enum_const ns:1>
                                    <identifier:EQWQSI sym level: 0 namespace:1>
                        <right_brace:} sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <declaration ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 0 namespace:1>
            <&init_decl_list ns:1>
                <&init_decl ns:1>
                    <&declarator ns:1>
                        <&direct_declarator ns:1>
                            <identifier:inttt sym level: 0 namespace:1>
                            <(:( sym level: 0 namespace:1>
                            <&parameter_type_list ns:1>
                                <&parameter_list ns:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:a sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:b sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <KW_int:int sym level: 1 namespace:1>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:c sym level: 1 namespace:1>
                                    <&parameter_declaration ns:1>
                                        <&declaration_spec ns:1>
                                            <&type_spec ns:1>
                                                <&enum_spec ns:1>
                                                    <KW_enum:enum sym level: 1 namespace:1>
                                                    <identifier:EEE sym level: 1 namespace:2>
                                        <&declarator ns:1>
                                            <&direct_declarator ns:1>
                                                <identifier:d sym level: 1 namespace:1>
                            <):) sym level: 0 namespace:1>
            <;:; sym level: 0 namespace:1>
    <external_decl ns:1>
        <function_definition ns:1>
            <&declaration_spec ns:1>
                <&type_spec ns:1>
                    <KW_void:void sym level: 1 namespace:1>
            <&declarator ns:1>
                <&direct_declarator ns:1>
                    <identifier:bbb sym level: 1 namespace:1>
                    <(:( sym level: 1 namespace:1>
                    <&parameter_type_list ns:1>
                        <&parameter_list ns:1>
                            <&parameter_declaration ns:1>
                                <&declaration_spec ns:1>
                                    <&type_spec ns:1>
                                        <KW_void:void sym level: 2 namespace:1>
                    <):) sym level: 1 namespace:1>
            <compound_stmt ns:1>
                <left_brace:{ sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:a sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:t sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&initializer ns:1>
                                <&primary_expression ns:1>
                                    <integer_constant:2 sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&assignment_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:a sym level: 2 namespace:1>
                            <=:= sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <(:( sym level: 2 namespace:1>
                                <expression ns:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:t sym level: 2 namespace:1>
                                        <++:++ sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&postfix_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:t sym level: 2 namespace:1>
                                        <++:++ sym level: 2 namespace:1>
                                    <,:, sym level: 2 namespace:1>
                                    <&additive_expr ns:1>
                                        <&primary_expression ns:1>
                                            <identifier:t sym level: 2 namespace:1>
                                        <+:+ sym level: 2 namespace:1>
                                        <&primary_expression ns:1>
                                            <integer_constant:2 sym level: 2 namespace:1>
                                <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:inttt sym level: 2 namespace:1>
                            <(:( sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:1 sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:2 sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:3 sym level: 2 namespace:1>
                            <,:, sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <integer_constant:4 sym level: 2 namespace:1>
                            <):) sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <declaration ns:1>
                    <&declaration_spec ns:1>
                        <&type_spec ns:1>
                            <KW_int:int sym level: 2 namespace:1>
                    <&init_decl_list ns:1>
                        <&init_decl ns:1>
                            <&declarator ns:1>
                                <&direct_declarator ns:1>
                                    <identifier:abc sym level: 2 namespace:1>
                                    <[:[ sym level: 2 namespace:1>
                                    <&primary_expression ns:1>
                                        <integer_constant:2 sym level: 2 namespace:1>
                                    <]:] sym level: 2 namespace:1>
                    <;:; sym level: 2 namespace:1>
                <statement ns:1>
                    <expr_stmt ns:1>
                        <&postfix_expr ns:1>
                            <&primary_expression ns:1>
                                <identifier:abc sym level: 2 namespace:1>
                            <[:[ sym level: 2 namespace:1>
                            <&primary_expression ns:1>
                                <identifier:ERAXT sym level: 2 namespace:1>
                            <]:] sym level: 2 namespace:1>
                        <;:; sym level: 2 namespace:1>
                <right_brace:} sym level: 2 namespace:1>
finish print ast tree
    start declaration line:0
        start specify or qualify node
            start enum
test point 2
test point 3
                start primary expr
                <Type>:< signed_int >
                end primary expr
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
            finish enum
        finish specify or qualify node
    finish declaration
    start declaration line:1
        start specify or qualify node
        finish specify or qualify node
        start declarator
            start func
                start specify or qualify node
                finish specify or qualify node
                start declarator
test point 2
test point 3
test point 2
test point 3
                finish declarator
test point 2
test point 3
                start specify or qualify node
                finish specify or qualify node
                start declarator
test point 2
test point 3
test point 2
test point 3
                finish declarator
test point 2
test point 3
                start specify or qualify node
                finish specify or qualify node
                start declarator
test point 2
test point 3
test point 2
test point 3
                finish declarator
test point 2
test point 3
                start specify or qualify node
test point 2
test point 3
                finish specify or qualify node
                start declarator
test point 2
test point 3
test point 2
test point 3
                finish declarator
test point 2
test point 3
            finish func
test point 2
test point 3
test point 2
test point 3
        finish declarator
test point 2
test point 3
    finish declaration
    start specify or qualify node
    finish specify or qualify node
    start declarator
        start func
            start specify or qualify node
            finish specify or qualify node
        finish func
test point 2
test point 3
test point 2
test point 3
    finish declarator
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
test point 2
test point 3
    start compound expr
        start declaration line:4
            start specify or qualify node
            finish specify or qualify node
            start declarator
test point 2
test point 3
test point 2
test point 3
            finish declarator
test point 2
test point 3
        finish declaration
        start declaration line:5
            start specify or qualify node
            finish specify or qualify node
            start declarator
test point 2
test point 3
test point 2
test point 3
            finish declarator
test point 2
test point 3
            start primary expr
            <Type>:< signed_int >
            end primary expr
        finish declaration
        start expr expr
            start assignment expr
                start primary expr
test point 2
test point 3
                <Type>:< signed_int >
                end primary expr
                start primary expr
                    start expr
                        start postfix expr
                            start primary expr
test point 2
test point 3
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< signed_int >
                        end postfix expr
                        start postfix expr
                            start primary expr
test point 2
test point 3
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< signed_int >
                        end postfix expr
                        start add
                            start primary expr
test point 2
test point 3
                            <Type>:< signed_int >
                            end primary expr
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        <Type>:< signed_int >
                        end add
                    <Type>:< signed_int >
                    end condition expr
                <Type>:< signed_int >
                end primary expr
            <Type>:< signed_int >
            end assignment expr
            start expr expr
                start postfix expr
                    start primary expr
test point 2
test point 3
                    <Type>:< function , void >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                    start primary expr
                    <Type>:< signed_int >
                    end primary expr
                <Type>:< void >
                end postfix expr
                start declaration line:8
                    start specify or qualify node
                    finish specify or qualify node
                    start declarator
                        start array
                            start primary expr
                            <Type>:< signed_int >
                            end primary expr
                        finish array
test point 2
test point 3
test point 2
test point 3
                    finish declarator
test point 2
test point 3
                finish declaration
                start expr expr
                    start postfix expr
                        start primary expr
test point 2
test point 3
                        <Type>:< array , signed_int >
                        end primary expr
                        start primary expr
test point 2
test point 3
                        <Type>:< const , signed_int >
                        end primary expr
                    <Type>:< signed_int >
                    end postfix expr
                end comopound stmt
start print symbol table
scope type:file_scope with child 2 and namespace 0
    <symbol table>
        <symbol:EQWQSI ns:1 linkage:0>
            type::< const , signed_int >
                value:1
        <symbol:EEE ns:2 linkage:0>
            type::< enum >
        <symbol:bbb ns:1 linkage:0>
            type::< function , void >
                no parameter
        <symbol:ERAXT ns:1 linkage:0>
            type::< const , signed_int >
                value:0
        <symbol:inttt ns:1 linkage:2>
            type::< function , void >
                function have 4 parameters are:
                    a
                    b
                    c
                    d
    scope type:function_prototype_scope with child 0 and namespace 0
        <symbol table>
            <symbol:a ns:1 linkage:0>
                type::< signed_int >
                    value:0
            <symbol:b ns:1 linkage:0>
                type::< signed_int >
                    value:0
            <symbol:c ns:1 linkage:0>
                type::< signed_int >
                    value:0
            <symbol:d ns:1 linkage:0>
                type::< enum >
    scope type:function_scope with child 1 and namespace 0
        <symbol table>
        scope type:block_scope with child 0 and namespace 0
            <symbol table>
                <symbol:a ns:1 linkage:0>
                    type::< signed_int >
                        value:0
                <symbol:t ns:1 linkage:0>
                    type::< signed_int >
                        value:0
                <symbol:abc ns:1 linkage:0>
                    type::< array , signed_int >
                        array len is: 2
end print symbol table
start print ir
start print ir
mempool global alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 54938 times,free 996 times
mempool file alloc/free: alloc 0 times,free 0 times
	use sys alloc/free: alloc 9734 times,free 6960 times
test pass!
